public public const int int ANYSIZE_ARRAY = 1
public const int DELETE =  H10000
public const int READ_CONTROL =  H20000
public const int WRITE_DAC =  H40000
public const int WRITE_OWNER =  H80000
public const int SYNCHRONIZE =  H100000
public const int STANDARD_RIGHTS_READ = (READ_CONTROL)
public const int STANDARD_RIGHTS_WRITE = (READ_CONTROL)
public const int STANDARD_RIGHTS_EXECUTE = (READ_CONTROL)
public const int STANDARD_RIGHTS_REQUIRED =  HF0000
public const int STANDARD_RIGHTS_ALL =  H1F0000
public const int SPECIFIC_RIGHTS_ALL =  HFFFF
public const int SID_REVISION = (1)                        
public const int SID_MAX_SUB_AUTHORITIES = (15)
public const int SID_RECOMMENDED_SUB_AUTHORITIES = (1) 
public const int SidTypeUser = 1
public const int SidTypeGroup = 2
public const int SidTypeDomain = 3
public const int SidTypeAlias = 4
public const int SidTypeWellKnownGroup = 5
public const int SidTypeDeletedAccount = 6
public const int SidTypeInvalid = 7
public const int SidTypeUnknown = 8
public const int SECURITY_NULL_RID =  H0
public const int SECURITY_WORLD_RID =  H0
public const int SECURITY_LOCAL_RID =  H0
public const int SECURITY_CREATOR_OWNER_RID =  H0
public const int SECURITY_CREATOR_GROUP_RID =  H1
public const int SECURITY_DIALUP_RID =  H1
public const int SECURITY_NETWORK_RID =  H2
public const int SECURITY_BATCH_RID =  H3
public const int SECURITY_INTERACTIVE_RID =  H4
public const int SECURITY_SERVICE_RID =  H6
public const int SECURITY_ANONYMOUS_LOGON_RID =  H7
public const int SECURITY_LOGON_IDS_RID =  H5
public const int SECURITY_LOCAL_SYSTEM_RID =  H12
public const int SECURITY_NT_NON_UNIQUE =  H15
public const int SECURITY_BUILTIN_DOMAIN_RID =  H20
public const int DOMAIN_USER_RID_ADMIN =  H1F4
public const int DOMAIN_USER_RID_GUEST =  H1F5
public const int DOMAIN_GROUP_RID_ADMINS =  H200
public const int DOMAIN_GROUP_RID_USERS =  H201
public const int DOMAIN_GROUP_RID_GUESTS =  H202
public const int DOMAIN_ALIAS_RID_ADMINS =  H220
public const int DOMAIN_ALIAS_RID_USERS =  H221
public const int DOMAIN_ALIAS_RID_GUESTS =  H222
public const int DOMAIN_ALIAS_RID_POWER_USERS =  H223
public const int DOMAIN_ALIAS_RID_ACCOUNT_OPS =  H224
public const int DOMAIN_ALIAS_RID_SYSTEM_OPS =  H225
public const int DOMAIN_ALIAS_RID_PRINT_OPS =  H226
public const int DOMAIN_ALIAS_RID_BACKUP_OPS =  H227
public const int DOMAIN_ALIAS_RID_REPLICATOR =  H228
public const int SE_GROUP_MANDATORY =  H1
public const int SE_GROUP_ENABLED_BY_DEFAULT =  H2
public const int SE_GROUP_ENABLED =  H4
public const int SE_GROUP_OWNER =  H8
public const int SE_GROUP_LOGON_ID =  HC0000000
public const int FILE_BEGIN = 0
public const int FILE_CURRENT = 1
public const int FILE_END = 2
public const int FILE_FLAG_WRITE_THROUGH =  H80000000
public const int FILE_FLAG_OVERLAPPED =  H40000000
public const int FILE_FLAG_NO_BUFFERING =  H20000000
public const int FILE_FLAG_RANDOM_ACCESS =  H10000000
public const int FILE_FLAG_SEQUENTIAL_SCAN =  H8000000
public const int FILE_FLAG_DELETE_ON_CLOSE =  H4000000
public const int FILE_FLAG_BACKUP_SEMANTICS =  H2000000
public const int FILE_FLAG_POSIX_SEMANTICS =  H1000000
public const int CREATE_NEW = 1
public const int CREATE_ALWAYS = 2
public const int OPEN_EXISTING = 3
public const int OPEN_ALWAYS = 4
public const int TRUNCATE_EXISTING = 5
public const int PIPE_ACCESS_INBOUND =  H1
public const int PIPE_ACCESS_OUTBOUND =  H2
public const int PIPE_ACCESS_DUPLEX =  H3
public const int PIPE_CLIENT_END =  H0
public const int PIPE_SERVER_END =  H1
public const int PIPE_WAIT =  H0
public const int PIPE_NOWAIT =  H1
public const int PIPE_READMODE_BYTE =  H0
public const int PIPE_READMODE_MESSAGE =  H2
public const int PIPE_TYPE_BYTE =  H0
public const int PIPE_TYPE_MESSAGE =  H4
public const int PIPE_UNLIMITED_INSTANCES = 255
public const int SECURITY_CONTEXT_TRACKING =  H40000
public const int SECURITY_EFFECTIVE_ONLY =  H80000
public const int SECURITY_SQOS_PRESENT =  H100000
public const int SECURITY_VALID_SQOS_FLAGS =  H1F0000
public const int SP_SERIALCOMM =  H1 
public const int PST_UNSPECIFIED =  H0 
public const int PST_RS232 =  H1 
public const int PST_PARALLELPORT =  H2 
public const int PST_RS422 =  H3 
public const int PST_RS423 =  H4 
public const int PST_RS449 =  H5 
public const int PST_FAX =  H21 
public const int PST_SCANNER =  H22 
public const int PST_NETWORK_BRIDGE =  H100 
public const int PST_LAT =  H101 
public const int PST_TCPIP_TELNET =  H102 
public const int PST_X25 =  H103 
public const int PCF_DTRDSR =  H1 
public const int PCF_RTSCTS =  H2 
public const int PCF_RLSD =  H4 
public const int PCF_PARITY_CHECK =  H8 
public const int PCF_XONXOFF =  H10 
public const int PCF_SETXCHAR =  H20 
public const int PCF_TOTALTIMEOUTS =  H40 
public const int PCF_INTTIMEOUTS =  H80 
public const int PCF_SPECIALCHARS =  H100 
public const int PCF_16BITMODE =  H200 
public const int SP_PARITY =  H1 
public const int SP_BAUD =  H2 
public const int SP_DATABITS =  H4 
public const int SP_STOPBITS =  H8 
public const int SP_HANDSHAKING =  H10 
public const int SP_PARITY_CHECK =  H20 
public const int SP_RLSD =  H40 
public const int BAUD_075 =  H1 
public const int BAUD_110 =  H2 
public const int BAUD_134_5 =  H4 
public const int BAUD_150 =  H8 
public const int BAUD_300 =  H10 
public const int BAUD_600 =  H20 
public const int BAUD_1200 =  H40 
public const int BAUD_1800 =  H80 
public const int BAUD_2400 =  H100 
public const int BAUD_4800 =  H200 
public const int BAUD_7200 =  H400 
public const int BAUD_9600 =  H800 
public const int BAUD_14400 =  H1000 
public const int BAUD_19200 =  H2000 
public const int BAUD_38400 =  H4000 
public const int BAUD_56K =  H8000 
public const int BAUD_128K =  H10000
public const int BAUD_115200 =  H20000
public const int BAUD_57600 =  H40000
public const int BAUD_USER =  H10000000
public const int DATABITS_5 =  H1 
public const int DATABITS_6 =  H2 
public const int DATABITS_7 =  H4 
public const int DATABITS_8 =  H8 
public const int DATABITS_16 =  H10 
public const int DATABITS_16X =  H20 
public const int STOPBITS_10 =  H1 
public const int STOPBITS_15 =  H2 
public const int STOPBITS_20 =  H4 
public const int PARITY_NONE =  H100 
public const int PARITY_ODD =  H200 
public const int PARITY_EVEN =  H400 
public const int PARITY_MARK =  H800 
public const int PARITY_SPACE =  H1000
public const int DTR_CONTROL_DISABLE =  H0
public const int DTR_CONTROL_ENABLE =  H1
public const int DTR_CONTROL_HANDSHAKE =  H2
public const int RTS_CONTROL_DISABLE =  H0
public const int RTS_CONTROL_ENABLE =  H1
public const int RTS_CONTROL_HANDSHAKE =  H2
public const int RTS_CONTROL_TOGGLE =  H3
public const int GMEM_FIXED =  H0
public const int GMEM_MOVEABLE =  H2
public const int GMEM_NOCOMPACT =  H10
public const int GMEM_NODISCARD =  H20
public const int GMEM_ZEROINIT =  H40
public const int GMEM_MODIFY =  H80
public const int GMEM_DISCARDABLE =  H100
public const int GMEM_NOT_BANKED =  H1000
public const int GMEM_SHARE =  H2000
public const int GMEM_DDESHARE =  H2000
public const int GMEM_NOTIFY =  H4000
public const int GMEM_LOWER = GMEM_NOT_BANKED
public const int GMEM_VALID_FLAGS =  H7F72
public const int GMEM_INVALID_HANDLE =  H8000
public const int GHND = (GMEM_MOVEABLE Or GMEM_ZEROINIT)
public const int GPTR = (GMEM_FIXED Or GMEM_ZEROINIT)
public const int GMEM_DISCARDED =  H4000
public const int GMEM_LOCKCOUNT =  HFF
public const int LMEM_FIXED =  H0
public const int LMEM_MOVEABLE =  H2
public const int LMEM_NOCOMPACT =  H10
public const int LMEM_NODISCARD =  H20
public const int LMEM_ZEROINIT =  H40
public const int LMEM_MODIFY =  H80
public const int LMEM_DISCARDABLE =  HF00
public const int LMEM_VALID_FLAGS =  HF72
public const int LMEM_INVALID_HANDLE =  H8000
public const int LHND = (LMEM_MOVEABLE + LMEM_ZEROINIT)
public const int LPTR = (LMEM_FIXED + LMEM_ZEROINIT)
public const int NONZEROLHND = (LMEM_MOVEABLE)
public const int NONZEROLPTR = (LMEM_FIXED)
public const int LMEM_DISCARDED =  H4000
public const int LMEM_LOCKCOUNT =  HFF
public const int DEBUG_PROCESS =  H1
public const int DEBUG_ONLY_THIS_PROCESS =  H2
public const int CREATE_SUSPENDED =  H4
public const int DETACHED_PROCESS =  H8
public const int CREATE_NEW_CONSOLE =  H10
public const int NORMAL_PRIORITY_CLASS =  H20
public const int IDLE_PRIORITY_CLASS =  H40
public const int HIGH_PRIORITY_CLASS =  H80
public const int REALTIME_PRIORITY_CLASS =  H100
public const int CREATE_NEW_PROCESS_GROUP =  H200
public const int CREATE_NO_WINDOW =  H8000000
public const int PROFILE_USER =  H10000000
public const int PROFILE_KERNEL =  H20000000
public const int PROFILE_SERVER =  H40000000
public const int MAXLONG =  H7FFFFFFF
public const int THREAD_BASE_PRIORITY_MIN = -2
public const int THREAD_BASE_PRIORITY_MAX = 2
public const int THREAD_BASE_PRIORITY_LOWRT = 15
public const int THREAD_BASE_PRIORITY_IDLE = -15
public const int THREAD_PRIORITY_LOWEST = THREAD_BASE_PRIORITY_MIN
public const int THREAD_PRIORITY_BELOW_NORMAL = (THREAD_PRIORITY_LOWEST + 1)
public const int THREAD_PRIORITY_NORMAL = 0
public const int THREAD_PRIORITY_HIGHEST = THREAD_BASE_PRIORITY_MAX
public const int THREAD_PRIORITY_ABOVE_NORMAL = (THREAD_PRIORITY_HIGHEST - 1)
public const int THREAD_PRIORITY_ERROR_RETURN = (MAXLONG)
public const int THREAD_PRIORITY_TIME_CRITICAL = THREAD_BASE_PRIORITY_LOWRT
public const int THREAD_PRIORITY_IDLE = THREAD_BASE_PRIORITY_IDLE
public const int APPLICATION_ERROR_MASK =  H20000000
public const int ERROR_SEVERITY_SUCCESS =  H0
public const int ERROR_SEVERITY_INFORMATIONAL =  H40000000
public const int ERROR_SEVERITY_WARNING =  H80000000
public const int ERROR_SEVERITY_ERROR =  HC0000000
public const int MINCHAR =  H80
public const int MAXCHAR =  H7F
public const int MINSHORT =  H8000
public const int MAXSHORT =  H7FFF
public const int MINLONG =  H80000000
public const int MAXByte =  HFF
public const int MAXWORD =  HFFFF
public const int MAXDWORD =  HFFFFFFFF 
public const int LANG_NEUTRAL =  H0
public const int LANG_BULGARIAN =  H2
public const int LANG_CHINESE =  H4
public const int LANG_CROATIAN =  H1A
public const int LANG_CZECH =  H5
public const int LANG_DANISH =  H6
public const int LANG_DUTCH =  H13
public const int LANG_ENGLISH =  H9
public const int LANG_FINNISH =  HB
public const int LANG_FRENCH =  HC
public const int LANG_GERMAN =  H7
public const int LANG_GREEK =  H8
public const int LANG_HUNGARIAN =  HE
public const int LANG_ICELANDIC =  HF
public const int LANG_ITALIAN =  H10
public const int LANG_JAPANESE =  H11
public const int LANG_KOREAN =  H12
public const int LANG_NORWEGIAN =  H14
public const int LANG_POLISH =  H15
public const int LANG_PORTUGUESE =  H16
public const int LANG_ROMANIAN =  H18
public const int LANG_RUSSIAN =  H19
public const int LANG_SLOVAK =  H1B
public const int LANG_SLOVENIAN =  H24
public const int LANG_SPANISH =  HA
public const int LANG_SWEDISH =  H1D
public const int LANG_TURKISH =  H1F
public const int SUBLANG_NEUTRAL =  H0                  
public const int SUBLANG_DEFAULT =  H1                  
public const int SUBLANG_SYS_DEFAULT =  H2            
public const int SUBLANG_CHINESE_TRADITIONAL =  H1      
public const int SUBLANG_CHINESE_SIMPLIFIED =  H2       
public const int SUBLANG_CHINESE_HONGKONG =  H3         
public const int SUBLANG_CHINESE_SINGAPORE =  H4        
public const int SUBLANG_DUTCH =  H1                    
public const int SUBLANG_DUTCH_BELGIAN =  H2            
public const int SUBLANG_ENGLISH_US =  H1               
public const int SUBLANG_ENGLISH_UK =  H2               
public const int SUBLANG_ENGLISH_AUS =  H3              
public const int SUBLANG_ENGLISH_CAN =  H4              
public const int SUBLANG_ENGLISH_NZ =  H5               
public const int SUBLANG_ENGLISH_EIRE =  H6             
public const int SUBLANG_FRENCH =  H1                   
public const int SUBLANG_FRENCH_BELGIAN =  H2           
public const int SUBLANG_FRENCH_CANADIAN =  H3          
public const int SUBLANG_FRENCH_SWISS =  H4             
public const int SUBLANG_GERMAN =  H1                   
public const int SUBLANG_GERMAN_SWISS =  H2             
public const int SUBLANG_GERMAN_AUSTRIAN =  H3          
public const int SUBLANG_ITALIAN =  H1                  
public const int SUBLANG_ITALIAN_SWISS =  H2            
public const int SUBLANG_NORWEGIAN_BOKMAL =  H1         
public const int SUBLANG_NORWEGIAN_NYNORSK =  H2        
public const int SUBLANG_PORTUGUESE =  H2               
public const int SUBLANG_PORTUGUESE_BRAZILIAN =  H1     
public const int SUBLANG_SPANISH =  H1                  
public const int SUBLANG_SPANISH_MEXICAN =  H2          
public const int SUBLANG_SPANISH_MODERN =  H3           
public const int SORT_DEFAULT =  H0                     
public const int SORT_JAPANESE_XJIS =  H0               
public const int SORT_JAPANESE_UNICODE =  H1            
public const int SORT_CHINESE_BIG5 =  H0                
public const int SORT_CHINESE_UNICODE =  H1             
public const int SORT_KOREAN_KSC =  H0                  
public const int SORT_KOREAN_UNICODE =  H1            
public const int FILE_READ_DATA = ( H1)                 
public const int FILE_LIST_DIRECTORY = ( H1)            
public const int FILE_WRITE_DATA = ( H2)                
public const int FILE_ADD_FILE = ( H2)                  
public const int FILE_APPEND_DATA = ( H4)               
public const int FILE_ADD_SUBDIRECTORY = ( H4)          
public const int FILE_CREATE_PIPE_INSTANCE = ( H4)      
public const int FILE_READ_EA = ( H8)                   
public const int FILE_READ_PROPERTIES = FILE_READ_EA
public const int FILE_WRITE_EA = ( H10)                 
public const int FILE_WRITE_PROPERTIES = FILE_WRITE_EA
public const int FILE_EXECUTE = ( H20)                  
public const int FILE_TRAVERSE = ( H20)                 
public const int FILE_DELETE_CHILD = ( H40)             
public const int FILE_READ_ATTRIBUTES = ( H80)          
public const int FILE_WRITE_ATTRIBUTES = ( H100)        
public const int FILE_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED Or SYNCHRONIZE Or  H1FF)
public const int FILE_GENERIC_READ = (STANDARD_RIGHTS_READ Or FILE_READ_DATA Or FILE_READ_ATTRIBUTES Or FILE_READ_EA Or SYNCHRONIZE)
public const int FILE_GENERIC_WRITE = (STANDARD_RIGHTS_WRITE Or FILE_WRITE_DATA Or FILE_WRITE_ATTRIBUTES Or FILE_WRITE_EA Or FILE_APPEND_DATA Or SYNCHRONIZE)
public const int FILE_GENERIC_EXECUTE = (STANDARD_RIGHTS_EXECUTE Or FILE_READ_ATTRIBUTES Or FILE_EXECUTE Or SYNCHRONIZE)
public const int FILE_SHARE_READ =  H1
public const int FILE_SHARE_WRITE =  H2
public const int FILE_ATTRIBUTE_READONLY =  H1
public const int FILE_ATTRIBUTE_HIDDEN =  H2
public const int FILE_ATTRIBUTE_SYSTEM =  H4
public const int FILE_ATTRIBUTE_DIRECTORY =  H10
public const int FILE_ATTRIBUTE_ARCHIVE =  H20
public const int FILE_ATTRIBUTE_NORMAL =  H80
public const int FILE_ATTRIBUTE_TEMPORARY =  H100
public const int FILE_ATTRIBUTE_COMPRESSED =  H800
public const int FILE_NOTIFY_CHANGE_FILE_NAME =  H1
public const int FILE_NOTIFY_CHANGE_DIR_NAME =  H2
public const int FILE_NOTIFY_CHANGE_ATTRIBUTES =  H4
public const int FILE_NOTIFY_CHANGE_SIZE =  H8
public const int FILE_NOTIFY_CHANGE_LAST_WRITE =  H10
public const int FILE_NOTIFY_CHANGE_SECURITY =  H100
public const int MAILSLOT_NO_MESSAGE = (-1)
public const int MAILSLOT_WAIT_FOREVER = (-1)
public const int FILE_CASE_SENSITIVE_SEARCH =  H1
public const int FILE_CASE_PRESERVED_NAMES =  H2
public const int FILE_UNICODE_ON_DISK =  H4
public const int FILE_PERSISTENT_ACLS =  H8
public const int FILE_FILE_COMPRESSION =  H10
public const int FILE_VOLUME_IS_COMPRESSED =  H8000
public const int IO_COMPLETION_MODIFY_STATE =  H2
public const int IO_COMPLETION_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED Or SYNCHRONIZE Or  H3)
public const int DUPLICATE_CLOSE_SOURCE =  H1
public const int DUPLICATE_SAME_ACCESS =  H2
public const int ACCESS_SYSTEM_SECURITY =  H1000000
public const int MAXIMUM_ALLOWED =  H2000000
public const int GENERIC_READ =  H80000000
public const int GENERIC_WRITE =  H40000000
public const int GENERIC_EXECUTE =  H20000000
public const int GENERIC_ALL =  H10000000
public const int ACL_REVISION = (2)
public const int ACL_REVISION1 = (1)
public const int ACL_REVISION2 = (2)
public const int ACCESS_ALLOWED_ACE_TYPE =  H0
public const int ACCESS_DENIED_ACE_TYPE =  H1
public const int SYSTEM_AUDIT_ACE_TYPE =  H2
public const int SYSTEM_ALARM_ACE_TYPE =  H3
public const int OBJECT_INHERIT_ACE =  H1
public const int CONTAINER_INHERIT_ACE =  H2
public const int NO_PROPAGATE_INHERIT_ACE =  H4
public const int INHERIT_ONLY_ACE =  H8
public const int VALID_INHERIT_FLAGS =  HF
public const int SUCCESSFUL_ACCESS_ACE_FLAG =  H40
public const int FAILED_ACCESS_ACE_FLAG =  H80
public const int SECURITY_DESCRIPTOR_REVISION = (1)
public const int SECURITY_DESCRIPTOR_REVISION1 = (1)
public const int SECURITY_DESCRIPTOR_MIN_LENGTH = (20)
public const int SE_OWNER_DEFAULTED =  H1
public const int SE_GROUP_DEFAULTED =  H2
public const int SE_DACL_PRESENT =  H4
public const int SE_DACL_DEFAULTED =  H8
public const int SE_SACL_PRESENT =  H10
public const int SE_SACL_DEFAULTED =  H20
public const int SE_SELF_RELATIVE =  H8000
public const int SE_PRIVILEGE_ENABLED_BY_DEFAULT =  H1
public const int SE_PRIVILEGE_ENABLED =  H2
public const int SE_PRIVILEGE_USED_FOR_ACCESS =  H80000000
public const int PRIVILEGE_SET_ALL_NECESSARY = (1)
public const int SE_CREATE_TOKEN_NAME = "SeCreateTokenPrivilege"
public const int SE_ASSIGNPRIMARYTOKEN_NAME = "SeAssignPrimaryTokenPrivilege"
public const int SE_LOCK_MEMORY_NAME = "SeLockMemoryPrivilege"
public const int SE_INCREASE_QUOTA_NAME = "SeIncreaseQuotaPrivilege"
public const int SE_UNSOLICITED_INPUT_NAME = "SeUnsolicitedInputPrivilege"
public const int SE_MACHINE_ACCOUNT_NAME = "SeMachineAccountPrivilege"
public const int SE_TCB_NAME = "SeTcbPrivilege"
public const int SE_SECURITY_NAME = "SeSecurityPrivilege"
public const int SE_TAKE_OWNERSHIP_NAME = "SeTakeOwnershipPrivilege"
public const int SE_LOAD_DRIVER_NAME = "SeLoadDriverPrivilege"
public const int SE_SYSTEM_PROFILE_NAME = "SeSystemProfilePrivilege"
public const int SE_SYSTEMTIME_NAME = "SeSystemtimePrivilege"
public const int SE_PROF_SINGLE_PROCESS_NAME = "SeProfileSingleProcessPrivilege"
public const int SE_INC_BASE_PRIORITY_NAME = "SeIncreaseBasePriorityPrivilege"
public const int SE_CREATE_PAGEFILE_NAME = "SeCreatePagefilePrivilege"
public const int SE_CREATE_PERMANENT_NAME = "SeCreatePermanentPrivilege"
public const int SE_BACKUP_NAME = "SeBackupPrivilege"
public const int SE_RESTORE_NAME = "SeRestorePrivilege"
public const int SE_SHUTDOWN_NAME = "SeShutdownPrivilege"
public const int SE_DEBUG_NAME = "SeDebugPrivilege"
public const int SE_AUDIT_NAME = "SeAuditPrivilege"
public const int SE_SYSTEM_ENVIRONMENT_NAME = "SeSystemEnvironmentPrivilege"
public const int SE_CHANGE_NOTIFY_NAME = "SeChangeNotifyPrivilege"
public const int SE_REMOTE_SHUTDOWN_NAME = "SeRemoteShutdownPrivilege"
public const int SecurityAnonymous = 1
public const int SecurityIdentification = 2
public const int REG_NONE = 0                       // No value type
public const int REG_SZ = 1                         // Unicode nul terminated string
public const int REG_EXPAND_SZ = 2                  // Unicode nul terminated string
public const int REG_BINARY = 3                     // Free form binary
public const int REG_DWORD = 4                      // 32-bit number
public const int REG_DWORD_LITTLE_ENDIAN = 4        // 32-bit number (same as REG_DWORD)
public const int REG_DWORD_BIG_ENDIAN = 5           // 32-bit number
public const int REG_LINK = 6                       // Symbolic Link (unicode)
public const int REG_MULTI_SZ = 7                   // Multiple Unicode strings
public const int REG_RESOURCE_LIST = 8              // Resource list in the resource map
public const int REG_FULL_RESOURCE_DESCRIPTOR = 9   // Resource list in the hardware description
public const int REG_RESOURCE_REQUIREMENTS_LIST = 10
public const int REG_CREATED_NEW_KEY =  H1                      // New Registry Key created
public const int REG_OPENED_EXISTING_KEY =  H2                      // Existing Key opened
public const int REG_WHOLE_HIVE_VOLATILE =  H1                      // Restore whole hive volatile
public const int REG_REFRESH_HIVE =  H2                      // Unwind changes to last flush
public const int REG_NOTIFY_CHANGE_NAME =  H1                      // Create or delete (child)
public const int REG_NOTIFY_CHANGE_ATTRIBUTES =  H2
public const int REG_NOTIFY_CHANGE_LAST_SET =  H4                      // Time stamp
public const int REG_NOTIFY_CHANGE_SECURITY =  H8
public const int REG_LEGAL_CHANGE_FILTER = (REG_NOTIFY_CHANGE_NAME Or REG_NOTIFY_CHANGE_ATTRIBUTES Or REG_NOTIFY_CHANGE_LAST_SET Or REG_NOTIFY_CHANGE_SECURITY)
public const int REG_LEGAL_OPTION = (REG_OPTION_RESERVED Or REG_OPTION_NON_VOLATILE Or REG_OPTION_VOLATILE Or REG_OPTION_CREATE_LINK Or REG_OPTION_BACKUP_RESTORE)
public const int REG_OPTION_RESERVED = 0           // Parameter is reserved
public const int REG_OPTION_NON_VOLATILE = 0       // Key is preserved when system is rebooted
public const int REG_OPTION_VOLATILE = 1           // Key is not preserved when system is rebooted
public const int REG_OPTION_CREATE_LINK = 2        // Created key is a symbolic link
public const int REG_OPTION_BACKUP_RESTORE = 4     // open for backup or restore
public const int KEY_QUERY_VALUE =  H1
public const int KEY_SET_VALUE =  H2
public const int KEY_CREATE_SUB_KEY =  H4
public const int KEY_ENUMERATE_SUB_KEYS =  H8
public const int KEY_NOTIFY =  H10
public const int KEY_CREATE_LINK =  H20
public const int KEY_READ = ((STANDARD_RIGHTS_READ Or KEY_QUERY_VALUE Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY) And (Not SYNCHRONIZE))
public const int KEY_WRITE = ((STANDARD_RIGHTS_WRITE Or KEY_SET_VALUE Or KEY_CREATE_SUB_KEY) And (Not SYNCHRONIZE))
public const int KEY_ALL_ACCESS = ((STANDARD_RIGHTS_ALL Or KEY_QUERY_VALUE Or KEY_SET_VALUE Or KEY_CREATE_SUB_KEY Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY Or KEY_CREATE_LINK) And (Not SYNCHRONIZE))
public const int KEY_EXECUTE = ((KEY_READ) And (Not SYNCHRONIZE))
public const int EXCEPTION_DEBUG_EVENT = 1
public const int CREATE_THREAD_DEBUG_EVENT = 2
public const int CREATE_PROCESS_DEBUG_EVENT = 3
public const int EXIT_THREAD_DEBUG_EVENT = 4
public const int EXIT_PROCESS_DEBUG_EVENT = 5
public const int LOAD_DLL_DEBUG_EVENT = 6
public const int UNLOAD_DLL_DEBUG_EVENT = 7
public const int OUTPUT_DEBUG_STRING_EVENT = 8
public const int RIP_EVENT = 9
public const int EXCEPTION_MAXIMUM_PARAMETERS = 15
public const int DRIVE_REMOVABLE = 2
public const int DRIVE_FIXED = 3
public const int DRIVE_REMOTE = 4
public const int DRIVE_CDROM = 5
public const int DRIVE_RAMDISK = 6
public const int FILE_TYPE_UNKNOWN =  H0
public const int FILE_TYPE_DISK =  H1
public const int FILE_TYPE_CHAR =  H2
public const int FILE_TYPE_PIPE =  H3
public const int FILE_TYPE_REMOTE =  H8000
public const int STD_INPUT_HANDLE = -10 
public const int STD_OUTPUT_HANDLE = -11 
public const int STD_ERROR_HANDLE = -12 
public const int NOPARITY = 0
public const int ODDPARITY = 1
public const int EVENPARITY = 2
public const int MARKPARITY = 3
public const int SPACEPARITY = 4
public const int ONESTOPBIT = 0
public const int ONE5STOPBITS = 1
public const int TWOSTOPBITS = 2
public const int IGNORE = 0
public const int INFINITE =  HFFFF
public const int CBR_110 = 110
public const int CBR_300 = 300
public const int CBR_600 = 600
public const int CBR_1200 = 1200
public const int CBR_2400 = 2400
public const int CBR_4800 = 4800
public const int CBR_9600 = 9600
public const int CBR_14400 = 14400
public const int CBR_19200 = 19200
public const int CBR_38400 = 38400
public const int CBR_56000 = 56000
public const int CBR_57600 = 57600
public const int CBR_115200 = 115200
public const int CBR_128000 = 128000
public const int CBR_256000 = 256000
public const int CE_RXOVER =  H1                //  Receive Queue overflow
public const int CE_OVERRUN =  H2               //  Receive Overrun Error
public const int CE_RXPARITY =  H4              //  Receive Parity Error
public const int CE_FRAME =  H8                 //  Receive Framing error
public const int CE_BREAK =  H10                //  Break Detected
public const int CE_TXFULL =  H100              //  TX Queue is full
public const int CE_PTO =  H200                 //  LPTx Timeout
public const int CE_IOE =  H400                 //  LPTx I/O Error
public const int CE_DNS =  H800                 //  LPTx Device not selected
public const int CE_OOP =  H1000                //  LPTx Out-Of-Paper
public const int CE_MODE =  H8000               //  Requested mode unsupported

public const int IE_BADID = (-1)                //  Invalid or unsupported id
public const int IE_OPEN = (-2)                 //  Device Already Open
public const int IE_NOPEN = (-3)                //  Device Not Open
public const int IE_MEMORY = (-4)               //  Unable to allocate queues
public const int IE_DEFAULT = (-5)              //  Error in default parameters
public const int IE_HARDWARE = (-10)            //  Hardware Not Present
public const int IE_BYTESIZE = (-11)            //  Illegal Byte Size
public const int IE_BAUDRATE = (-12)            //  Unsupported BaudRate
public const int EV_RXCHAR =  H1                //  Any Character received
public const int EV_RXFLAG =  H2                //  Received certain character
public const int EV_TXEMPTY =  H4               //  Transmitt Queue Empty
public const int EV_CTS =  H8                   //  CTS changed state
public const int EV_DSR =  H10                  //  DSR changed state
public const int EV_RLSD =  H20                 //  RLSD changed state
public const int EV_BREAK =  H40                //  BREAK received
public const int EV_ERR =  H80                  //  Line status error occurred
public const int EV_RING =  H100                //  Ring signal detected
public const int EV_PERR =  H200                //  Printer error occured
public const int EV_RX80FULL =  H400            //  Receive buffer is 80 percent full
public const int EV_EVENT1 =  H800              //  Provider specific event 1
public const int EV_EVENT2 =  H1000             //  Provider specific event 2
public const int SETXOFF = 1  //  Simulate XOFF received
public const int SETXON = 2 //  Simulate XON received
public const int SETRTS = 3 //  Set RTS high
public const int CLRRTS = 4 //  Set RTS low
public const int SETDTR = 5 //  Set DTR high
public const int CLRDTR = 6 //  Set DTR low
public const int RESETDEV = 7       //  Reset device if possible
public const int SETBREAK = 8  //Set the device break line
public const int CLRBREAK = 9 // Clear the device break line
public const int PURGE_TXABORT =  H1     //  Kill the pending/current writes to the comm port.
public const int PURGE_RXABORT =  H2     //  Kill the pending/current reads to the comm port.
public const int PURGE_TXCLEAR =  H4     //  Kill the transmit queue if there.
public const int PURGE_RXCLEAR =  H8     //  Kill the typeahead buffer if there.
public const int LPTx =  H80        //  Set if ID is for LPT device
public const int MS_CTS_ON =  H10 
public const int MS_DSR_ON =  H20 
public const int MS_RING_ON =  H40 
public const int MS_RLSD_ON =  H80 
public const int S_QUEUEEMPTY = 0
public const int S_THRESHOLD = 1
public const int S_ALLTHRESHOLD = 2
public const int S_NORMAL = 0
public const int S_LEGATO = 1
public const int S_STACCATO = 2
public const int S_PERIOD512 = 0    //  Freq = N/512 high pitch, less coarse hiss
public const int S_PERIOD1024 = 1   //  Freq = N/1024
public const int S_PERIOD2048 = 2   //  Freq = N/2048 low pitch, more coarse hiss
public const int S_PERIODVOICE = 3  //  Source is frequency from voice channel (3)
public const int S_WHITE512 = 4     //  Freq = N/512 high pitch, less coarse hiss
public const int S_WHITE1024 = 5    //  Freq = N/1024
public const int S_WHITE2048 = 6    //  Freq = N/2048 low pitch, more coarse hiss
public const int S_WHITEVOICE = 7   //  Source is frequency from voice channel (3)
public const int S_SERDVNA = (-1)   //  Device not available
public const int S_SEROFM = (-2)    //  Out of memory
public const int S_SERMACT = (-3)   //  Music active
public const int S_SERQFUL = (-4)   //  Queue full
public const int S_SERBDNT = (-5)   //  Invalid note
public const int S_SERDLN = (-6)    //  Invalid note length
public const int S_SERDCC = (-7)    //  Invalid note count
public const int S_SERDTP = (-8)    //  Invalid tempo
public const int S_SERDVL = (-9)    //  Invalid volume
public const int S_SERDMD = (-10)   //  Invalid mode
public const int S_SERDSH = (-11)   //  Invalid shape
public const int S_SERDPT = (-12)   //  Invalid pitch
public const int S_SERDFQ = (-13)   //  Invalid frequency
public const int S_SERDDR = (-14)   //  Invalid duration
public const int S_SERDSR = (-15)   //  Invalid source
public const int S_SERDST = (-16)   //  Invalid state
public const int NMPWAIT_WAIT_FOREVER =  HFFFF
public const int NMPWAIT_NOWAIT =  H1
public const int NMPWAIT_USE_DEFAULT_WAIT =  H0
public const int FS_CASE_IS_PRESERVED = FILE_CASE_PRESERVED_NAMES
public const int FS_CASE_SENSITIVE = FILE_CASE_SENSITIVE_SEARCH
public const int FS_UNICODE_STORED_ON_DISK = FILE_UNICODE_ON_DISK
public const int FS_PERSISTENT_ACLS = FILE_PERSISTENT_ACLS
public const int SECTION_QUERY =  H1
public const int SECTION_MAP_WRITE =  H2
public const int SECTION_MAP_READ =  H4
public const int SECTION_MAP_EXECUTE =  H8
public const int SECTION_EXTEND_SIZE =  H10
public const int SECTION_ALL_ACCESS = STANDARD_RIGHTS_REQUIRED Or SECTION_QUERY Or SECTION_MAP_WRITE Or SECTION_MAP_READ Or SECTION_MAP_EXECUTE Or SECTION_EXTEND_SIZE
public const int FILE_MAP_COPY = SECTION_QUERY
public const int FILE_MAP_WRITE = SECTION_MAP_WRITE
public const int FILE_MAP_READ = SECTION_MAP_READ
public const int FILE_MAP_ALL_ACCESS = SECTION_ALL_ACCESS
public const int OF_READ =  H0
public const int OF_WRITE =  H1
public const int OF_READWRITE =  H2
public const int OF_SHARE_COMPAT =  H0
public const int OF_SHARE_EXCLUSIVE =  H10
public const int OF_SHARE_DENY_WRITE =  H20
public const int OF_SHARE_DENY_READ =  H30
public const int OF_SHARE_DENY_NONE =  H40
public const int OF_PARSE =  H100
public const int OF_DELETE =  H200
public const int OF_VERIFY =  H400
public const int OF_CANCEL =  H800
public const int OF_CREATE =  H1000
public const int OF_PROMPT =  H2000
public const int OF_EXIST =  H4000
public const int OF_REOPEN =  H8000
public const int OFS_MAXPATHNAME = 128
public const int PROCESSOR_INTEL_386 = 386
public const int PROCESSOR_INTEL_486 = 486
public const int PROCESSOR_INTEL_PENTIUM = 586
public const int PROCESSOR_MIPS_R4000 = 4000
public const int PROCESSOR_ALPHA_21064 = 21064
public const int PROCESSOR_ARCHITECTURE_INTEL = 0
public const int PROCESSOR_ARCHITECTURE_MIPS = 1
public const int PROCESSOR_ARCHITECTURE_ALPHA = 2
public const int PROCESSOR_ARCHITECTURE_PPC = 3
public const int PROCESSOR_ARCHITECTURE_UNKNOWN =  hFFFF
public const int DFC_CAPTION = 1
public const int DFC_MENU = 2
public const int DFC_SCROLL = 3
public const int DFC_BUTTON = 4
public const int DFCS_CAPTIONCLOSE =  H0
public const int DFCS_CAPTIONMIN =  H1
public const int DFCS_CAPTIONMAX =  H2
public const int DFCS_CAPTIONRESTORE =  H3
public const int DFCS_CAPTIONHELP =  H4
public const int DFCS_MENUARROW =  H0
public const int DFCS_MENUCHECK =  H1
public const int DFCS_MENUBULLET =  H2
public const int DFCS_MENUARROWRIGHT =  H4
public const int DFCS_SCROLLUP =  H0
public const int DFCS_SCROLLDOWN =  H1
public const int DFCS_SCROLLLEFT =  H2
public const int DFCS_SCROLLRIGHT =  H3
public const int DFCS_SCROLLCOMBOBOX =  H5
public const int DFCS_SCROLLSIZEGRIP =  H8
public const int DFCS_SCROLLSIZEGRIPRIGHT =  H10
public const int DFCS_BUTTONCHECK =  H0
public const int DFCS_BUTTONRADIOIMAGE =  H1
public const int DFCS_BUTTONRADIOMASK =  H2
public const int DFCS_BUTTONRADIO =  H4
public const int DFCS_BUTTON3STATE =  H8
public const int DFCS_BUTTONPUSH =  H10
public const int DFCS_INACTIVE =  H100
public const int DFCS_PUSHED =  H200
public const int DFCS_CHECKED =  H400
public const int DFCS_ADJUSTRECT =  H2000
public const int DFCS_FLAT =  H4000
public const int DFCS_MONO =  H8000
public const int TF_FORCEDRIVE =  H80
public const int LOCKFILE_FAIL_IMMEDIATELY =  H1
public const int LOCKFILE_EXCLUSIVE_LOCK =  H2
public const int RT_CURSOR = 1 
public const int RT_BITMAP = 2 
public const int RT_ICON = 3 
public const int RT_MENU = 4 
public const int RT_DIALOG = 5 
public const int RT_STRING = 6 
public const int RT_FONTDIR = 7 
public const int RT_FONT = 8 
public const int RT_ACCELERATOR = 9 
public const int RT_RCDATA = 10 
public const int DDD_RAW_TARGET_PATH =  H1
public const int DDD_REMOVE_DEFINITION =  H2
public const int DDD_EXACT_MATCH_ON_REMOVE =  H4
public const int MAX_PATH = 260
public const int MOVEFILE_REPLACE_EXISTING =  H1
public const int MOVEFILE_COPY_ALLOWED =  H2
public const int MOVEFILE_DELAY_UNTIL_REBOOT =  H4
public const int TokenUser = 1
public const int TokenGroups = 2
public const int TokenPrivileges = 3
public const int TokenOwner = 4
public const int TokenPrimaryGroup = 5
public const int TokenDefaultDacl = 6
public const int TokenSource = 7
public const int TokenType = 8
public const int TokenImpersonationLevel = 9
public const int TokenStatistics = 10
public const int GET_TAPE_MEDIA_INFORMATION = 0
public const int GET_TAPE_DRIVE_INFORMATION = 1
public const int SET_TAPE_MEDIA_INFORMATION = 0
public const int SET_TAPE_DRIVE_INFORMATION = 1
public const int FORMAT_MESSAGE_ALLOCATE_BUFFER =  H100
public const int FORMAT_MESSAGE_IGNORE_INSERTS =  H200
public const int FORMAT_MESSAGE_FROM_STRING =  H400
public const int FORMAT_MESSAGE_FROM_HMODULE =  H800
public const int FORMAT_MESSAGE_FROM_SYSTEM =  H1000
public const int FORMAT_MESSAGE_ARGUMENT_ARRAY =  H2000
public const int FORMAT_MESSAGE_MAX_WIDTH_MASK =  HFF
public const int TLS_OUT_OF_INDEXES =  HFFFF
public const int BACKUP_DATA =  H1
public const int BACKUP_EA_DATA =  H2
public const int BACKUP_SECURITY_DATA =  H3
public const int BACKUP_ALTERNATE_DATA =  H4
public const int BACKUP_LINK =  H5
public const int STARTF_USESHOWWINDOW =  H1
public const int STARTF_USESIZE =  H2
public const int STARTF_USEPOSITION =  H4
public const int STARTF_USECOUNTCHARS =  H8
public const int STARTF_USEFILLATTRIBUTE =  H10
public const int STARTF_RUNFULLSCREEN =  H20        //  ignored for non-x86 platforms
public const int STARTF_FORCEONFEEDBACK =  H40
public const int STARTF_FORCEOFFFEEDBACK =  H80
public const int STARTF_USESTDHANDLES =  H100
public const int SHUTDOWN_NORETRY =  H1
public const int TC_NORMAL = 0
public const int TC_HARDERR = 1
public const int TC_GP_TRAP = 2
public const int TC_SIGNAL = 3
public const int MB_PRECOMPOSED =  H1         //  use precomposed chars
public const int MB_COMPOSITE =  H2         //  use composite chars
public const int MB_USEGLYPHCHARS =  H4         //  use glyph chars, not ctrl chars
public const int WC_DEFAULTCHECK =  H100       //  check for default char
public const int WC_COMPOSITECHECK =  H200       //  convert composite to precomposed
public const int WC_DISCARDNS =  H10        //  discard non-spacing chars
public const int WC_SEPCHARS =  H20        //  generate separate chars
public const int WC_DEFAULTCHAR =  H40        //  replace w/ default char
public const int CT_CTYPE1 =  H1         //  ctype 1 information
public const int CT_CTYPE2 =  H2         //  ctype 2 information
public const int CT_CTYPE3 =  H4         //  ctype 3 information
public const int C1_UPPER =  H1    
public const int C1_LOWER =  H2    
public const int C1_DIGIT =  H4    
public const int C1_SPACE =  H8    
public const int C1_PUNCT =  H10   
public const int C1_CNTRL =  H20   
public const int C1_BLANK =  H40   
public const int C1_XDIGIT =  H80  
public const int C1_ALPHA =  H100  
public const int C2_LEFTTORIGHT =  H1    
public const int C2_RIGHTTOLEFT =  H2    
public const int C2_EUROPENUMBER =  H3   
public const int C2_EUROPESEPARATOR =  H4 
public const int C2_EUROPETERMINATOR =  H5  
public const int C2_ARABICNUMBER =  H6    
public const int C2_COMMONSEPARATOR =  H7  
public const int C2_BLOCKSEPARATOR =  H8     
public const int C2_SEGMENTSEPARATOR =  H9   
public const int C2_WHITESPACE =  HA     
public const int C2_OTHERNEUTRAL =  HB   
public const int C2_NOTAPPLICABLE =  H0  
public const int C3_NONSPACING =  H1   
public const int C3_DIACRITIC =  H2   
public const int C3_VOWELMARK =  H4   
public const int C3_SYMBOL =  H8  
public const int C3_NOTAPPLICABLE =  H0   
public const int NORM_IGNORECASE =  H1        
public const int NORM_IGNORENONSPACE =  H2         
public const int NORM_IGNORESYMBOLS =  H4       
public const int MAP_FOLDCZONE =  H10       
public const int MAP_PRECOMPOSED =  H20       
public const int MAP_COMPOSITE =  H40        
public const int MAP_FOLDDIGITS =  H80       
public const int LCMAP_LOWERCASE =  H100      
public const int LCMAP_UPPERCASE =  H200     
public const int LCMAP_SORTKEY =  H400      
public const int LCMAP_BYTEREV =  H800      
public const int SORT_STRINGSORT =  H1000     
public const int CP_ACP = 0 
public const int CP_OEMCP = 1 
public const int CTRY_DEFAULT = 0
public const int CTRY_AUSTRALIA = 61 
public const int CTRY_AUSTRIA = 43  
public const int CTRY_BELGIUM = 32  
public const int CTRY_BRAZIL = 55  
public const int CTRY_CANADA = 2  
public const int CTRY_DENMARK = 45  
public const int CTRY_FINLAND = 358  
public const int CTRY_FRANCE = 33 
public const int CTRY_GERMANY = 49  
public const int CTRY_ICELAND = 354  
public const int CTRY_IRELAND = 353  
public const int CTRY_ITALY = 39  
public const int CTRY_JAPAN = 81  
public const int CTRY_MEXICO = 52  
public const int CTRY_NETHERLANDS = 31  
public const int CTRY_NEW_ZEALAND = 64  
public const int CTRY_NORWAY = 47 
public const int CTRY_PORTUGAL = 351  
public const int CTRY_PRCHINA = 86  
public const int CTRY_SOUTH_KOREA = 82  
public const int CTRY_SPAIN = 34  
public const int CTRY_SWEDEN = 46  
public const int CTRY_SWITZERLAND = 41  
public const int CTRY_TAIWAN = 886  
public const int CTRY_UNITED_KINGDOM = 44 
public const int CTRY_UNITED_STATES = 1  
public const int LOCALE_NOUSEROVERRIDE =  H80000000  //  do not use user overrides
public const int LOCALE_ILANGUAGE =  H1        
public const int LOCALE_SLANGUAGE =  H2        
public const int LOCALE_SENGLANGUAGE =  H1001  
public const int LOCALE_SABBREVLANGNAME =  H3 
public const int LOCALE_SNATIVELANGNAME =  H4  
public const int LOCALE_ICOUNTRY =  H5         
public const int LOCALE_SCOUNTRY =  H6         
public const int LOCALE_SENGCOUNTRY =  H1002   
public const int LOCALE_SABBREVCTRYNAME =  H7  
public const int LOCALE_SNATIVECTRYNAME =  H8  
public const int LOCALE_IDEFAULTLANGUAGE =  H9 
public const int LOCALE_IDEFAULTCOUNTRY =  HA  
public const int LOCALE_IDEFAULTCODEPAGE =  HB 
public const int LOCALE_SLIST =  HC        
public const int LOCALE_IMEASURE =  HD         
public const int LOCALE_SDECIMAL =  HE         
public const int LOCALE_STHOUSAND =  HF        
public const int LOCALE_SGROUPING =  H10       
public const int LOCALE_IDIGITS =  H11      
public const int LOCALE_ILZERO =  H12        
public const int LOCALE_SNATIVEDIGITS =  H13   
public const int LOCALE_SCURRENCY =  H14       
public const int LOCALE_SINTLSYMBOL =  H15       
public const int LOCALE_SMONDECIMALSEP =  H16     
public const int LOCALE_SMONTHOUSANDSEP =  H17      
public const int LOCALE_SMONGROUPING =  H18     
public const int LOCALE_ICURRDIGITS =  H19     
public const int LOCALE_IINTLCURRDIGITS =  H1A  
public const int LOCALE_ICURRENCY =  H1B      
public const int LOCALE_INEGCURR =  H1C       
public const int LOCALE_SDATE =  H1D       
public const int LOCALE_STIME =  H1E        
public const int LOCALE_SSHORTDATE =  H1F       
public const int LOCALE_SLONGDATE =  H20       
public const int LOCALE_STIMEFORMAT =  H1003    
public const int LOCALE_IDATE =  H21        
public const int LOCALE_ILDATE =  H22     
public const int LOCALE_ITIME =  H23      
public const int LOCALE_ICENTURY =  H24   
public const int LOCALE_ITLZERO =  H25    
public const int LOCALE_IDAYLZERO =  H26  
public const int LOCALE_IMONLZERO =  H27  
public const int LOCALE_S1159 =  H28      
public const int LOCALE_S2359 =  H29      
public const int LOCALE_SDAYNAME1 =  H2A  
public const int LOCALE_SDAYNAME2 =  H2B  
public const int LOCALE_SDAYNAME3 =  H2C  
public const int LOCALE_SDAYNAME4 =  H2D  
public const int LOCALE_SDAYNAME5 =  H2E  
public const int LOCALE_SDAYNAME6 =  H2F  
public const int LOCALE_SDAYNAME7 =  H30  
public const int LOCALE_SABBREVDAYNAME1 =  H31 
public const int LOCALE_SABBREVDAYNAME2 =  H32 
public const int LOCALE_SABBREVDAYNAME3 =  H33 
public const int LOCALE_SABBREVDAYNAME4 =  H34 
public const int LOCALE_SABBREVDAYNAME5 =  H35 
public const int LOCALE_SABBREVDAYNAME6 =  H36 
public const int LOCALE_SABBREVDAYNAME7 =  H37 
public const int LOCALE_SMONTHNAME1 =  H38     
public const int LOCALE_SMONTHNAME2 =  H39     
public const int LOCALE_SMONTHNAME3 =  H3A     
public const int LOCALE_SMONTHNAME4 =  H3B     
public const int LOCALE_SMONTHNAME5 =  H3C     
public const int LOCALE_SMONTHNAME6 =  H3D     
public const int LOCALE_SMONTHNAME7 =  H3E     
public const int LOCALE_SMONTHNAME8 =  H3F     
public const int LOCALE_SMONTHNAME9 =  H40     
public const int LOCALE_SMONTHNAME10 =  H41    
public const int LOCALE_SMONTHNAME11 =  H42    
public const int LOCALE_SMONTHNAME12 =  H43    
public const int LOCALE_SABBREVMONTHNAME1 =  H44     
public const int LOCALE_SABBREVMONTHNAME2 =  H45     
public const int LOCALE_SABBREVMONTHNAME3 =  H46     
public const int LOCALE_SABBREVMONTHNAME4 =  H47     
public const int LOCALE_SABBREVMONTHNAME5 =  H48     
public const int LOCALE_SABBREVMONTHNAME6 =  H49     
public const int LOCALE_SABBREVMONTHNAME7 =  H4A     
public const int LOCALE_SABBREVMONTHNAME8 =  H4B     
public const int LOCALE_SABBREVMONTHNAME9 =  H4C     
public const int LOCALE_SABBREVMONTHNAME10 =  H4D    
public const int LOCALE_SABBREVMONTHNAME11 =  H4E    
public const int LOCALE_SABBREVMONTHNAME12 =  H4F    
public const int LOCALE_SABBREVMONTHNAME13 =  H100F
public const int LOCALE_SPOSITIVESIGN =  H50    
public const int LOCALE_SNEGATIVESIGN =  H51    
public const int LOCALE_IPOSSIGNPOSN =  H52     
public const int LOCALE_INEGSIGNPOSN =  H53     
public const int LOCALE_IPOSSYMPRECEDES =  H54  
public const int LOCALE_IPOSSEPBYSPACE =  H55   
public const int LOCALE_INEGSYMPRECEDES =  H56  
public const int LOCALE_INEGSEPBYSPACE =  H57   
public const int TIME_NOMINUTESORSECONDS =  H1  
public const int TIME_NOSECONDS =  H2       
public const int TIME_NOTIMEMARKER =  H4        
public const int TIME_FORCE24HOURFORMAT =  H8
public const int DATE_SHORTDATE =  H1       
public const int DATE_LONGDATE =  H2         
public const int MAX_DEFAULTCHAR = 2
public const int CAL_ICALINTVALUE =  H1                 
public const int CAL_SCALNAME =  H2                     
public const int CAL_IYEAROFFSETRANGE =  H3             
public const int CAL_SERASTRING =  H4                   
public const int CAL_SSHORTDATE =  H5                   
public const int CAL_SLONGDATE =  H6                    
public const int CAL_SDAYNAME1 =  H7                    
public const int CAL_SDAYNAME2 =  H8                    
public const int CAL_SDAYNAME3 =  H9                    
public const int CAL_SDAYNAME4 =  HA                    
public const int CAL_SDAYNAME5 =  HB                    
public const int CAL_SDAYNAME6 =  HC                    
public const int CAL_SDAYNAME7 =  HD                    
public const int CAL_SABBREVDAYNAME1 =  HE              
public const int CAL_SABBREVDAYNAME2 =  HF              
public const int CAL_SABBREVDAYNAME3 =  H10             
public const int CAL_SABBREVDAYNAME4 =  H11             
public const int CAL_SABBREVDAYNAME5 =  H12             
public const int CAL_SABBREVDAYNAME6 =  H13             
public const int CAL_SABBREVDAYNAME7 =  H14             
public const int CAL_SMONTHNAME1 =  H15                 
public const int CAL_SMONTHNAME2 =  H16                 
public const int CAL_SMONTHNAME3 =  H17                 
public const int CAL_SMONTHNAME4 =  H18                 
public const int CAL_SMONTHNAME5 =  H19                 
public const int CAL_SMONTHNAME6 =  H1A                 
public const int CAL_SMONTHNAME7 =  H1B                 
public const int CAL_SMONTHNAME8 =  H1C                 
public const int CAL_SMONTHNAME9 =  H1D                 
public const int CAL_SMONTHNAME10 =  H1E                
public const int CAL_SMONTHNAME11 =  H1F                
public const int CAL_SMONTHNAME12 =  H20                
public const int CAL_SMONTHNAME13 =  H21                
public const int CAL_SABBREVMONTHNAME1 =  H22           
public const int CAL_SABBREVMONTHNAME2 =  H23           
public const int CAL_SABBREVMONTHNAME3 =  H24           
public const int CAL_SABBREVMONTHNAME4 =  H25           
public const int CAL_SABBREVMONTHNAME5 =  H26           
public const int CAL_SABBREVMONTHNAME6 =  H27           
public const int CAL_SABBREVMONTHNAME7 =  H28           
public const int CAL_SABBREVMONTHNAME8 =  H29           
public const int CAL_SABBREVMONTHNAME9 =  H2A           
public const int CAL_SABBREVMONTHNAME10 =  H2B          
public const int CAL_SABBREVMONTHNAME11 =  H2C          
public const int CAL_SABBREVMONTHNAME12 =  H2D          
public const int CAL_SABBREVMONTHNAME13 =  H2E        
public const int ENUM_ALL_CALENDARS =  HFFFF     
public const int CAL_GREGORIAN = 1               
public const int CAL_GREGORIAN_US = 2            
public const int CAL_JAPAN = 3                   
public const int CAL_TAIWAN = 4                  
public const int CAL_KOREA = 5                 
public const int RIGHT_ALT_PRESSED =  H1     
public const int LEFT_ALT_PRESSED =  H2    
public const int RIGHT_CTRL_PRESSED =  H4   
public const int LEFT_CTRL_PRESSED =  H8  
public const int SHIFT_PRESSED =  H10   
public const int NUMLOCK_ON =  H20   
public const int SCROLLLOCK_ON =  H40   
public const int CAPSLOCK_ON =  H80   
public const int ENHANCED_KEY =  H100 
public const int FROM_LEFT_1ST_BUTTON_PRESSED =  H1
public const int RIGHTMOST_BUTTON_PRESSED =  H2
public const int FROM_LEFT_2ND_BUTTON_PRESSED =  H4
public const int FROM_LEFT_3RD_BUTTON_PRESSED =  H8
public const int FROM_LEFT_4TH_BUTTON_PRESSED =  H10
public const int MOUSE_MOVED =  H1
public const int DOUBLE_CLICK =  H2
public const int KEY_EVENT =  H1     //  Event contains key event record
public const int mouse_eventC =  H2     //  Event contains mouse event record
public const int WINDOW_BUFFER_SIZE_EVENT =  H4     //  Event contains window change event record
public const int MENU_EVENT =  H8     //  Event contains menu event record
public const int FOCUS_EVENT =  H10    //  event contains focus change
public const int FOREGROUND_BLUE =  H1     
public const int FOREGROUND_GREEN =  H2    
public const int FOREGROUND_RED =  H4    
public const int FOREGROUND_INTENSITY =  H8    
public const int BACKGROUND_BLUE =  H10    
public const int BACKGROUND_GREEN =  H20   
public const int BACKGROUND_RED =  H40   
public const int BACKGROUND_INTENSITY =  H80    
public const int CTRL_C_EVENT = 0
public const int CTRL_BREAK_EVENT = 1
public const int CTRL_CLOSE_EVENT = 2
public const int CTRL_LOGOFF_EVENT = 5
public const int CTRL_SHUTDOWN_EVENT = 6
public const int ENABLE_PROCESSED_INPUT =  H1
public const int ENABLE_LINE_INPUT =  H2
public const int ENABLE_ECHO_INPUT =  H4
public const int ENABLE_WINDOW_INPUT =  H8
public const int ENABLE_MOUSE_INPUT =  H10
public const int ENABLE_PROCESSED_OUTPUT =  H1
public const int ENABLE_WRAP_AT_EOL_OUTPUT =  H2
public const int CONSOLE_TEXTMODE_BUFFER = 1
public const int R2_BLACK = 1       //   0
public const int R2_NOTMERGEPEN = 2 //  DPon
public const int R2_MASKNOTPEN = 3  //  DPna
public const int R2_NOTCOPYPEN = 4  //  PN
public const int R2_MASKPENNOT = 5  //  PDna
public const int R2_NOT = 6 //  Dn
public const int R2_XORPEN = 7      //  DPx
public const int R2_NOTMASKPEN = 8  //  DPan
public const int R2_MASKPEN = 9     //  DPa
public const int R2_NOTXORPEN = 10  //  DPxn
public const int R2_NOP = 11        //  D
public const int R2_MERGENOTPEN = 12        //  DPno
public const int R2_COPYPEN = 13    //  P
public const int R2_MERGEPENNOT = 14        //  PDno
public const int R2_MERGEPEN = 15   //  DPo
public const int R2_WHITE = 16      //   1
public const int R2_LAST = 16
public const int SRCCOPY =  HCC0020 // (DWORD) dest = source
public const int SRCPAINT =  HEE0086        // (DWORD) dest = source OR dest
public const int SRCAND =  H8800C6  // (DWORD) dest = source AND dest
public const int SRCINVERT =  H660046       // (DWORD) dest = source XOR dest
public const int SRCERASE =  H440328        // (DWORD) dest = source AND (NOT dest )
public const int NOTSRCCOPY =  H330008      // (DWORD) dest = (NOT source)
public const int NOTSRCERASE =  H1100A6     // (DWORD) dest = (NOT src) AND (NOT dest)
public const int MERGECOPY =  HC000CA       // (DWORD) dest = (source AND pattern)
public const int MERGEPAINT =  HBB0226      // (DWORD) dest = (NOT source) OR dest
public const int PATCOPY =  HF00021 // (DWORD) dest = pattern
public const int PATPAINT =  HFB0A09        // (DWORD) dest = DPSnoo
public const int PATINVERT =  H5A0049       // (DWORD) dest = pattern XOR dest
public const int DSTINVERT =  H550009       // (DWORD) dest = (NOT dest)
public const int BLACKNESS =  H42 // (DWORD) dest = BLACK
public const int WHITENESS =  HFF0062       // (DWORD) dest = WHITE
public const int GDI_ERROR =  HFFFF
public const int HGDI_ERROR =  HFFFF
public const int ERRORAPI = 0
public const int NULLREGION = 1
public const int SIMPLEREGION = 2
public const int COMPLEXREGION = 3
public const int RGN_AND = 1
public const int RGN_OR = 2
public const int RGN_XOR = 3
public const int RGN_DIFF = 4
public const int RGN_COPY = 5
public const int RGN_MIN = RGN_AND
public const int RGN_MAX = RGN_COPY
public const int BLACKONWHITE = 1
public const int WHITEONBLACK = 2
public const int COLORONCOLOR = 3
public const int HALFTONE = 4
public const int MAXSTRETCHBLTMODE = 4
public const int ALTERNATE = 1
public const int WINDING = 2
public const int POLYFILL_LAST = 2
public const int TA_NOUPDATECP = 0
public const int TA_UPDATECP = 1
public const int TA_LEFT = 0
public const int TA_RIGHT = 2
public const int TA_CENTER = 6
public const int TA_TOP = 0
public const int TA_BOTTOM = 8
public const int TA_BASELINE = 24
public const int TA_MASK = (TA_BASELINE + TA_CENTER + TA_UPDATECP)
public const int VTA_BASELINE = TA_BASELINE
public const int VTA_LEFT = TA_BOTTOM
public const int VTA_RIGHT = TA_TOP
public const int VTA_CENTER = TA_CENTER
public const int VTA_BOTTOM = TA_RIGHT
public const int VTA_TOP = TA_LEFT
public const int ETO_GRAYED = 1
public const int ETO_OPAQUE = 2
public const int ETO_CLIPPED = 4
public const int ASPECT_FILTERING =  H1
public const int DCB_RESET =  H1
public const int DCB_ACCUMULATE =  H2
public const int DCB_DIRTY = DCB_ACCUMULATE
public const int DCB_SET = (DCB_RESET Or DCB_ACCUMULATE)
public const int DCB_ENABLE =  H4
public const int DCB_DISABLE =  H8
public const int META_SETBKCOLOR =  H201
public const int META_SETBKMODE =  H102
public const int META_SETMAPMODE =  H103
public const int META_SETROP2 =  H104
public const int META_SETRELABS =  H105
public const int META_SETPOLYFILLMODE =  H106
public const int META_SETSTRETCHBLTMODE =  H107
public const int META_SETTEXTCHAREXTRA =  H108
public const int META_SETTEXTCOLOR =  H209
public const int META_SETTEXTJUSTIFICATION =  H20A
public const int META_SETWINDOWORG =  H20B
public const int META_SETWINDOWEXT =  H20C
public const int META_SETVIEWPORTORG =  H20D
public const int META_SETVIEWPORTEXT =  H20E
public const int META_OFFSETWINDOWORG =  H20F
public const int META_SCALEWINDOWEXT =  H410
public const int META_OFFSETVIEWPORTORG =  H211
public const int META_SCALEVIEWPORTEXT =  H412
public const int META_LINETO =  H213
public const int META_MOVETO =  H214
public const int META_EXCLUDECLIPRECT =  H415
public const int META_INTERSECTCLIPRECT =  H416
public const int META_ARC =  H817
public const int META_ELLIPSE =  H418
public const int META_FLOODFILL =  H419
public const int META_PIE =  H81A
public const int META_RECTANGLE =  H41B
public const int META_ROUNDRECT =  H61C
public const int META_PATBLT =  H61D
public const int META_SAVEDC =  H1E
public const int META_SETPIXEL =  H41F
public const int META_OFFSETCLIPRGN =  H220
public const int META_TEXTOUT =  H521
public const int META_BITBLT =  H922
public const int META_STRETCHBLT =  HB23
public const int META_POLYGON =  H324
public const int META_POLYLINE =  H325
public const int META_ESCAPE =  H626
public const int META_RESTOREDC =  H127
public const int META_FILLREGION =  H228
public const int META_FRAMEREGION =  H429
public const int META_INVERTREGION =  H12A
public const int META_PAINTREGION =  H12B
public const int META_SELECTCLIPREGION =  H12C
public const int META_SELECTOBJECT =  H12D
public const int META_SETTEXTALIGN =  H12E
public const int META_CHORD =  H830
public const int META_SETMAPPERFLAGS =  H231
public const int META_EXTTEXTOUT =  HA32
public const int META_SETDIBTODEV =  HD33
public const int META_SELECTPALETTE =  H234
public const int META_REALIZEPALETTE =  H35
public const int META_ANIMATEPALETTE =  H436
public const int META_SETPALENTRIES =  H37
public const int META_POLYPOLYGON =  H538
public const int META_RESIZEPALETTE =  H139
public const int META_DIBBITBLT =  H940
public const int META_DIBSTRETCHBLT =  HB41
public const int META_DIBCREATEPATTERNBRUSH =  H142
public const int META_STRETCHDIB =  HF43
public const int META_EXTFLOODFILL =  H548
public const int META_DELETEOBJECT =  H1F0
public const int META_CREATEPALETTE =  HF7
public const int META_CREATEPATTERNBRUSH =  H1F9
public const int META_CREATEPENINDIRECT =  H2FA
public const int META_CREATEFONTINDIRECT =  H2FB
public const int META_CREATEBRUSHINDIRECT =  H2FC
public const int META_CREATEREGION =  H6FF
public const int NEWFRAME = 1
public const int AbortDocC = 2
public const int NEXTBAND = 3
public const int SETCOLORTABLE = 4
public const int GETCOLORTABLE = 5
public const int FLUSHOUTPUT = 6
public const int DRAFTMODE = 7
public const int QUERYESCSUPPORT = 8
public const int SETABORTPROC = 9
public const int StartDocC = 10
public const int EndDocC = 11
public const int GETPHYSPAGESIZE = 12
public const int GETPRINTINGOFFSET = 13
public const int GETSCALINGFACTOR = 14
public const int MFCOMMENT = 15
public const int GETPENWIDTH = 16
public const int SETCOPYCOUNT = 17
public const int SELECTPAPERSOURCE = 18
public const int DEVICEDATA = 19
public const int PASSTHROUGH = 19
public const int GETTECHNOLGY = 20
public const int GETTECHNOLOGY = 20
public const int SETLINECAP = 21
public const int SETLINEJOIN = 22
public const int SetMiterLimitC = 23
public const int BANDINFO = 24
public const int DRAWPATTERNRECT = 25
public const int GETVECTORPENSIZE = 26
public const int GETVECTORBRUSHSIZE = 27
public const int ENABLEDUPLEX = 28
public const int GETSETPAPERBINS = 29
public const int GETSETPRINTORIENT = 30
public const int ENUMPAPERBINS = 31
public const int SETDIBSCALING = 32
public const int EPSPRINTING = 33
public const int ENUMPAPERMETRICS = 34
public const int GETSETPAPERMETRICS = 35
public const int POSTSCRIPT_DATA = 37
public const int POSTSCRIPT_IGNORE = 38
public const int MOUSETRAILS = 39
public const int GETDEVICEUNITS = 42
public const int GETEXTENDEDTEXTMETRICS = 256
public const int GETEXTENTTABLE = 257
public const int GETPAIRKERNTABLE = 258
public const int GETTRACKKERNTABLE = 259
public const int ExtTextOutC = 512
public const int GETFACENAME = 513
public const int DOWNLOADFACE = 514
public const int ENABLERELATIVEWIDTHS = 768
public const int ENABLEPAIRKERNING = 769
public const int SETKERNTRACK = 770
public const int SETALLJUSTVALUES = 771
public const int SETCHARSET = 772
public const int StretchBltC = 2048
public const int GETSETSCREENPARAMS = 3072
public const int BEGIN_PATH = 4096
public const int CLIP_TO_PATH = 4097
public const int END_PATH = 4098
public const int EXT_DEVICE_CAPS = 4099
public const int RESTORE_CTM = 4100
public const int SAVE_CTM = 4101
public const int SET_ARC_DIRECTION = 4102
public const int SET_BACKGROUND_COLOR = 4103
public const int SET_POLY_MODE = 4104
public const int SET_SCREEN_ANGLE = 4105
public const int SET_SPREAD = 4106
public const int TRANSFORM_CTM = 4107
public const int SET_CLIP_BOX = 4108
public const int SET_BOUNDS = 4109
public const int SET_MIRROR_MODE = 4110
public const int OPENCHANNEL = 4110
public const int DOWNLOADHEADER = 4111
public const int CLOSECHANNEL = 4112
public const int POSTSCRIPT_PASSTHROUGH = 4115
public const int ENCAPSULATED_POSTSCRIPT = 4116
public const int SP_NOTREPORTED =  H4000
public const int SP_ERROR = (-1)
public const int SP_APPABORT = (-2)
public const int SP_USERABORT = (-3)
public const int SP_OUTOFDISK = (-4)
public const int SP_OUTOFMEMORY = (-5)
public const int PR_JOBSTATUS =  H0
public const int OBJ_PEN = 1
public const int OBJ_BRUSH = 2
public const int OBJ_DC = 3
public const int OBJ_METADC = 4
public const int OBJ_PAL = 5
public const int OBJ_FONT = 6
public const int OBJ_BITMAP = 7
public const int OBJ_REGION = 8
public const int OBJ_METAFILE = 9
public const int OBJ_MEMDC = 10
public const int OBJ_EXTPEN = 11
public const int OBJ_ENHMETADC = 12
public const int OBJ_ENHMETAFILE = 13
public const int MWT_IDENTITY = 1
public const int MWT_LEFTMULTIPLY = 2
public const int MWT_RIGHTMULTIPLY = 3
public const int MWT_MIN = MWT_IDENTITY
public const int MWT_MAX = MWT_RIGHTMULTIPLY
public const int BI_RGB = 0 
public const int BI_RLE8 = 1 
public const int BI_RLE4 = 2 
public const int BI_bitfields = 3 
public const int NTM_REGULAR =  H40 
public const int NTM_BOLD =  H20 
public const int NTM_ITALIC =  H1 
public const int TMPF_FIXED_PITCH =  H1
public const int TMPF_VECTOR =  H2
public const int TMPF_DEVICE =  H8
public const int TMPF_TRUETYPE =  H4
public const int OUT_DEFAULT_PRECIS = 0
public const int OUT_STRING_PRECIS = 1
public const int OUT_CHARACTER_PRECIS = 2
public const int OUT_STROKE_PRECIS = 3
public const int OUT_TT_PRECIS = 4
public const int OUT_DEVICE_PRECIS = 5
public const int OUT_RASTER_PRECIS = 6
public const int OUT_TT_ONLY_PRECIS = 7
public const int OUT_OUTLINE_PRECIS = 8
public const int CLIP_DEFAULT_PRECIS = 0
public const int CLIP_CHARACTER_PRECIS = 1
public const int CLIP_STROKE_PRECIS = 2
public const int CLIP_MASK =  HF
public const int CLIP_LH_ANGLES = 16
public const int CLIP_TT_ALWAYS = 32
public const int CLIP_EMBEDDED = 128
public const int DEFAULT_QUALITY = 0
public const int DRAFT_QUALITY = 1
public const int PROOF_QUALITY = 2
public const int DEFAULT_PITCH = 0
public const int FIXED_PITCH = 1
public const int VARIABLE_PITCH = 2
public const int ANSI_CHARSET = 0
public const int DEFAULT_CHARSET = 1
public const int SYMBOL_CHARSET = 2
public const int SHIFTJIS_CHARSET = 128
public const int HANGEUL_CHARSET = 129
public const int CHINESEBIG5_CHARSET = 136
public const int OEM_CHARSET = 255
public const int FW_DONTCARE = 0
public const int FW_THIN = 100
public const int FW_EXTRALIGHT = 200
public const int FW_LIGHT = 300
public const int FW_NORMAL = 400
public const int FW_MEDIUM = 500
public const int FW_SEMIBOLD = 600
public const int FW_BOLD = 700
public const int FW_EXTRABOLD = 800
public const int FW_HEAVY = 900
public const int FW_ULTRALIGHT = FW_EXTRALIGHT
public const int FW_REGULAR = FW_NORMAL
public const int FW_DEMIBOLD = FW_SEMIBOLD
public const int FW_ULTRABOLD = FW_EXTRABOLD
public const int FW_BLACK = FW_HEAVY
public const int PANOSE_COUNT = 10
public const int PAN_FAMILYTYPE_INDEX = 0
public const int PAN_SERIFSTYLE_INDEX = 1
public const int PAN_WEIGHT_INDEX = 2
public const int PAN_PROPORTION_INDEX = 3
public const int PAN_CONTRAST_INDEX = 4
public const int PAN_STROKEVARIATION_INDEX = 5
public const int PAN_ARMSTYLE_INDEX = 6
public const int PAN_LETTERFORM_INDEX = 7
public const int PAN_MIDLINE_INDEX = 8
public const int PAN_XHEIGHT_INDEX = 9
public const int PAN_CULTURE_LATIN = 0
public const int PAN_ANY = 0  //  Any
public const int PAN_NO_FIT = 1  //  No Fit
public const int PAN_FAMILY_TEXT_DISPLAY = 2  //  Text and Display
public const int PAN_FAMILY_SCRIPT = 3  //  Script
public const int PAN_FAMILY_DECORATIVE = 4  //  Decorative
public const int PAN_FAMILY_PICTORIAL = 5  //  Pictorial
public const int PAN_SERIF_COVE = 2  //  Cove
public const int PAN_SERIF_OBTUSE_COVE = 3  //  Obtuse Cove
public const int PAN_SERIF_SQUARE_COVE = 4  //  Square Cove
public const int PAN_SERIF_OBTUSE_SQUARE_COVE = 5  //  Obtuse Square Cove
public const int PAN_SERIF_SQUARE = 6  //  Square
public const int PAN_SERIF_THIN = 7  //  Thin
public const int PAN_SERIF_BONE = 8  //  Bone
public const int PAN_SERIF_EXAGGERATED = 9  //  Exaggerated
public const int PAN_SERIF_TRIANGLE = 10  //  Triangle
public const int PAN_SERIF_NORMAL_SANS = 11  //  Normal Sans
public const int PAN_SERIF_OBTUSE_SANS = 12  //  Obtuse Sans
public const int PAN_SERIF_PERP_SANS = 13  //  Prep Sans
public const int PAN_SERIF_FLARED = 14  //  Flared
public const int PAN_SERIF_ROUNDED = 15  //  Rounded
public const int PAN_WEIGHT_VERY_LIGHT = 2  //  Very Light
public const int PAN_WEIGHT_LIGHT = 3  //  Light
public const int PAN_WEIGHT_THIN = 4  //  Thin
public const int PAN_WEIGHT_BOOK = 5  //  Book
public const int PAN_WEIGHT_MEDIUM = 6  //  Medium
public const int PAN_WEIGHT_DEMI = 7  //  Demi
public const int PAN_WEIGHT_BOLD = 8  //  Bold
public const int PAN_WEIGHT_HEAVY = 9  //  Heavy
public const int PAN_WEIGHT_BLACK = 10  //  Black
public const int PAN_WEIGHT_NORD = 11  //  Nord
public const int PAN_PROP_OLD_STYLE = 2  //  Old Style
public const int PAN_PROP_MODERN = 3  //  Modern
public const int PAN_PROP_EVEN_WIDTH = 4  //  Even Width
public const int PAN_PROP_EXPANDED = 5  //  Expanded
public const int PAN_PROP_CONDENSED = 6  //  Condensed
public const int PAN_PROP_VERY_EXPANDED = 7  //  Very Expanded
public const int PAN_PROP_VERY_CONDENSED = 8  //  Very Condensed
public const int PAN_PROP_MONOSPACED = 9  //  Monospaced
public const int PAN_CONTRAST_NONE = 2  //  None
public const int PAN_CONTRAST_VERY_LOW = 3  //  Very Low
public const int PAN_CONTRAST_LOW = 4  //  Low
public const int PAN_CONTRAST_MEDIUM_LOW = 5  //  Medium Low
public const int PAN_CONTRAST_MEDIUM = 6  //  Medium
public const int PAN_CONTRAST_MEDIUM_HIGH = 7  //  Mediim High
public const int PAN_CONTRAST_HIGH = 8  //  High
public const int PAN_CONTRAST_VERY_HIGH = 9  //  Very High
public const int PAN_STROKE_GRADUAL_DIAG = 2  //  Gradual/Diagonal
public const int PAN_STROKE_GRADUAL_TRAN = 3  //  Gradual/Transitional
public const int PAN_STROKE_GRADUAL_VERT = 4  //  Gradual/Vertical
public const int PAN_STROKE_GRADUAL_HORZ = 5  //  Gradual/Horizontal
public const int PAN_STROKE_RAPID_VERT = 6  //  Rapid/Vertical
public const int PAN_STROKE_RAPID_HORZ = 7  //  Rapid/Horizontal
public const int PAN_STROKE_INSTANT_VERT = 8  //  Instant/Vertical
public const int PAN_STRAIGHT_ARMS_HORZ = 2  //  Straight Arms/Horizontal
public const int PAN_STRAIGHT_ARMS_WEDGE = 3  //  Straight Arms/Wedge
public const int PAN_STRAIGHT_ARMS_VERT = 4  //  Straight Arms/Vertical
public const int PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5 //  Straight Arms/Single-Serif
public const int PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6 //  Straight Arms/Double-Serif
public const int PAN_BENT_ARMS_HORZ = 7  //  Non-Straight Arms/Horizontal
public const int PAN_BENT_ARMS_WEDGE = 8  //  Non-Straight Arms/Wedge
public const int PAN_BENT_ARMS_VERT = 9  //  Non-Straight Arms/Vertical
public const int PAN_BENT_ARMS_SINGLE_SERIF = 10  //  Non-Straight Arms/Single-Serif
public const int PAN_BENT_ARMS_DOUBLE_SERIF = 11  //  Non-Straight Arms/Double-Serif
public const int PAN_LETT_NORMAL_CONTACT = 2  //  Normal/Contact
public const int PAN_LETT_NORMAL_WEIGHTED = 3  //  Normal/Weighted
public const int PAN_LETT_NORMAL_BOXED = 4  //  Normal/Boxed
public const int PAN_LETT_NORMAL_FLATTENED = 5  //  Normal/Flattened
public const int PAN_LETT_NORMAL_ROUNDED = 6  //  Normal/Rounded
public const int PAN_LETT_NORMAL_OFF_CENTER = 7  //  Normal/Off Center
public const int PAN_LETT_NORMAL_SQUARE = 8  //  Normal/Square
public const int PAN_LETT_OBLIQUE_CONTACT = 9  //  Oblique/Contact
public const int PAN_LETT_OBLIQUE_WEIGHTED = 10  //  Oblique/Weighted
public const int PAN_LETT_OBLIQUE_BOXED = 11  //  Oblique/Boxed
public const int PAN_LETT_OBLIQUE_FLATTENED = 12  //  Oblique/Flattened
public const int PAN_LETT_OBLIQUE_ROUNDED = 13  //  Oblique/Rounded
public const int PAN_LETT_OBLIQUE_OFF_CENTER = 14  //  Oblique/Off Center
public const int PAN_LETT_OBLIQUE_SQUARE = 15  //  Oblique/Square
public const int PAN_MIDLINE_STANDARD_TRIMMED = 2  //  Standard/Trimmed
public const int PAN_MIDLINE_STANDARD_POINTED = 3  //  Standard/Pointed
public const int PAN_MIDLINE_STANDARD_SERIFED = 4  //  Standard/Serifed
public const int PAN_MIDLINE_HIGH_TRIMMED = 5  //  High/Trimmed
public const int PAN_MIDLINE_HIGH_POINTED = 6  //  High/Pointed
public const int PAN_MIDLINE_HIGH_SERIFED = 7  //  High/Serifed
public const int PAN_MIDLINE_public const intANT_TRIMMED = 8  //  public const intant/Trimmed
public const int PAN_MIDLINE_public const intANT_POINTED = 9  //  public const intant/Pointed
public const int PAN_MIDLINE_public const intANT_SERIFED = 10  //  public const intant/Serifed
public const int PAN_MIDLINE_LOW_TRIMMED = 11  //  Low/Trimmed
public const int PAN_MIDLINE_LOW_POINTED = 12  //  Low/Pointed
public const int PAN_MIDLINE_LOW_SERIFED = 13  //  Low/Serifed
public const int PAN_XHEIGHT_public const intANT_SMALL = 2  //  public const intant/Small
public const int PAN_XHEIGHT_public const intANT_STD = 3  //  public const intant/Standard
public const int PAN_XHEIGHT_public const intANT_LARGE = 4  //  public const intant/Large
public const int PAN_XHEIGHT_DUCKING_SMALL = 5  //  Ducking/Small
public const int PAN_XHEIGHT_DUCKING_STD = 6  //  Ducking/Standard
public const int PAN_XHEIGHT_DUCKING_LARGE = 7  //  Ducking/Large
public const int ELF_VENDOR_SIZE = 4
public const int ELF_VERSION = 0
public const int ELF_CULTURE_LATIN = 0
public const int RASTER_FONTTYPE =  H1
public const int DEVICE_FONTTYPE =  H2
public const int TRUETYPE_FONTTYPE =  H4
public const int PC_RESERVED =  H1  //  palette index used for animation
public const int PC_EXPLICIT =  H2  //  palette index is explicit to device
public const int PC_NOCOLLAPSE =  H4        //  do not match color to system palette
public const int TRANSPARENT = 1
public const int OPAQUE = 2
public const int BKMODE_LAST = 2
public const int GM_COMPATIBLE = 1
public const int GM_ADVANCED = 2
public const int GM_LAST = 2
public const int PT_CLOSEFIGURE =  H1
public const int PT_LINETO =  H2
public const int PT_BEZIERTO =  H4
public const int PT_MOVETO =  H6
public const int MM_TEXT = 1
public const int MM_LOMETRIC = 2
public const int MM_HIMETRIC = 3
public const int MM_LOENGLISH = 4
public const int MM_HIENGLISH = 5
public const int MM_TWIPS = 6
public const int MM_ISOTROPIC = 7
public const int MM_ANISOTROPIC = 8
public const int MM_MIN = MM_TEXT
public const int MM_MAX = MM_ANISOTROPIC
public const int MM_MAX_FIXEDSCALE = MM_TWIPS
public const int ABSOLUTE = 1
public const int RELATIVE = 2
public const int WHITE_BRUSH = 0
public const int LTGRAY_BRUSH = 1
public const int GRAY_BRUSH = 2
public const int DKGRAY_BRUSH = 3
public const int BLACK_BRUSH = 4
public const int NULL_BRUSH = 5
public const int HOLLOW_BRUSH = NULL_BRUSH
public const int WHITE_PEN = 6
public const int BLACK_PEN = 7
public const int NULL_PEN = 8
public const int OEM_FIXED_FONT = 10
public const int ANSI_FIXED_FONT = 11
public const int ANSI_VAR_FONT = 12
public const int SYSTEM_FONT = 13
public const int DEVICE_DEFAULT_FONT = 14
public const int DEFAULT_PALETTE = 15
public const int SYSTEM_FIXED_FONT = 16
public const int STOCK_LAST = 16
public const int CLR_INVALID =  HFFFF
public const int BS_SOLID = 0
public const int BS_NULL = 1
public const int BS_HOLLOW = BS_NULL
public const int BS_HATCHED = 2
public const int BS_PATTERN = 3
public const int BS_INDEXED = 4
public const int BS_DIBPATTERN = 5
public const int BS_DIBPATTERNPT = 6
public const int BS_PATTERN8X8 = 7
public const int BS_DIBPATTERN8X8 = 8
public const int HS_HORIZONTAL = 0              //  -----
public const int HS_VERTICAL = 1                //  |||||
public const int HS_FDIAGONAL = 2               //  \\\\\
public const int HS_BDIAGONAL = 3               //  /////
public const int HS_CROSS = 4                   //  +++++
public const int HS_DIAGCROSS = 5               //  xxxxx
public const int HS_FDIAGONAL1 = 6
public const int HS_BDIAGONAL1 = 7
public const int HS_SOLID = 8
public const int HS_DENSE1 = 9
public const int HS_DENSE2 = 10
public const int HS_DENSE3 = 11
public const int HS_DENSE4 = 12
public const int HS_DENSE5 = 13
public const int HS_DENSE6 = 14
public const int HS_DENSE7 = 15
public const int HS_DENSE8 = 16
public const int HS_NOSHADE = 17
public const int HS_HALFTONE = 18
public const int HS_SOLIDCLR = 19
public const int HS_DITHEREDCLR = 20
public const int HS_SOLIDTEXTCLR = 21
public const int HS_DITHEREDTEXTCLR = 22
public const int HS_SOLIDBKCLR = 23
public const int HS_DITHEREDBKCLR = 24
public const int HS_API_MAX = 25
public const int PS_SOLID = 0
public const int PS_DASH = 1                    //  -------
public const int PS_DOT = 2                     //  .......
public const int PS_DASHDOT = 3                 //  _._._._
public const int PS_DASHDOTDOT = 4              //  _.._.._
public const int PS_NULL = 5
public const int PS_INSIDEFRAME = 6
public const int PS_USERSTYLE = 7
public const int PS_ALTERNATE = 8
public const int PS_STYLE_MASK =  HF
public const int PS_ENDCAP_ROUND =  H0
public const int PS_ENDCAP_SQUARE =  H100
public const int PS_ENDCAP_FLAT =  H200
public const int PS_ENDCAP_MASK =  HF00
public const int PS_JOIN_ROUND =  H0
public const int PS_JOIN_BEVEL =  H1000
public const int PS_JOIN_MITER =  H2000
public const int PS_JOIN_MASK =  HF000
public const int PS_COSMETIC =  H0
public const int PS_GEOMETRIC =  H10000
public const int PS_TYPE_MASK =  HF0000
public const int AD_COUNTERCLOCKWISE = 1
public const int AD_CLOCKWISE = 2
public const int DRIVERVERSION = 0      //  Device driver version
public const int TECHNOLOGY = 2         //  Device classification
public const int HORZSIZE = 4           //  Horizontal size in millimeters
public const int VERTSIZE = 6           //  Vertical size in millimeters
public const int HORZRES = 8            //  Horizontal width in pixels
public const int VERTRES = 10           //  Vertical width in pixels
public const int BITSPIXEL = 12         //  Number of bits per pixel
public const int PLANES = 14            //  Number of planes
public const int NUMBRUSHES = 16        //  Number of brushes the device has
public const int NUMPENS = 18           //  Number of pens the device has
public const int NUMMARKERS = 20        //  Number of markers the device has
public const int NUMFONTS = 22          //  Number of fonts the device has
public const int NUMCOLORS = 24         //  Number of colors the device supports
public const int PDEVICESIZE = 26       //  Size required for device descriptor
public const int CURVECAPS = 28         //  Curve capabilities
public const int LINECAPS = 30          //  Line capabilities
public const int POLYGONALCAPS = 32     //  Polygonal capabilities
public const int TEXTCAPS = 34          //  Text capabilities
public const int CLIPCAPS = 36          //  Clipping capabilities
public const int RASTERCAPS = 38        //  Bitblt capabilities
public const int ASPECTX = 40           //  Length of the X leg
public const int ASPECTY = 42           //  Length of the Y leg
public const int ASPECTXY = 44          //  Length of the hypotenuse

public const int LOGPIXELSX = 88        //  Logical pixels/inch in X
public const int LOGPIXELSY = 90        //  Logical pixels/inch in Y

public const int SIZEPALETTE = 104      //  Number of entries in physical palette
public const int NUMRESERVED = 106      //  Number of reserved entries in palette
public const int COLORRES = 108         //  Actual color resolution

//  Printing related DeviceCaps. These replace the appropriate Escapes
public const int PHYSICALWIDTH = 110 //  Physical Width in device units
public const int PHYSICALHEIGHT = 111 //  Physical Height in device units
public const int PHYSICALOFFSETX = 112 //  Physical Printable Area x margin
public const int PHYSICALOFFSETY = 113 //  Physical Printable Area y margin
public const int SCALINGFACTORX = 114 //  Scaling factor x
public const int SCALINGFACTORY = 115 //  Scaling factor y

//  Device Capability Masks:

//  Device Technologies
public const int DT_PLOTTER = 0             //  Vector plotter
public const int DT_RASDISPLAY = 1          //  Raster display
public const int DT_RASPRINTER = 2          //  Raster printer
public const int DT_RASCAMERA = 3           //  Raster camera
public const int DT_CHARSTREAM = 4          //  Character-stream, PLP
public const int DT_METAFILE = 5            //  Metafile, VDM
public const int DT_DISPFILE = 6            //  Display-file

//  Curve Capabilities
public const int CC_NONE = 0                //  Curves not supported
public const int CC_CIRCLES = 1             //  Can do circles
public const int CC_PIE = 2                 //  Can do pie wedges
public const int CC_CHORD = 4               //  Can do chord arcs
public const int CC_ELLIPSES = 8            //  Can do ellipese
public const int CC_WIDE = 16               //  Can do wide lines
public const int CC_STYLED = 32             //  Can do styled lines
public const int CC_WIDESTYLED = 64         //  Can do wide styled lines
public const int CC_INTERIORS = 128 //  Can do interiors
public const int CC_ROUNDRECT = 256 //

//  Line Capabilities
public const int LC_NONE = 0                //  Lines not supported
public const int LC_POLYLINE = 2            //  Can do polylines
public const int LC_MARKER = 4              //  Can do markers
public const int LC_POLYMARKER = 8          //  Can do polymarkers
public const int LC_WIDE = 16               //  Can do wide lines
public const int LC_STYLED = 32             //  Can do styled lines
public const int LC_WIDESTYLED = 64         //  Can do wide styled lines
public const int LC_INTERIORS = 128 //  Can do interiors

//  Polygonal Capabilities
public const int PC_NONE = 0                //  Polygonals not supported
public const int PC_POLYGON = 1             //  Can do polygons
public const int PC_RECTANGLE = 2           //  Can do rectangles
public const int PC_WINDPOLYGON = 4         //  Can do winding polygons
public const int PC_TRAPEZOID = 4           //  Can do trapezoids
public const int PC_SCANLINE = 8            //  Can do scanlines
public const int PC_WIDE = 16               //  Can do wide borders
public const int PC_STYLED = 32             //  Can do styled borders
public const int PC_WIDESTYLED = 64         //  Can do wide styled borders
public const int PC_INTERIORS = 128 //  Can do interiors

//  Polygonal Capabilities
public const int CP_NONE = 0                //  No clipping of output
public const int CP_RECTANGLE = 1           //  Output clipped to rects
public const int CP_REGION = 2              //

//  Text Capabilities
public const int TC_OP_CHARACTER =  H1              //  Can do OutputPrecision   CHARACTER
public const int TC_OP_STROKE =  H2                 //  Can do OutputPrecision   STROKE
public const int TC_CP_STROKE =  H4                 //  Can do ClipPrecision     STROKE
public const int TC_CR_90 =  H8                     //  Can do CharRotAbility    90
public const int TC_CR_ANY =  H10                   //  Can do CharRotAbility    ANY
public const int TC_SF_X_YINDEP =  H20              //  Can do ScaleFreedom      X_YINDEPENDENT
public const int TC_SA_DOUBLE =  H40                //  Can do ScaleAbility      DOUBLE
public const int TC_SA_INTEGER =  H80               //  Can do ScaleAbility      INTEGER
public const int TC_SA_CONTIN =  H100               //  Can do ScaleAbility      CONTINUOUS
public const int TC_EA_DOUBLE =  H200               //  Can do EmboldenAbility   DOUBLE
public const int TC_IA_ABLE =  H400                 //  Can do ItalisizeAbility  ABLE
public const int TC_UA_ABLE =  H800                 //  Can do UnderlineAbility  ABLE
public const int TC_SO_ABLE =  H1000                //  Can do StrikeOutAbility  ABLE
public const int TC_RA_ABLE =  H2000                //  Can do RasterFontAble    ABLE
public const int TC_VA_ABLE =  H4000                //  Can do VectorFontAble    ABLE
public const int TC_RESERVED =  H8000
public const int TC_SCROLLBLT =  H10000             //  do text scroll with blt

//  Raster Capabilities
public const int RC_NONE = 0
public const int RC_BITBLT = 1                  //  Can do standard BLT.
public const int RC_BANDING = 2                 //  Device requires banding support
public const int RC_SCALING = 4                 //  Device requires scaling support
public const int RC_BITMAP64 = 8                //  Device can support >64K bitmap
public const int RC_GDI20_OUTPUT =  H10             //  has 2.0 output calls
public const int RC_GDI20_STATE =  H20
public const int RC_SAVEBITMAP =  H40
public const int RC_DI_BITMAP =  H80                //  supports DIB to memory
public const int RC_PALETTE =  H100                 //  supports a palette
public const int RC_DIBTODEV =  H200                //  supports DIBitsToDevice
public const int RC_BIGFONT =  H400                 //  supports >64K fonts
public const int RC_STRETCHBLT =  H800              //  supports StretchBlt
public const int RC_FLOODFILL =  H1000              //  supports FloodFill
public const int RC_STRETCHDIB =  H2000             //  supports StretchDIBits
public const int RC_OP_DX_OUTPUT =  H4000
public const int RC_DEVBITS =  H8000

// DIB color table identifiers
public const int DIB_RGB_COLORS = 0 //  color table in RGBs
public const int DIB_PAL_COLORS = 1 //  color table in palette indices
public const int DIB_PAL_INDICES = 2 //  No color table indices into surf palette
public const int DIB_PAL_PHYSINDICES = 2 //  No color table indices into surf palette
public const int DIB_PAL_LOGINDICES = 4 //  No color table indices into DC palette

// public const intants for Get/SetSystemPaletteUse()
public const int SYSPAL_ERROR = 0
public const int SYSPAL_STATIC = 1
public const int SYSPAL_NOSTATIC = 2

// public const intants for CreateDIBitmap
public const int CBM_CREATEDIB =  H2      //  create DIB bitmap
public const int CBM_INIT =  H4           //  initialize bitmap

// ExtFloodFill style flags
public const int FLOODFILLBORDER = 0
public const int FLOODFILLSURFACE = 1

//  size of a device name string
public const int CCHDEVICENAME = 32

//  size of a form name string
public const int CCHFORMNAME = 32
public const int DM_SPECVERSION =  H320

// field selection bits
public const int DM_ORIENTATION =  H1 
public const int DM_PAPERSIZE =  H2 
public const int DM_PAPERLENGTH =  H4 
public const int DM_PAPERWIDTH =  H8 
public const int DM_SCALE =  H10 
public const int DM_COPIES =  H100 
public const int DM_DEFAULTSOURCE =  H200 
public const int DM_PRINTQUALITY =  H400 
public const int DM_COLOR =  H800 
public const int DM_DUPLEX =  H1000 
public const int DM_YRESOLUTION =  H2000 
public const int DM_TTOPTION =  H4000 
public const int DM_COLLATE =  H8000
public const int DM_FORMNAME =  H10000

//  orientation selections
public const int DMORIENT_PORTRAIT = 1
public const int DMORIENT_LANDSCAPE = 2

//  paper selections
public const int DMPAPER_LETTER = 1
public const int DMPAPER_FIRST = DMPAPER_LETTER
               //  Letter 8 1/2 x 11 in
public const int DMPAPER_LETTERSMALL = 2            //  Letter Small 8 1/2 x 11 in
public const int DMPAPER_TABLOID = 3                //  Tabloid 11 x 17 in
public const int DMPAPER_LEDGER = 4                 //  Ledger 17 x 11 in
public const int DMPAPER_LEGAL = 5                  //  Legal 8 1/2 x 14 in
public const int DMPAPER_STATEMENT = 6              //  Statement 5 1/2 x 8 1/2 in
public const int DMPAPER_EXECUTIVE = 7              //  Executive 7 1/4 x 10 1/2 in
public const int DMPAPER_A3 = 8                     //  A3 297 x 420 mm
public const int DMPAPER_A4 = 9                     //  A4 210 x 297 mm
public const int DMPAPER_A4SMALL = 10               //  A4 Small 210 x 297 mm
public const int DMPAPER_A5 = 11                    //  A5 148 x 210 mm
public const int DMPAPER_B4 = 12                    //  B4 250 x 354
public const int DMPAPER_B5 = 13                    //  B5 182 x 257 mm
public const int DMPAPER_FOLIO = 14                 //  Folio 8 1/2 x 13 in
public const int DMPAPER_QUARTO = 15                //  Quarto 215 x 275 mm
public const int DMPAPER_10X14 = 16                 //  10x14 in
public const int DMPAPER_11X17 = 17                 //  11x17 in
public const int DMPAPER_NOTE = 18                  //  Note 8 1/2 x 11 in
public const int DMPAPER_ENV_9 = 19                 //  Envelope #9 3 7/8 x 8 7/8
public const int DMPAPER_ENV_10 = 20                //  Envelope #10 4 1/8 x 9 1/2
public const int DMPAPER_ENV_11 = 21                //  Envelope #11 4 1/2 x 10 3/8
public const int DMPAPER_ENV_12 = 22                //  Envelope #12 4 \276 x 11
public const int DMPAPER_ENV_14 = 23                //  Envelope #14 5 x 11 1/2
public const int DMPAPER_CSHEET = 24                //  C size sheet
public const int DMPAPER_DSHEET = 25                //  D size sheet
public const int DMPAPER_ESHEET = 26                //  E size sheet
public const int DMPAPER_ENV_DL = 27                //  Envelope DL 110 x 220mm
public const int DMPAPER_ENV_C5 = 28                //  Envelope C5 162 x 229 mm
public const int DMPAPER_ENV_C3 = 29                //  Envelope C3  324 x 458 mm
public const int DMPAPER_ENV_C4 = 30                //  Envelope C4  229 x 324 mm
public const int DMPAPER_ENV_C6 = 31                //  Envelope C6  114 x 162 mm
public const int DMPAPER_ENV_C65 = 32               //  Envelope C65 114 x 229 mm
public const int DMPAPER_ENV_B4 = 33                //  Envelope B4  250 x 353 mm
public const int DMPAPER_ENV_B5 = 34                //  Envelope B5  176 x 250 mm
public const int DMPAPER_ENV_B6 = 35                //  Envelope B6  176 x 125 mm
public const int DMPAPER_ENV_ITALY = 36             //  Envelope 110 x 230 mm
public const int DMPAPER_ENV_MONARCH = 37           //  Envelope Monarch 3.875 x 7.5 in
public const int DMPAPER_ENV_PERSONAL = 38          //  6 3/4 Envelope 3 5/8 x 6 1/2 in
public const int DMPAPER_FANFOLD_US = 39            //  US Std Fanfold 14 7/8 x 11 in
public const int DMPAPER_FANFOLD_STD_GERMAN = 40    //  German Std Fanfold 8 1/2 x 12 in
public const int DMPAPER_FANFOLD_LGL_GERMAN = 41    //  German Legal Fanfold 8 1/2 x 13 in

public const int DMPAPER_LAST = DMPAPER_FANFOLD_LGL_GERMAN

public const int DMPAPER_USER = 256

//  bin selections
public const int DMBIN_UPPER = 1
public const int DMBIN_FIRST = DMBIN_UPPER

public const int DMBIN_ONLYONE = 1
public const int DMBIN_LOWER = 2
public const int DMBIN_MIDDLE = 3
public const int DMBIN_MANUAL = 4
public const int DMBIN_ENVELOPE = 5
public const int DMBIN_ENVMANUAL = 6
public const int DMBIN_AUTO = 7
public const int DMBIN_TRACTOR = 8
public const int DMBIN_SMALLFMT = 9
public const int DMBIN_LARGEFMT = 10
public const int DMBIN_LARGECAPACITY = 11
public const int DMBIN_CASSETTE = 14
public const int DMBIN_LAST = DMBIN_CASSETTE

public const int DMBIN_USER = 256               //  device specific bins start here

//  print qualities
public const int DMRES_DRAFT = (-1)
public const int DMRES_LOW = (-2)
public const int DMRES_MEDIUM = (-3)
public const int DMRES_HIGH = (-4)

//  color enable/disable for color printers
public const int DMCOLOR_MONOCHROME = 1
public const int DMCOLOR_COLOR = 2

//  duplex enable
public const int DMDUP_SIMPLEX = 1
public const int DMDUP_VERTICAL = 2
public const int DMDUP_HORIZONTAL = 3

//  TrueType options
public const int DMTT_BITMAP = 1            //  print TT fonts as graphics
public const int DMTT_DOWNLOAD = 2          //  download TT fonts as soft fonts
public const int DMTT_SUBDEV = 3            //  substitute device fonts for TT fonts

//  Collation selections
public const int DMCOLLATE_FALSE = 0
public const int DMCOLLATE_TRUE = 1

//  DEVMODE dmDisplayFlags flags

public const int DM_GRAYSCALE =  H1
public const int DM_INTERLACED =  H2

//  GetRegionData/ExtCreateRegion

public const int RDH_RECTANGLES = 1
public const int GGO_METRICS = 0
public const int GGO_BITMAP = 1
public const int GGO_NATIVE = 2
public const int TT_POLYGON_TYPE = 24

public const int TT_PRIM_LINE = 1
public const int TT_PRIM_QSPLINE = 2

public const int TT_AVAILABLE =  H1
public const int TT_ENABLED =  H2
public const int DM_UPDATE = 1
public const int DM_COPY = 2
public const int DM_PROMPT = 4
public const int DM_MODIFY = 8

public const int DM_IN_BUFFER = DM_MODIFY
public const int DM_IN_PROMPT = DM_PROMPT
public const int DM_OUT_BUFFER = DM_COPY
public const int DM_OUT_DEFAULT = DM_UPDATE

//  device capabilities indices
public const int DC_FIELDS = 1
public const int DC_PAPERS = 2
public const int DC_PAPERSIZE = 3
public const int DC_MINEXTENT = 4
public const int DC_MAXEXTENT = 5
public const int DC_BINS = 6
public const int DC_DUPLEX = 7
public const int DC_SIZE = 8
public const int DC_EXTRA = 9
public const int DC_VERSION = 10
public const int DC_DRIVER = 11
public const int DC_BINNAMES = 12
public const int DC_ENUMRESOLUTIONS = 13
public const int DC_FILEDEPENDENCIES = 14
public const int DC_TRUETYPE = 15
public const int DC_PAPERNAMES = 16
public const int DC_ORIENTATION = 17
public const int DC_COPIES = 18
public const int DCTT_BITMAP =  H1 
public const int DCTT_DOWNLOAD =  H2 
public const int DCTT_SUBDEV =  H4 
public const int CA_NEGATIVE =  H1
public const int CA_LOG_FILTER =  H2
public const int ILLUMINANT_DEVICE_DEFAULT = 0
public const int ILLUMINANT_A = 1
public const int ILLUMINANT_B = 2
public const int ILLUMINANT_C = 3
public const int ILLUMINANT_D50 = 4
public const int ILLUMINANT_D55 = 5
public const int ILLUMINANT_D65 = 6
public const int ILLUMINANT_D75 = 7
public const int ILLUMINANT_F2 = 8
public const int ILLUMINANT_MAX_INDEX = ILLUMINANT_F2
public const int ILLUMINANT_TUNGSTEN = ILLUMINANT_A
public const int ILLUMINANT_DAYLIGHT = ILLUMINANT_C
public const int ILLUMINANT_FLUORESCENT = ILLUMINANT_F2
public const int ILLUMINANT_NTSC = ILLUMINANT_C
public const int RGB_GAMMA_MAX = 65000

//  Min and max for ReferenceBlack and ReferenceWhite
public const int REFERENCE_WHITE_MIN = 6000 //words
public const int REFERENCE_WHITE_MAX = 10000
public const int REFERENCE_BLACK_MIN = 0
public const int REFERENCE_BLACK_MAX = 4000

//  Min and max for Contrast, Brightness, Colorfulness, RedGreenTint
public const int COLOR_ADJ_MIN = -100 //shorts
public const int COLOR_ADJ_MAX = 100

public const int ENHMETA_SIGNATURE =  H464D4520
public const int EMR_HEADER = 1
public const int EMR_POLYBEZIER = 2
public const int EMR_POLYGON = 3
public const int EMR_POLYLINE = 4
public const int EMR_POLYBEZIERTO = 5
public const int EMR_POLYLINETO = 6
public const int EMR_POLYPOLYLINE = 7
public const int EMR_POLYPOLYGON = 8
public const int EMR_SETWINDOWEXTEX = 9
public const int EMR_SETWINDOWORGEX = 10
public const int EMR_SETVIEWPORTEXTEX = 11
public const int EMR_SETVIEWPORTORGEX = 12
public const int EMR_SETBRUSHORGEX = 13
public const int EMR_EOF = 14
public const int EMR_SETPIXELV = 15
public const int EMR_SETMAPPERFLAGS = 16
public const int EMR_SETMAPMODE = 17
public const int EMR_SETBKMODE = 18
public const int EMR_SETPOLYFILLMODE = 19
public const int EMR_SETROP2 = 20
public const int EMR_SETSTRETCHBLTMODE = 21
public const int EMR_SETTEXTALIGN = 22
public const int EMR_SETCOLORADJUSTMENT = 23
public const int EMR_SETTEXTCOLOR = 24
public const int EMR_SETBKCOLOR = 25
public const int EMR_OFFSETCLIPRGN = 26
public const int EMR_MOVETOEX = 27
public const int EMR_SETMETARGN = 28
public const int EMR_EXCLUDECLIPRECT = 29
public const int EMR_INTERSECTCLIPRECT = 30
public const int EMR_SCALEVIEWPORTEXTEX = 31
public const int EMR_SCALEWINDOWEXTEX = 32
public const int EMR_SAVEDC = 33
public const int EMR_RESTOREDC = 34
public const int EMR_SETWORLDTRANSFORM = 35
public const int EMR_MODIFYWORLDTRANSFORM = 36
public const int EMR_SELECTOBJECT = 37
public const int EMR_CREATEPEN = 38
public const int EMR_CREATEBRUSHINDIRECT = 39
public const int EMR_DELETEOBJECT = 40
public const int EMR_ANGLEARC = 41
public const int EMR_ELLIPSE = 42
public const int EMR_RECTANGLE = 43
public const int EMR_ROUNDRECT = 44
public const int EMR_ARC = 45
public const int EMR_CHORD = 46
public const int EMR_PIE = 47
public const int EMR_SELECTPALETTE = 48
public const int EMR_CREATEPALETTE = 49
public const int EMR_SETPALETTEENTRIES = 50
public const int EMR_RESIZEPALETTE = 51
public const int EMR_REALIZEPALETTE = 52
public const int EMR_EXTFLOODFILL = 53
public const int EMR_LINETO = 54
public const int EMR_ARCTO = 55
public const int EMR_POLYDRAW = 56
public const int EMR_SETARCDIRECTION = 57
public const int EMR_SETMITERLIMIT = 58
public const int EMR_BEGINPATH = 59
public const int EMR_ENDPATH = 60
public const int EMR_CLOSEFIGURE = 61
public const int EMR_FILLPATH = 62
public const int EMR_STROKEANDFILLPATH = 63
public const int EMR_STROKEPATH = 64
public const int EMR_FLATTENPATH = 65
public const int EMR_WIDENPATH = 66
public const int EMR_SELECTCLIPPATH = 67
public const int EMR_ABORTPATH = 68

public const int EMR_GDICOMMENT = 70
public const int EMR_FILLRGN = 71
public const int EMR_FRAMERGN = 72
public const int EMR_INVERTRGN = 73
public const int EMR_PAINTRGN = 74
public const int EMR_EXTSELECTCLIPRGN = 75
public const int EMR_BITBLT = 76
public const int EMR_STRETCHBLT = 77
public const int EMR_MASKBLT = 78
public const int EMR_PLGBLT = 79
public const int EMR_SETDIBITSTODEVICE = 80
public const int EMR_STRETCHDIBITS = 81
public const int EMR_EXTCREATEFONTINDIRECTW = 82
public const int EMR_EXTTEXTOUTA = 83
public const int EMR_EXTTEXTOUTW = 84
public const int EMR_POLYBEZIER16 = 85
public const int EMR_POLYGON16 = 86
public const int EMR_POLYLINE16 = 87
public const int EMR_POLYBEZIERTO16 = 88
public const int EMR_POLYLINETO16 = 89
public const int EMR_POLYPOLYLINE16 = 90
public const int EMR_POLYPOLYGON16 = 91
public const int EMR_POLYDRAW16 = 92
public const int EMR_CREATEMONOBRUSH = 93
public const int EMR_CREATEDIBPATTERNBRUSHPT = 94
public const int EMR_EXTCREATEPEN = 95
public const int EMR_POLYTEXTOUTA = 96
public const int EMR_POLYTEXTOUTW = 97
public const int EMR_MIN = 1
public const int EMR_MAX = 97
public const int STRETCH_ANDSCANS = 1
public const int STRETCH_ORSCANS = 2
public const int STRETCH_DELETESCANS = 3
public const int STRETCH_HALFTONE = 4
public const int MONO_FONT = 8
public const int JOHAB_CHARSET = 130
public const int HEBREW_CHARSET = 177
public const int ARABIC_CHARSET = 178
public const int GREEK_CHARSET = 161
public const int TURKISH_CHARSET = 162
public const int THAI_CHARSET = 222
public const int EASTEUROPE_CHARSET = 238
public const int RUSSIAN_CHARSET = 204
public const int MAC_CHARSET = 77
public const int BALTIC_CHARSET = 186
public const int FS_LATIN1 =  H1 
public const int FS_LATIN2 =  H2 
public const int FS_CYRILLIC =  H4 
public const int FS_GREEK =  H8 
public const int FS_TURKISH =  H10 
public const int FS_HEBREW =  H20 
public const int FS_ARABIC =  H40 
public const int FS_BALTIC =  H80 
public const int FS_THAI =  H10000
public const int FS_JISJAPAN =  H20000
public const int FS_CHINESESIMP =  H40000
public const int FS_WANSUNG =  H80000
public const int FS_CHINESETRAD =  H100000
public const int FS_JOHAB =  H200000
public const int FS_SYMBOL =  H80000000
public const int DEFAULT_GUI_FONT = 17
//  current version of specification
public const int DM_RESERVED1 =  H800000
public const int DM_RESERVED2 =  H1000000
public const int DM_ICMMETHOD =  H2000000
public const int DM_ICMINTENT =  H4000000
public const int DM_MEDIATYPE =  H8000000
public const int DM_DITHERTYPE =  H10000000
public const int DMPAPER_ISO_B4 = 42                //  B4 (ISO) 250 x 353 mm
public const int DMPAPER_JAPANESE_POSTCARD = 43     //  Japanese Postcard 100 x 148 mm
public const int DMPAPER_9X11 = 44                  //  9 x 11 in
public const int DMPAPER_10X11 = 45                 //  10 x 11 in
public const int DMPAPER_15X11 = 46                 //  15 x 11 in
public const int DMPAPER_ENV_INVITE = 47            //  Envelope Invite 220 x 220 mm
public const int DMPAPER_RESERVED_48 = 48           //  RESERVED--DO NOT USE
public const int DMPAPER_RESERVED_49 = 49           //  RESERVED--DO NOT USE
public const int DMPAPER_LETTER_EXTRA = 50              //  Letter Extra 9 \275 x 12 in
public const int DMPAPER_LEGAL_EXTRA = 51               //  Legal Extra 9 \275 x 15 in
public const int DMPAPER_TABLOID_EXTRA = 52              //  Tabloid Extra 11.69 x 18 in
public const int DMPAPER_A4_EXTRA = 53                   //  A4 Extra 9.27 x 12.69 in
public const int DMPAPER_LETTER_TRANSVERSE = 54     //  Letter Transverse 8 \275 x 11 in
public const int DMPAPER_A4_TRANSVERSE = 55         //  A4 Transverse 210 x 297 mm
public const int DMPAPER_LETTER_EXTRA_TRANSVERSE = 56 //  Letter Extra Transverse 9\275 x 12 in
public const int DMPAPER_A_PLUS = 57                //  SuperA/SuperA/A4 227 x 356 mm
public const int DMPAPER_B_PLUS = 58                //  SuperB/SuperB/A3 305 x 487 mm
public const int DMPAPER_LETTER_PLUS = 59           //  Letter Plus 8.5 x 12.69 in
public const int DMPAPER_A4_PLUS = 60               //  A4 Plus 210 x 330 mm
public const int DMPAPER_A5_TRANSVERSE = 61         //  A5 Transverse 148 x 210 mm
public const int DMPAPER_B5_TRANSVERSE = 62         //  B5 (JIS) Transverse 182 x 257 mm
public const int DMPAPER_A3_EXTRA = 63              //  A3 Extra 322 x 445 mm
public const int DMPAPER_A5_EXTRA = 64              //  A5 Extra 174 x 235 mm
public const int DMPAPER_B5_EXTRA = 65              //  B5 (ISO) Extra 201 x 276 mm
public const int DMPAPER_A2 = 66                    //  A2 420 x 594 mm
public const int DMPAPER_A3_TRANSVERSE = 67         //  A3 Transverse 297 x 420 mm
public const int DMPAPER_A3_EXTRA_TRANSVERSE = 68   //  A3 Extra Transverse 322 x 445 mm
public const int DMTT_DOWNLOAD_OUTLINE = 4 //  download TT fonts as outline soft fonts
public const int DMICMMETHOD_NONE = 1       //  ICM disabled
public const int DMICMMETHOD_SYSTEM = 2     //  ICM handled by system
public const int DMICMMETHOD_DRIVER = 3     //  ICM handled by driver
public const int DMICMMETHOD_DEVICE = 4     //  ICM handled by device
public const int DMICMMETHOD_USER = 256     //  Device-specific methods start here
public const int DMICM_SATURATE = 1         //  Maximize color saturation
public const int DMICM_CONTRAST = 2         //  Maximize color contrast
public const int DMICM_COLORMETRIC = 3      //  Use specific color metric
public const int DMICM_USER = 256           //  Device-specific intents start here

//  Media types
public const int DMMEDIA_STANDARD = 1         //  Standard paper
public const int DMMEDIA_GLOSSY = 2           //  Glossy paper
public const int DMMEDIA_TRANSPARENCY = 3     //  Transparency

public const int DMMEDIA_USER = 256           //  Device-specific media start here

//  Dither types
public const int DMDITHER_NONE = 1          //  No dithering
public const int DMDITHER_COARSE = 2        //  Dither with a coarse brush
public const int DMDITHER_FINE = 3          //  Dither with a fine brush
public const int DMDITHER_LINEART = 4       //  LineArt dithering
public const int DMDITHER_GRAYSCALE = 5     //  Device does grayscaling
public const int DMDITHER_USER = 256        //  Device-specific dithers start here
public const int GGO_GRAY2_BITMAP = 4
public const int GGO_GRAY4_BITMAP = 5
public const int GGO_GRAY8_BITMAP = 6
public const int GGO_GLYPH_INDEX =  H80
public const int GCP_DBCS =  H1
public const int GCP_REORDER =  H2
public const int GCP_USEKERNING =  H8
public const int GCP_GLYPHSHAPE =  H10
public const int GCP_LIGATE =  H20
public const int GCP_DIACRITIC =  H100
public const int GCP_KASHIDA =  H400
public const int GCP_ERROR =  H8000
public const int FLI_MASK =  H103B
public const int GCP_JUSTIFY =  H10000
public const int GCP_NODIACRITICS =  H20000
public const int FLI_GLYPHS =  H40000
public const int GCP_CLASSIN =  H80000
public const int GCP_MAXEXTENT =  H100000
public const int GCP_JUSTIFYIN =  H200000
public const int GCP_DISPLAYZWG =  H400000
public const int GCP_SYMSWAPOFF =  H800000
public const int GCP_NUMERICOVERRIDE =  H1000000
public const int GCP_NEUTRALOVERRIDE =  H2000000
public const int GCP_NUMERICSLATIN =  H4000000
public const int GCP_NUMERICSLOCAL =  H8000000
public const int GCPCLASS_LATIN = 1
public const int GCPCLASS_HEBREW = 2
public const int GCPCLASS_ARABIC = 2
public const int GCPCLASS_NEUTRAL = 3
public const int GCPCLASS_LOCALNUMBER = 4
public const int GCPCLASS_LATINNUMBER = 5
public const int GCPCLASS_LATINNUMERICTERMINATOR = 6
public const int GCPCLASS_LATINNUMERICSEPARATOR = 7
public const int GCPCLASS_NUMERICSEPARATOR = 8
public const int GCPCLASS_PREBOUNDRTL =  H80
public const int GCPCLASS_PREBOUNDLTR =  H40



Type GCP_RESULTS
        lStructSize As Long
        lpOutString As String
        lpOrder As Long
        lpDX As Long
        lpCaretPos As Long
        lpClass As String
        lpGlyphs As String
        nGlyphs As Long
        nMaxFit As Long
End Type

public const int DC_BINADJUST = 19
public const int DC_EMF_COMPLIANT = 20
public const int DC_DATATYPE_PRODUCED = 21
public const int DC_COLLATE = 22

public const int DCTT_DOWNLOAD_OUTLINE =  H8 

//  return values for DC_BINADJUST
public const int DCBA_FACEUPNONE =  H0
public const int DCBA_FACEUPCENTER =  H1
public const int DCBA_FACEUPLEFT =  H2
public const int DCBA_FACEUPRIGHT =  H3
public const int DCBA_FACEDOWNNONE =  H100
public const int DCBA_FACEDOWNCENTER =  H101
public const int DCBA_FACEDOWNLEFT =  H102
public const int DCBA_FACEDOWNRIGHT =  H103

Declare Function EnumFontFamilies Lib "gdi32" Alias "EnumFontFamiliesA" (ByVal hdc As Long, ByVal lpszFamily As String, ByVal lpEnumFontFamProc As Long, ByVal lParam As Long) As Long
Declare Function EnumFontFamiliesEx Lib "gdi32" Alias "EnumFontFamiliesExA" (ByVal hdc As Long, lpLogFont As LOGFONT, ByVal lpEnumFontProc As Long, ByVal lParam As Long, ByVal dw As Long) As Long
Declare Function GetTextCharset Lib "gdi32" Alias "GetTextCharset" (ByVal hdc As Long) As Long
Declare Function GetTextCharsetInfo Lib "gdi32" Alias "GetTextCharsetInfo" (ByVal hdc As Long, lpSig As FONTSIGNATURE, ByVal dwFlags As Long) As Long

Declare Function TranslateCharsetInfo Lib "gdi32" Alias "TranslateCharsetInfo" (lpSrc As Long, lpcs As CHARSETINFO, ByVal dwFlags As Long) As Long
Declare Function GetFontLanguageInfo Lib "gdi32" Alias "GetFontLanguageInfo" (ByVal hdc As Long) As Long
Declare Function GetCharacterPlacement Lib "gdi32" Alias " GetCharacterPlacementA" (ByVal hdc As Long, ByVal lpsz As String, ByVal n1 As Long, ByVal n2 As Long, lpGcpResults As GCP_RESULTS, ByVal dw As Long) As Long

public const int ICM_OFF = 1
public const int ICM_ON = 2
public const int ICM_QUERY = 3

Type CIEXYZ
	ciexyzX As Long
	ciexyzY As Long
	ciexyzZ As Long
End Type

Type CIEXYZTRIPLE
    ciexyzRed As CIEXYZ
    ciexyzGreen As CIEXYZ
    ciexyBlue As CIEXYZ
End Type

Type LOGCOLORSPACE
    lcsSignature As Long
    lcsVersion As Long
    lcsSize As Long
    lcsCSType As Long
    lcsIntent As Long
    lcsEndPoints As CIEXYZTRIPLE
    lcsGammaRed As Long
    lcsGammaGreen As Long
    lcsGammaBlue As Long
    lcsFileName As String * MAX_PATH
End Type

Declare Function SetICMMode Lib "gdi32" Alias "SetICMMode" (ByVal hdc As Long, ByVal n As Long) As Long
Declare Function CheckColorsInGamut Lib "gdi32" Alias "CheckColorsInGamut" (ByVal hdc As Long, lpv As Any, lpv2 As Any, ByVal dw As Long) As Long
Declare Function GetLogColorSpace Lib "gdi32" Alias "GetLogColorSpaceA" (ByVal hcolorspace As Long, ByVal lplogcolorspace As LOGCOLORSPACE, ByVal dw As Long) As Long
Declare Function GetColorSpace Lib "gdi32" Alias "GetColorSpace" (ByVal hdc As Long) As Long

Declare Function CreateColorSpace Lib "gdi32" Alias "CreateColorSpaceA" (lplogcolorspace As LOGCOLORSPACE) As Long

Declare Function SetColorSpace Lib "gdi32" Alias "SetColorSpace" (ByVal hdc As Long, ByVal hcolorspace As Long) As Long
Declare Function DeleteColorSpace Lib "gdi32" Alias "DeleteColorSpace" (ByVal hcolorspace As Long) As Long
Declare Function GetICMProfile Lib "gdi32" Alias "GetICMProfileA" (ByVal hdc As Long, ByVal dw As Long, ByVal lpStr As String) As Long
Declare Function SetICMProfile Lib "gdi32" Alias "SetICMProfileA" (ByVal hdc As Long, ByVal lpStr As String) As Long
Declare Function GetDeviceGammaRamp Lib "gdi32" Alias "GetDeviceGammaRamp" (ByVal hdc As Long, lpv As Any) As Long
Declare Function SetDeviceGammaRamp Lib "gdi32" Alias "SetDeviceGammaRamp" (ByVal hdc As Long, lpv As Any) As Long
Declare Function ColorMatchToTarget Lib "gdi32" Alias "ColorMatchToTarget" (ByVal hdc As Long, ByVal hdc2 As Long, ByVal dw As Long) As Long

Declare Function EnumICMProfiles Lib "gdi32" Alias "EnumICMProfilesA" (ByVal hdc As Long, ByVal icmEnumProc As Long, ByVal lParam As Long) As Long

public const int EMR_SETICMMODE = 98
public const int EMR_CREATECOLORSPACE = 99
public const int EMR_SETCOLORSPACE = 100
public const int EMR_DELETECOLORSPACE = 101

Type EMRSELECTCOLORSPACE
        pEmr As emr
        ihCS               //  ColorSpace handle index
End Type

Type EMRCREATECOLORSPACE
        pEmr As emr
        ihCS        //  ColorSpace handle index
        lcs As LOGCOLORSPACE
End Type


// --------------
//  USER Section
// --------------

// Scroll Bar public const intants
public const int SB_HORZ = 0
public const int SB_VERT = 1
public const int SB_CTL = 2
public const int SB_BOTH = 3

// Scroll Bar Commands
public const int SB_LINEUP = 0
public const int SB_LINELEFT = 0
public const int SB_LINEDOWN = 1
public const int SB_LINERIGHT = 1
public const int SB_PAGEUP = 2
public const int SB_PAGELEFT = 2
public const int SB_PAGEDOWN = 3
public const int SB_PAGERIGHT = 3
public const int SB_THUMBPOSITION = 4
public const int SB_THUMBTRACK = 5
public const int SB_TOP = 6
public const int SB_LEFT = 6
public const int SB_BOTTOM = 7
public const int SB_RIGHT = 7
public const int SB_ENDSCROLL = 8

// ShowWindow() Commands
public const int SW_HIDE = 0
public const int SW_SHOWNORMAL = 1
public const int SW_NORMAL = 1
public const int SW_SHOWMINIMIZED = 2
public const int SW_SHOWMAXIMIZED = 3
public const int SW_MAXIMIZE = 3
public const int SW_SHOWNOACTIVATE = 4
public const int SW_SHOW = 5
public const int SW_MINIMIZE = 6
public const int SW_SHOWMINNOACTIVE = 7
public const int SW_SHOWNA = 8
public const int SW_RESTORE = 9
public const int SW_SHOWDEFAULT = 10
public const int SW_MAX = 10

// Old ShowWindow() Commands
public const int HIDE_WINDOW = 0
public const int SHOW_OPENWINDOW = 1
public const int SHOW_ICONWINDOW = 2
public const int SHOW_FULLSCREEN = 3
public const int SHOW_OPENNOACTIVATE = 4

// Identifiers for the WM_SHOWWINDOW message
public const int SW_PARENTCLOSING = 1
public const int SW_OTHERZOOM = 2
public const int SW_PARENTOPENING = 3
public const int SW_OTHERUNZOOM = 4

// WM_KEYUP/DOWN/CHAR HIWORD(lParam) flags
public const int KF_EXTENDED =  H100
public const int KF_DLGMODE =  H800
public const int KF_MENUMODE =  H1000
public const int KF_ALTDOWN =  H2000
public const int KF_REPEAT =  H4000
public const int KF_UP =  H8000

// Virtual Keys, Standard Set
public const int VK_LBUTTON =  H1
public const int VK_RBUTTON =  H2
public const int VK_CANCEL =  H3
public const int VK_MBUTTON =  H4             //  NOT contiguous with L RBUTTON

public const int VK_BACK =  H8
public const int VK_TAB =  H9

public const int VK_CLEAR =  HC
public const int VK_RETURN =  HD

public const int VK_SHIFT =  H10
public const int VK_CONTROL =  H11
public const int VK_MENU =  H12
public const int VK_PAUSE =  H13
public const int VK_CAPITAL =  H14

public const int VK_ESCAPE =  H1B

public const int VK_SPACE =  H20
public const int VK_PRIOR =  H21
public const int VK_NEXT =  H22
public const int VK_END =  H23
public const int VK_HOME =  H24
public const int VK_LEFT =  H25
public const int VK_UP =  H26
public const int VK_RIGHT =  H27
public const int VK_DOWN =  H28
public const int VK_SELECT =  H29
public const int VK_PRINT =  H2A
public const int VK_EXECUTE =  H2B
public const int VK_SNAPSHOT =  H2C
public const int VK_INSERT =  H2D
public const int VK_DELETE =  H2E
public const int VK_HELP =  H2F

// VK_A thru VK_Z are the same as their ASCII equivalents: //A// thru //Z//
// VK_0 thru VK_9 are the same as their ASCII equivalents: //0// thru //9//

public const int VK_NUMPAD0 =  H60
public const int VK_NUMPAD1 =  H61
public const int VK_NUMPAD2 =  H62
public const int VK_NUMPAD3 =  H63
public const int VK_NUMPAD4 =  H64
public const int VK_NUMPAD5 =  H65
public const int VK_NUMPAD6 =  H66
public const int VK_NUMPAD7 =  H67
public const int VK_NUMPAD8 =  H68
public const int VK_NUMPAD9 =  H69
public const int VK_MULTIPLY =  H6A
public const int VK_ADD =  H6B
public const int VK_SEPARATOR =  H6C
public const int VK_SUBTRACT =  H6D
public const int VK_DECIMAL =  H6E
public const int VK_DIVIDE =  H6F
public const int VK_F1 =  H70
public const int VK_F2 =  H71
public const int VK_F3 =  H72
public const int VK_F4 =  H73
public const int VK_F5 =  H74
public const int VK_F6 =  H75
public const int VK_F7 =  H76
public const int VK_F8 =  H77
public const int VK_F9 =  H78
public const int VK_F10 =  H79
public const int VK_F11 =  H7A
public const int VK_F12 =  H7B
public const int VK_F13 =  H7C
public const int VK_F14 =  H7D
public const int VK_F15 =  H7E
public const int VK_F16 =  H7F
public const int VK_F17 =  H80
public const int VK_F18 =  H81
public const int VK_F19 =  H82
public const int VK_F20 =  H83
public const int VK_F21 =  H84
public const int VK_F22 =  H85
public const int VK_F23 =  H86
public const int VK_F24 =  H87

public const int VK_NUMLOCK =  H90
public const int VK_SCROLL =  H91

//
//   VK_L VK_R - left and right Alt, Ctrl and Shift virtual keys.
//   Used only as parameters to GetAsyncKeyState() and GetKeyState().
//   No other API or message will distinguish left and right keys in this way.
//  /
public const int VK_LSHIFT =  HA0
public const int VK_RSHIFT =  HA1
public const int VK_LCONTROL =  HA2
public const int VK_RCONTROL =  HA3
public const int VK_LMENU =  HA4
public const int VK_RMENU =  HA5

public const int VK_ATTN =  HF6
public const int VK_CRSEL =  HF7
public const int VK_EXSEL =  HF8
public const int VK_EREOF =  HF9
public const int VK_PLAY =  HFA
public const int VK_ZOOM =  HFB
public const int VK_NONAME =  HFC
public const int VK_PA1 =  HFD
public const int VK_OEM_CLEAR =  HFE

// SetWindowsHook() codes
public const int WH_MIN = (-1)
public const int WH_MSGFILTER = (-1)
public const int WH_JOURNALRECORD = 0
public const int WH_JOURNALPLAYBACK = 1
public const int WH_KEYBOARD = 2
public const int WH_GETMESSAGE = 3
public const int WH_CALLWNDPROC = 4
public const int WH_CBT = 5
public const int WH_SYSMSGFILTER = 6
public const int WH_MOUSE = 7
public const int WH_HARDWARE = 8
public const int WH_DEBUG = 9
public const int WH_SHELL = 10
public const int WH_FOREGROUNDIDLE = 11
public const int WH_MAX = 11

// Hook Codes
public const int HC_ACTION = 0
public const int HC_GETNEXT = 1
public const int HC_SKIP = 2
public const int HC_NOREMOVE = 3
public const int HC_NOREM = HC_NOREMOVE
public const int HC_SYSMODALON = 4
public const int HC_SYSMODALOFF = 5

// CBT Hook Codes
public const int HCBT_MOVESIZE = 0
public const int HCBT_MINMAX = 1
public const int HCBT_QS = 2
public const int HCBT_CREATEWND = 3
public const int HCBT_DESTROYWND = 4
public const int HCBT_ACTIVATE = 5
public const int HCBT_CLICKSKIPPED = 6
public const int HCBT_KEYSKIPPED = 7
public const int HCBT_SYSCOMMAND = 8
public const int HCBT_SETFOCUS = 9

// HCBT_ACTIVATE structure pointed to by lParam
Type CBTACTIVATESTRUCT
        fMouse As Long
        hWndActive As Long
End Type

// WH_MSGFILTER Filter Proc Codes
public const int MSGF_DIALOGBOX = 0
public const int MSGF_MESSAGEBOX = 1
public const int MSGF_MENU = 2
public const int MSGF_MOVE = 3
public const int MSGF_SIZE = 4
public const int MSGF_SCROLLBAR = 5
public const int MSGF_NEXTWINDOW = 6
public const int MSGF_MAINLOOP = 8
public const int MSGF_MAX = 8
public const int MSGF_USER = 4096

public const int HSHELL_WINDOWCREATED = 1
public const int HSHELL_WINDOWDESTROYED = 2
public const int HSHELL_ACTIVATESHELLWINDOW = 3

// Message Structure used in Journaling
Type EVENTMSG
        message As Long
        paramL As Long
        paramH As Long
        time As Long
        hwnd As Long
End Type

Type CWPSTRUCT
        lParam As Long
        wParam As Long
        message As Long
        hwnd As Long
End Type

Type DEBUGHOOKINFO
        hModuleHook As Long
        Reserved As Long
        lParam As Long
        wParam As Long
        code As Long
End Type


Type MOUSEHOOKSTRUCT
        pt As POINTAPI
        hwnd As Long
        wHitTestCode As Long
        dwExtraInfo As Long
End Type

// Keyboard Layout API
public const int HKL_PREV = 0
public const int HKL_NEXT = 1

public const int KLF_ACTIVATE =  H1
public const int KLF_SUBSTITUTE_OK =  H2
public const int KLF_UNLOADPREVIOUS =  H4
public const int KLF_REORDER =  H8

// Size of KeyboardLayoutName (number of characters), including nul terminator
public const int KL_NAMELENGTH = 9

Declare Function LoadKeyboardLayout Lib "user32" Alias "LoadKeyboardLayoutA" (ByVal pwszKLID As String, ByVal flags As Long) As Long
Declare Function ActivateKeyboardLayout Lib "user32" Alias "ActivateKeyboardLayout" (ByVal HKL As Long, ByVal flags As Long) As Long
Declare Function UnloadKeyboardLayout Lib "user32" Alias "UnloadKeyboardLayout" (ByVal HKL As Long) As Long
Declare Function GetKeyboardLayoutName Lib "user32" Alias "GetKeyboardLayoutNameA" (ByVal pwszKLID As String) As Long

// Desktop-specific access flags
public const int DESKTOP_READOBJECTS =  H1 
public const int DESKTOP_CREATEWINDOW =  H2 
public const int DESKTOP_CREATEMENU =  H4 
public const int DESKTOP_HOOKCONTROL =  H8 
public const int DESKTOP_JOURNALRECORD =  H10 
public const int DESKTOP_JOURNALPLAYBACK =  H20 
public const int DESKTOP_ENUMERATE =  H40 
public const int DESKTOP_WRITEOBJECTS =  H80 

Declare Function GetThreadDesktop Lib "user32" Alias "GetThreadDesktop" (ByVal dwThread As Long) As Long

// Windowstation-specific access flags
public const int WINSTA_ENUMDESKTOPS =  H1 
public const int WINSTA_READATTRIBUTES =  H2 
public const int WINSTA_ACCESSCLIPBOARD =  H4 
public const int WINSTA_CREATEDESKTOP =  H8 
public const int WINSTA_WRITEATTRIBUTES =  H10 
public const int WINSTA_ACCESSPUBLICATOMS =  H20 
public const int WINSTA_EXITWINDOWS =  H40 
public const int WINSTA_ENUMERATE =  H100 
public const int WINSTA_READSCREEN =  H200 

Declare Function GetProcessWindowStation Lib "user32" Alias "GetProcessWindowStation" () As Long
Declare Function SetUserObjectSecurity Lib "user32" Alias "SetUserObjectSecurity" (ByVal hObj As Long, pSIRequested As Long, pSd As SECURITY_DESCRIPTOR) As Long
Declare Function GetUserObjectSecurity Lib "user32" Alias "GetUserObjectSecurity" (ByVal hObj As Long, pSIRequested As Long, pSd As SECURITY_DESCRIPTOR, ByVal nLength As Long, lpnLengthNeeded As Long) As Long

// Message structure

// Window field offsets for GetWindowLong() and GetWindowWord()
public const int GWL_WNDPROC = (-4)
public const int GWL_HINSTANCE = (-6)
public const int GWL_HWNDPARENT = (-8)
public const int GWL_STYLE = (-16)
public const int GWL_EXSTYLE = (-20)
public const int GWL_USERDATA = (-21)
public const int GWL_ID = (-12)

// Class field offsets for GetClassLong() and GetClassWord()
public const int GCL_MENUNAME = (-8)
public const int GCL_HBRBACKGROUND = (-10)
public const int GCL_HCURSOR = (-12)
public const int GCL_HICON = (-14)
public const int GCL_HMODULE = (-16)
public const int GCL_CBWNDEXTRA = (-18)
public const int GCL_CBCLSEXTRA = (-20)
public const int GCL_WNDPROC = (-24)
public const int GCL_STYLE = (-26)
public const int GCW_ATOM = (-32)

// Window Messages
public const int WM_NULL =  H0
public const int WM_CREATE =  H1
public const int WM_DESTROY =  H2
public const int WM_MOVE =  H3
public const int WM_SIZE =  H5

public const int WM_ACTIVATE =  H6
//
//  WM_ACTIVATE state values

public const int WA_INACTIVE = 0
public const int WA_ACTIVE = 1
public const int WA_CLICKACTIVE = 2

public const int WM_SETFOCUS =  H7
public const int WM_KILLFOCUS =  H8
public const int WM_ENABLE =  HA
public const int WM_SETREDRAW =  HB
public const int WM_SETTEXT =  HC
public const int WM_GETTEXT =  HD
public const int WM_GETTEXTLENGTH =  HE
public const int WM_PAINT =  HF
public const int WM_CLOSE =  H10
public const int WM_QUERYENDSESSION =  H11
public const int WM_QUIT =  H12
public const int WM_QUERYOPEN =  H13
public const int WM_ERASEBKGND =  H14
public const int WM_SYSCOLORCHANGE =  H15
public const int WM_ENDSESSION =  H16
public const int WM_SHOWWINDOW =  H18
public const int WM_WININICHANGE =  H1A
public const int WM_DEVMODECHANGE =  H1B
public const int WM_ACTIVATEAPP =  H1C
public const int WM_FONTCHANGE =  H1D
public const int WM_TIMECHANGE =  H1E
public const int WM_CANCELMODE =  H1F
public const int WM_SETCURSOR =  H20
public const int WM_MOUSEACTIVATE =  H21
public const int WM_CHILDACTIVATE =  H22
public const int WM_QUEUESYNC =  H23

public const int WM_GETMINMAXINFO =  H24

Type MINMAXINFO
        ptReserved As POINTAPI
        ptMaxSize As POINTAPI
        ptMaxPosition As POINTAPI
        ptMinTrackSize As POINTAPI
        ptMaxTrackSize As POINTAPI
End Type

public const int WM_PAINTICON =  H26
public const int WM_ICONERASEBKGND =  H27
public const int WM_NEXTDLGCTL =  H28
public const int WM_SPOOLERSTATUS =  H2A
public const int WM_DRAWITEM =  H2B
public const int WM_MEASUREITEM =  H2C
public const int WM_DELETEITEM =  H2D
public const int WM_VKEYTOITEM =  H2E
public const int WM_CHARTOITEM =  H2F
public const int WM_SETFONT =  H30
public const int WM_GETFONT =  H31
public const int WM_SETHOTKEY =  H32
public const int WM_GETHOTKEY =  H33
public const int WM_QUERYDRAGICON =  H37
public const int WM_COMPAREITEM =  H39
public const int WM_COMPACTING =  H41
public const int WM_OTHERWINDOWCREATED =  H42               //  no longer suported
public const int WM_OTHERWINDOWDESTROYED =  H43             //  no longer suported
public const int WM_COMMNOTIFY =  H44                       //  no longer suported

// notifications passed in low word of lParam on WM_COMMNOTIFY messages
public const int CN_RECEIVE =  H1
public const int CN_TRANSMIT =  H2
public const int CN_EVENT =  H4

public const int WM_WINDOWPOSCHANGING =  H46
public const int WM_WINDOWPOSCHANGED =  H47

public const int WM_POWER =  H48
//
//  wParam for WM_POWER window message and DRV_POWER driver notification

public const int PWR_OK = 1
public const int PWR_FAIL = (-1)
public const int PWR_SUSPENDREQUEST = 1
public const int PWR_SUSPENDRESUME = 2
public const int PWR_CRITICALRESUME = 3

public const int WM_COPYDATA =  H4A
public const int WM_CANCELJOURNAL =  H4B

Type COPYDATASTRUCT
        dwData As Long
        cbData As Long
        lpData As Long
End Type

public const int WM_NCCREATE =  H81
public const int WM_NCDESTROY =  H82
public const int WM_NCCALCSIZE =  H83
public const int WM_NCHITTEST =  H84
public const int WM_NCPAINT =  H85
public const int WM_NCACTIVATE =  H86
public const int WM_GETDLGCODE =  H87
public const int WM_NCMOUSEMOVE =  HA0
public const int WM_NCLBUTTONDOWN =  HA1
public const int WM_NCLBUTTONUP =  HA2
public const int WM_NCLBUTTONDBLCLK =  HA3
public const int WM_NCRBUTTONDOWN =  HA4
public const int WM_NCRBUTTONUP =  HA5
public const int WM_NCRBUTTONDBLCLK =  HA6
public const int WM_NCMBUTTONDOWN =  HA7
public const int WM_NCMBUTTONUP =  HA8
public const int WM_NCMBUTTONDBLCLK =  HA9

public const int WM_KEYFIRST =  H100
public const int WM_KEYDOWN =  H100
public const int WM_KEYUP =  H101
public const int WM_CHAR =  H102
public const int WM_DEADCHAR =  H103
public const int WM_SYSKEYDOWN =  H104
public const int WM_SYSKEYUP =  H105
public const int WM_SYSCHAR =  H106
public const int WM_SYSDEADCHAR =  H107
public const int WM_KEYLAST =  H108
public const int WM_INITDIALOG =  H110
public const int WM_COMMAND =  H111
public const int WM_SYSCOMMAND =  H112
public const int WM_TIMER =  H113
public const int WM_HSCROLL =  H114
public const int WM_VSCROLL =  H115
public const int WM_INITMENU =  H116
public const int WM_INITMENUPOPUP =  H117
public const int WM_MENUSELECT =  H11F
public const int WM_MENUCHAR =  H120
public const int WM_ENTERIDLE =  H121

public const int WM_CTLCOLORMSGBOX =  H132
public const int WM_CTLCOLOREDIT =  H133
public const int WM_CTLCOLORLISTBOX =  H134
public const int WM_CTLCOLORBTN =  H135
public const int WM_CTLCOLORDLG =  H136
public const int WM_CTLCOLORSCROLLBAR =  H137
public const int WM_CTLCOLORSTATIC =  H138

public const int WM_MOUSEFIRST =  H200
public const int WM_MOUSEMOVE =  H200
public const int WM_LBUTTONDOWN =  H201
public const int WM_LBUTTONUP =  H202
public const int WM_LBUTTONDBLCLK =  H203
public const int WM_RBUTTONDOWN =  H204
public const int WM_RBUTTONUP =  H205
public const int WM_RBUTTONDBLCLK =  H206
public const int WM_MBUTTONDOWN =  H207
public const int WM_MBUTTONUP =  H208
public const int WM_MBUTTONDBLCLK =  H209
public const int WM_MOUSELAST =  H209

public const int WM_PARENTNOTIFY =  H210
public const int WM_ENTERMENULOOP =  H211
public const int WM_EXITMENULOOP =  H212
public const int WM_MDICREATE =  H220
public const int WM_MDIDESTROY =  H221
public const int WM_MDIACTIVATE =  H222
public const int WM_MDIRESTORE =  H223
public const int WM_MDINEXT =  H224
public const int WM_MDIMAXIMIZE =  H225
public const int WM_MDITILE =  H226
public const int WM_MDICASCADE =  H227
public const int WM_MDIICONARRANGE =  H228
public const int WM_MDIGETACTIVE =  H229
public const int WM_MDISETMENU =  H230
public const int WM_DROPFILES =  H233
public const int WM_MDIREFRESHMENU =  H234


public const int WM_CUT =  H300
public const int WM_COPY =  H301
public const int WM_PASTE =  H302
public const int WM_CLEAR =  H303
public const int WM_UNDO =  H304
public const int WM_RENDERFORMAT =  H305
public const int WM_RENDERALLFORMATS =  H306
public const int WM_DESTROYCLIPBOARD =  H307
public const int WM_DRAWCLIPBOARD =  H308
public const int WM_PAINTCLIPBOARD =  H309
public const int WM_VSCROLLCLIPBOARD =  H30A
public const int WM_SIZECLIPBOARD =  H30B
public const int WM_ASKCBFORMATNAME =  H30C
public const int WM_CHANGECBCHAIN =  H30D
public const int WM_HSCROLLCLIPBOARD =  H30E
public const int WM_QUERYNEWPALETTE =  H30F
public const int WM_PALETTEISCHANGING =  H310
public const int WM_PALETTECHANGED =  H311
public const int WM_HOTKEY =  H312

public const int WM_PENWINFIRST =  H380
public const int WM_PENWINLAST =  H38F

// NOTE: All Message Numbers below 0x0400 are RESERVED.

// Private Window Messages Start Here:
public const int WM_USER =  H400

// WM_SYNCTASK Commands
public const int ST_BEGINSWP = 0
public const int ST_ENDSWP = 1

// WM_NCHITTEST and MOUSEHOOKSTRUCT Mouse Position Codes
public const int HTERROR = (-2)
public const int HTTRANSPARENT = (-1)
public const int HTNOWHERE = 0
public const int HTCLIENT = 1
public const int HTCAPTION = 2
public const int HTSYSMENU = 3
public const int HTGROWBOX = 4
public const int HTSIZE = HTGROWBOX
public const int HTMENU = 5
public const int HTHSCROLL = 6
public const int HTVSCROLL = 7
public const int HTMINBUTTON = 8
public const int HTMAXBUTTON = 9
public const int HTLEFT = 10
public const int HTRIGHT = 11
public const int HTTOP = 12
public const int HTTOPLEFT = 13
public const int HTTOPRIGHT = 14
public const int HTBOTTOM = 15
public const int HTBOTTOMLEFT = 16
public const int HTBOTTOMRIGHT = 17
public const int HTBORDER = 18
public const int HTREDUCE = HTMINBUTTON
public const int HTZOOM = HTMAXBUTTON
public const int HTSIZEFIRST = HTLEFT
public const int HTSIZELAST = HTBOTTOMRIGHT

//  SendMessageTimeout values
public const int SMTO_NORMAL =  H0
public const int SMTO_BLOCK =  H1
public const int SMTO_ABORTIFHUNG =  H2

// WM_MOUSEACTIVATE Return Codes
public const int MA_ACTIVATE = 1
public const int MA_ACTIVATEANDEAT = 2
public const int MA_NOACTIVATE = 3
public const int MA_NOACTIVATEANDEAT = 4

Declare Function RegisterWindowMessage Lib "user32" Alias "RegisterWindowMessageA" (ByVal lpString As String) As Long

// WM_SIZE message wParam values
public const int SIZE_RESTORED = 0
public const int SIZE_MINIMIZED = 1
public const int SIZE_MAXIMIZED = 2
public const int SIZE_MAXSHOW = 3
public const int SIZE_MAXHIDE = 4

// Obsolete public const intant names
public const int SIZENORMAL = SIZE_RESTORED
public const int SIZEICONIC = SIZE_MINIMIZED
public const int SIZEFULLSCREEN = SIZE_MAXIMIZED
public const int SIZEZOOMSHOW = SIZE_MAXSHOW
public const int SIZEZOOMHIDE = SIZE_MAXHIDE

// WM_WINDOWPOSCHANGING/CHANGED struct pointed to by lParam
Type WINDOWPOS
        hwnd As Long
        hWndInsertAfter As Long
        x As Long
        y As Long
        cx As Long
        cy As Long
        flags As Long
End Type

// WM_NCCALCSIZE return flags
public const int WVR_ALIGNTOP =  H10
public const int WVR_ALIGNLEFT =  H20
public const int WVR_ALIGNBOTTOM =  H40
public const int WVR_ALIGNRIGHT =  H80
public const int WVR_HREDRAW =  H100
public const int WVR_VREDRAW =  H200
public const int WVR_REDRAW = (WVR_HREDRAW Or WVR_VREDRAW)
public const int WVR_VALIDRECTS =  H400

// Key State Masks for Mouse Messages
public const int MK_LBUTTON =  H1
public const int MK_RBUTTON =  H2
public const int MK_SHIFT =  H4
public const int MK_CONTROL =  H8
public const int MK_MBUTTON =  H10

// Window Styles
public const int WS_OVERLAPPED =  H0 
public const int WS_POPUP =  H80000000
public const int WS_CHILD =  H40000000
public const int WS_MINIMIZE =  H20000000
public const int WS_VISIBLE =  H10000000
public const int WS_DISABLED =  H8000000
public const int WS_CLIPSIBLINGS =  H4000000
public const int WS_CLIPCHILDREN =  H2000000
public const int WS_MAXIMIZE =  H1000000
public const int WS_CAPTION =  HC00000                  //  WS_BORDER Or WS_DLGFRAME
public const int WS_BORDER =  H800000
public const int WS_DLGFRAME =  H400000
public const int WS_VSCROLL =  H200000
public const int WS_HSCROLL =  H100000
public const int WS_SYSMENU =  H80000
public const int WS_THICKFRAME =  H40000
public const int WS_GROUP =  H20000
public const int WS_TABSTOP =  H10000

public const int WS_MINIMIZEBOX =  H20000
public const int WS_MAXIMIZEBOX =  H10000

public const int WS_TILED = WS_OVERLAPPED
public const int WS_ICONIC = WS_MINIMIZE
public const int WS_SIZEBOX = WS_THICKFRAME
public const int WS_OVERLAPPEDWINDOW = (WS_OVERLAPPED Or WS_CAPTION Or WS_SYSMENU Or WS_THICKFRAME Or WS_MINIMIZEBOX Or WS_MAXIMIZEBOX)
public const int WS_TILEDWINDOW = WS_OVERLAPPEDWINDOW

//
//   Common Window Styles
//  /


public const int WS_POPUPWINDOW = (WS_POPUP Or WS_BORDER Or WS_SYSMENU)

public const int WS_CHILDWINDOW = (WS_CHILD)

// Extended Window Styles
public const int WS_EX_DLGMODALFRAME =  H1 
public const int WS_EX_NOPARENTNOTIFY =  H4 
public const int WS_EX_TOPMOST =  H8 
public const int WS_EX_ACCEPTFILES =  H10 
public const int WS_EX_TRANSPARENT =  H20 

// Class styles
public const int CS_VREDRAW =  H1
public const int CS_HREDRAW =  H2
public const int CS_KEYCVTWINDOW =  H4
public const int CS_DBLCLKS =  H8
public const int CS_OWNDC =  H20
public const int CS_CLASSDC =  H40
public const int CS_PARENTDC =  H80
public const int CS_NOKEYCVT =  H100
public const int CS_NOCLOSE =  H200
public const int CS_SAVEBITS =  H800
public const int CS_BYTEALIGNCLIENT =  H1000
public const int CS_BYTEALIGNWINDOW =  H2000
public const int CS_PUBLICCLASS =  H4000

// Predefined Clipboard Formats
public const int CF_TEXT = 1
public const int CF_BITMAP = 2
public const int CF_METAFILEPICT = 3
public const int CF_SYLK = 4
public const int CF_DIF = 5
public const int CF_TIFF = 6
public const int CF_OEMTEXT = 7
public const int CF_DIB = 8
public const int CF_PALETTE = 9
public const int CF_PENDATA = 10
public const int CF_RIFF = 11
public const int CF_WAVE = 12
public const int CF_UNICODETEXT = 13
public const int CF_ENHMETAFILE = 14

public const int CF_OWNERDISPLAY =  H80
public const int CF_DSPTEXT =  H81
public const int CF_DSPBITMAP =  H82
public const int CF_DSPMETAFILEPICT =  H83
public const int CF_DSPENHMETAFILE =  H8E

// "Private" formats don//t get GlobalFree()//d
public const int CF_PRIVATEFIRST =  H200
public const int CF_PRIVATELAST =  H2FF

// "GDIOBJ" formats do get DeleteObject()//d
public const int CF_GDIOBJFIRST =  H300
public const int CF_GDIOBJLAST =  H3FF

//  Defines for the fVirt field of the Accelerator table structure.
public const int FVIRTKEY =  H1
public const int FNOINVERT =  H2
public const int FSHIFT =  H4
public const int FCONTROL =  H8
public const int FALT =  H10

Type ACCEL
        fVirt As Byte
        key As Integer
        cmd As Integer
End Type

Type PAINTSTRUCT
        hdc As Long
        fErase As Long
        rcPaint As Rect
        fRestore As Long
        fIncUpdate As Long
        rgbReserved(32) As Byte
End Type

Type CREATESTRUCT
        lpCreateParams As Long
        hInstance As Long
        hMenu As Long
        hWndParent As Long
        cy As Long
        cx As Long
        y As Long
        x As Long
        style As Long
        lpszName As String
        lpszClass As String
        ExStyle As Long
End Type

// HCBT_CREATEWND parameters pointed to by lParam
Type CBT_CREATEWND
        lpcs As CREATESTRUCT
        hWndInsertAfter As Long
End Type

Type WINDOWPLACEMENT
        Length As Long
        flags As Long
        showCmd As Long
        ptMinPosition As POINTAPI
        ptMaxPosition As POINTAPI
        rcNormalPosition As Rect
End Type

public const int WPF_SETMINPOSITION =  H1
public const int WPF_RESTORETOMAXIMIZED =  H2

// Owner draw control types
public const int ODT_MENU = 1
public const int ODT_LISTBOX = 2
public const int ODT_COMBOBOX = 3
public const int ODT_BUTTON = 4

// Owner draw actions
public const int ODA_DRAWENTIRE =  H1
public const int ODA_SELECT =  H2
public const int ODA_FOCUS =  H4

// Owner draw state
public const int ODS_SELECTED =  H1
public const int ODS_GRAYED =  H2
public const int ODS_DISABLED =  H4
public const int ODS_CHECKED =  H8
public const int ODS_FOCUS =  H10

// MEASUREITEMSTRUCT for ownerdraw
Type MEASUREITEMSTRUCT
        CtlType As Long
        CtlID As Long
        itemID As Long
        itemWidth As Long
        itemHeight As Long
        itemData As Long
End Type

// DRAWITEMSTRUCT for ownerdraw
Type DRAWITEMSTRUCT
        CtlType As Long
        CtlID As Long
        itemID As Long
        itemAction As Long
        itemState As Long
        hwndItem As Long
        hdc As Long
        rcItem As Rect
        itemData As Long
End Type

// DELETEITEMSTRUCT for ownerdraw
Type DELETEITEMSTRUCT
        CtlType As Long
        CtlID As Long
        itemID As Long
        hwndItem As Long
        itemData As Long
End Type

// COMPAREITEMSTRUCT for ownerdraw sorting
Type COMPAREITEMSTRUCT
        CtlType As Long
        CtlID As Long
        hwndItem As Long
        itemID1 As Long
        itemData1 As Long
        itemID2 As Long
        itemData2 As Long
End Type

// Message Function Templates
Declare Function GetMessage Lib "user32" Alias "GetMessageA" (lpMsg As MSG, ByVal hwnd As Long, ByVal wMsgFilterMin As Long, ByVal wMsgFilterMax As Long) As Long
Declare Function TranslateMessage Lib "user32" Alias "TranslateMessage" (lpMsg As MSG) As Long
Declare Function DispatchMessage Lib "user32" Alias "DispatchMessageA" (lpMsg As MSG) As Long
Declare Function PeekMessage Lib "user32" Alias "PeekMessageA" (lpMsg As MSG, ByVal hwnd As Long, ByVal wMsgFilterMin As Long, ByVal wMsgFilterMax As Long, ByVal wRemoveMsg As Long) As Long

// PeekMessage() Options
public const int PM_NOREMOVE =  H0
public const int PM_REMOVE =  H1
public const int PM_NOYIELD =  H2

Declare Function RegisterHotKey Lib "user32" Alias "RegisterHotKey" (ByVal hwnd As Long, ByVal id As Long, ByVal fsModifiers As Long, ByVal vk As Long) As Long
Declare Function UnregisterHotKey Lib "user32" Alias "UnregisterHotKey" (ByVal hwnd As Long, ByVal id As Long) As Long

public const int MOD_ALT =  H1
public const int MOD_CONTROL =  H2
public const int MOD_SHIFT =  H4

public const int IDHOT_SNAPWINDOW = (-1)    //  SHIFT-PRINTSCRN
public const int IDHOT_SNAPDESKTOP = (-2)    //  PRINTSCRN

public const int EWX_LOGOFF = 0
public const int EWX_SHUTDOWN = 1
public const int EWX_REBOOT = 2
public const int EWX_FORCE = 4

public const int READAPI = 0        //  Flags for _lopen
public const int WRITEAPI = 1
public const int READ_WRITE = 2

//per KB Article Q174883: ExitWindows -- Alias "ExitWindows" -> Alias "ExitWindowsEx"
Declare Function ExitWindows Lib "user32" Alias "ExitWindowsEx" (ByVal dwReserved As Long, ByVal uReturnCode As Long) As Long
Declare Function ExitWindowsEx Lib "user32" Alias "ExitWindowsEx" (ByVal uFlags As Long, ByVal dwReserved As Long) As Long

Declare Function SwapMouseButton Lib "user32" Alias "SwapMouseButton" (ByVal bSwap As Long) As Long
Declare Function GetMessagePos Lib "user32" Alias "GetMessagePos" () As Long
Declare Function GetMessageTime Lib "user32" Alias "GetMessageTime" () As Long
Declare Function GetMessageExtraInfo Lib "user32" Alias "GetMessageExtraInfo" () As Long
Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
Declare Function SendMessageTimeout Lib "user32" Alias "SendMessageTimeoutA" (ByVal hwnd As Long, ByVal msg As Long, ByVal wParam As Long, ByVal lParam As Long, ByVal fuFlags As Long, ByVal uTimeout As Long, lpdwResult As Long) As Long
Declare Function SendNotifyMessage Lib "user32" Alias "SendNotifyMessageA" (ByVal hwnd As Long, ByVal msg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long
Declare Function SendMessageCallback Lib "user32" Alias "SendMessageCallbackA" (ByVal hwnd As Long, ByVal msg As Long, ByVal wParam As Long, ByVal lParam As Long, ByVal lpResultCallBack As Long, ByVal dwData As Long) As Long
Declare Function PostMessage Lib "user32" Alias "PostMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long
Declare Function PostThreadMessage Lib "user32" Alias "PostThreadMessageA" (ByVal idThread As Long, ByVal msg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long

// Special HWND value for use with PostMessage and SendMessage
public const int HWND_BROADCAST =  HFFFF 


Type WNDCLASS
    style As Long
    lpfnwndproc As Long
    cbClsextra As Long
    cbWndExtra2 As Long
    hInstance As Long
    hIcon As Long
    hCursor As Long
    hbrBackground As Long
    lpszMenuName As String
    lpszClassName As String
End Type

Declare Function AttachThreadInput Lib "user32" Alias "AttachThreadInput" (ByVal idAttach As Long, ByVal idAttachTo As Long, ByVal fAttach As Long) As Long
Declare Function ReplyMessage Lib "user32" Alias "ReplyMessage" (ByVal lReply As Long) As Long
Declare Function WaitMessage Lib "user32" Alias "WaitMessage" () As Long
Declare Function WaitForInputIdle Lib "user32" Alias "WaitForInputIdle" (ByVal hProcess As Long, ByVal dwMilliseconds As Long) As Long
Declare Function DefWindowProc Lib "user32" Alias "DefWindowProcA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long
Declare Sub PostQuitMessage Lib "user32" Alias "PostQuitMessage" (ByVal nExitCode As Long)
Declare Function InSendMessage Lib "user32" Alias "InSendMessage" () As Long

Declare Function InitCommonControls Lib "COMCTL32" () As Long
Declare Function ImageList_Create Lib "COMCTL32" (ByVal MinCx As Long, ByVal MinCy As Long, ByVal flags As Long, ByVal cInitial As Long, ByVal cGrow As Long) As Long
Declare Function ImageList_AddIcon Lib "COMCTL32" (ByVal himl As Long, ByVal hIcon As Long) As Long
Declare Function ImageList_GetIcon Lib "COMCTL32" (ByVal HIMAGELIST As Long, ByVal ImgIndex As Long, hbmMask As Long) As Long
Declare Function ImageList_Draw Lib "COMCTL32" (ByVal HIMAGELIST As Long, ByVal ImgIndex As Long, ByVal hDCDest As Long, ByVal xDest As Long, ByVal yDest As Long, ByVal lStyle As Long) As Long




Declare Function GetDoubleClickTime Lib "user32" Alias "GetDoubleClickTime" () As Long
Declare Function SetDoubleClickTime Lib "user32" Alias "SetDoubleClickTime" (ByVal wCount As Long) As Long
Declare Function RegisterClass Lib "user32" Alias "RegisterClassA" (Class As WNDCLASS) As Long
Declare Function UnregisterClass Lib "user32" Alias "UnregisterClassA" (ByVal lpClassName As String, ByVal hInstance As Long) As Long
Declare Function GetClassInfo Lib "user32" Alias "GetClassInfoA" (ByVal hInstance As Long, ByVal lpClassName As String, lpWndClass As WNDCLASS) As Long

public const int CW_USEDEFAULT =  H80000000
public const int HWND_DESKTOP = 0

Declare Function CreateWindowEx Lib "user32" Alias "CreateWindowExA" (ByVal dwExStyle As Long, ByVal lpClassName As String, ByVal lpWindowName As String, ByVal dwStyle As Long, ByVal x As Long, ByVal y As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal hWndParent As Long, ByVal hMenu As Long, ByVal hInstance As Long, lpParam As Any) As Long
Declare Function IsWindow Lib "user32" Alias "IsWindow" (ByVal hwnd As Long) As Long
Declare Function IsMenu Lib "user32" Alias "IsMenu" (ByVal hMenu As Long) As Long
Declare Function IsChild Lib "user32" Alias "IsChild" (ByVal hWndParent As Long, ByVal hwnd As Long) As Long
Declare Function DestroyWindow Lib "user32" Alias "DestroyWindow" (ByVal hwnd As Long) As Long

Declare Function ShowWindow Lib "user32" Alias "ShowWindow" (ByVal hwnd As Long, ByVal nCmdShow As Long) As Long
Declare Function FlashWindow Lib "user32" Alias "FlashWindow" (ByVal hwnd As Long, ByVal bInvert As Long) As Long
Declare Function ShowOwnedPopups Lib "user32" Alias "ShowOwnedPopups" (ByVal hwnd As Long, ByVal fShow As Long) As Long

Declare Function OpenIcon Lib "user32" Alias "OpenIcon" (ByVal hwnd As Long) As Long
Declare Function CloseWindow Lib "user32" Alias "CloseWindow" (ByVal hwnd As Long) As Long
Declare Function MoveWindow Lib "user32" Alias "MoveWindow" (ByVal hwnd As Long, ByVal x As Long, ByVal y As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal bRepaint As Long) As Long
Declare Function SetWindowPos Lib "user32" Alias "SetWindowPos" (ByVal hwnd As Long, ByVal hWndInsertAfter As Long, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As Long
Declare Function GetWindowPlacement Lib "user32" Alias "GetWindowPlacement" (ByVal hwnd As Long, lpwndpl As WINDOWPLACEMENT) As Long
Declare Function SetWindowPlacement Lib "user32" Alias "SetWindowPlacement" (ByVal hwnd As Long, lpwndpl As WINDOWPLACEMENT) As Long

Declare Function BeginDeferWindowPos Lib "user32" Alias "BeginDeferWindowPos" (ByVal nNumWindows As Long) As Long
Declare Function DeferWindowPos Lib "user32" Alias "DeferWindowPos" (ByVal hWinPosInfo As Long, ByVal hwnd As Long, ByVal hWndInsertAfter As Long, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As Long
Declare Function EndDeferWindowPos Lib "user32" Alias "EndDeferWindowPos" (ByVal hWinPosInfo As Long) As Long

Declare Function IsWindowVisible Lib "user32" Alias "IsWindowVisible" (ByVal hwnd As Long) As Long
Declare Function IsIconic Lib "user32" Alias "IsIconic" (ByVal hwnd As Long) As Long
Declare Function AnyPopup Lib "user32" Alias "AnyPopup" () As Long
Declare Function BringWindowToTop Lib "user32" Alias "BringWindowToTop" (ByVal hwnd As Long) As Long
Declare Function IsZoomed Lib "user32" Alias "IsZoomed" (ByVal hwnd As Long) As Long

// SetWindowPos Flags
public const int SWP_NOSIZE =  H1
public const int SWP_NOMOVE =  H2
public const int SWP_NOZORDER =  H4
public const int SWP_NOREDRAW =  H8
public const int SWP_NOACTIVATE =  H10
public const int SWP_FRAMECHANGED =  H20        //  The frame changed: send WM_NCCALCSIZE
public const int SWP_SHOWWINDOW =  H40
public const int SWP_HIDEWINDOW =  H80
public const int SWP_NOCOPYBITS =  H100
public const int SWP_NOOWNERZORDER =  H200      //  Don//t do owner Z ordering

public const int SWP_DRAWFRAME = SWP_FRAMECHANGED
public const int SWP_NOREPOSITION = SWP_NOOWNERZORDER

// SetWindowPos() hwndInsertAfter values
public const int HWND_TOP = 0
public const int HWND_BOTTOM = 1
public const int HWND_TOPMOST = -1
public const int HWND_NOTOPMOST = -2

Type DLGTEMPLATE
        style As Long
        dwExtendedStyle As Long
        cdit As Integer
        x As Integer
        y As Integer
        cx As Integer
        cy As Integer
End Type

Type DLGITEMTEMPLATE
        style As Long
        dwExtendedStyle As Long
        x As Integer
        y As Integer
        cx As Integer
        cy As Integer
        id As Integer
End Type

Declare Function EndDialog Lib "user32" Alias "EndDialog" (ByVal hDlg As Long, ByVal nResult As Long) As Long
Declare Function GetDlgItem Lib "user32" Alias "GetDlgItem" (ByVal hDlg As Long, ByVal nIDDlgItem As Long) As Long
Declare Function SetDlgItemInt Lib "user32" Alias "SetDlgItemInt" (ByVal hDlg As Long, ByVal nIDDlgItem As Long, ByVal wValue As Long, ByVal bSigned As Long) As Long
Declare Function GetDlgItemInt Lib "user32" Alias "GetDlgItemInt" (ByVal hDlg As Long, ByVal nIDDlgItem As Long, ByVal lpTranslated As Long, ByVal bSigned As Long) As Long
Declare Function SetDlgItemText Lib "user32" Alias "SetDlgItemTextA" (ByVal hDlg As Long, ByVal nIDDlgItem As Long, ByVal lpString As String) As Long
Declare Function GetDlgItemText Lib "user32" Alias "GetDlgItemTextA" (ByVal hDlg As Long, ByVal nIDDlgItem As Long, ByVal lpString As String, ByVal nMaxCount As Long) As Long
Declare Function CheckDlgButton Lib "user32" Alias "CheckDLGButtonA" (ByVal hDlg As Long, ByVal nIDButton As Long, ByVal wCheck As Long) As Long
Declare Function CheckRadioButton Lib "user32" Alias "CheckRadioButtonA" (ByVal hDlg As Long, ByVal nIDFirstButton As Long, ByVal nIDLastButton As Long, ByVal nIDCheckButton As Long) As Long
Declare Function IsDlgButtonChecked Lib "user32" Alias "IsDlgButtonChecked" (ByVal hDlg As Long, ByVal nIDButton As Long) As Long
Declare Function SendDlgItemMessage Lib "user32" Alias "SendDlgItemMessageA" (ByVal hDlg As Long, ByVal nIDDlgItem As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long
Declare Function GetNextDlgGroupItem Lib "user32" Alias "GetNextDlgGroupItem" (ByVal hDlg As Long, ByVal hCtl As Long, ByVal bPrevious As Long) As Long
Declare Function GetNextDlgTabItem Lib "user32" Alias "GetNextDlgTabItem" (ByVal hDlg As Long, ByVal hCtl As Long, ByVal bPrevious As Long) As Long
Declare Function GetDlgCtrlID Lib "user32" Alias "GetDlgCtrlID" (ByVal hwnd As Long) As Long
Declare Function GetDialogBaseUnits Lib "user32" Alias "GetDialogBaseUnits" () As Long
Declare Function DefDlgProc Lib "user32" Alias "DefDlgProcA" (ByVal hDlg As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long

public const int DLGWINDOWEXTRA = 30        //  Window extra bytes needed for private dialog classes

Declare Function CallMsgFilter Lib "user32" Alias "CallMsgFilterA" (lpMsg As MSG, ByVal ncode As Long) As Long

// Clipboard Manager Functions
Declare Function OpenClipboard Lib "user32" Alias "OpenClipboard" (ByVal hwnd As Long) As Long
Declare Function CloseClipboard Lib "user32" Alias "CloseClipboard" () As Long
Declare Function GetClipboardOwner Lib "user32" Alias "GetClipboardOwner" () As Long
Declare Function SetClipboardViewer Lib "user32" Alias "SetClipboardViewer" (ByVal hwnd As Long) As Long
Declare Function GetClipboardViewer Lib "user32" Alias "GetClipboardViewer" () As Long
Declare Function ChangeClipboardChain Lib "user32" Alias "ChangeClipboardChain" (ByVal hwnd As Long, ByVal hWndNext As Long) As Long
Declare Function SetClipboardData Lib "user32" Alias "SetClipboardDataA" (ByVal wFormat As Long, ByVal hMem As Long) As Long
Declare Function GetClipboardData Lib "user32" Alias "GetClipboardDataA" (ByVal wFormat As Long) As Long
Declare Function RegisterClipboardFormat Lib "user32" Alias "RegisterClipboardFormatA" (ByVal lpString As String) As Long
Declare Function CountClipboardFormats Lib "user32" Alias "CountClipboardFormats" () As Long
Declare Function EnumClipboardFormats Lib "user32" Alias "EnumClipboardFormats" (ByVal wFormat As Long) As Long
Declare Function GetClipboardFormatName Lib "user32" Alias "GetClipboardFormatNameA" (ByVal wFormat As Long, ByVal lpString As String, ByVal nMaxCount As Long) As Long
Declare Function EmptyClipboard Lib "user32" Alias "EmptyClipboard" () As Long
Declare Function IsClipboardFormatAvailable Lib "user32" Alias "IsClipboardFormatAvailable" (ByVal wFormat As Long) As Long
Declare Function GetPriorityClipboardFormat Lib "user32" Alias "GetPriorityClipboardFormat" (lpPriorityList As Long, ByVal nCount As Long) As Long
Declare Function GetOpenClipboardWindow Lib "user32" Alias "GetOpenClipboardWindow" () As Long
Declare Function CharToOem Lib "user32" Alias "CharToOemA" (ByVal lpszSrc As String, ByVal lpszDst As String) As Long
Declare Function OemToChar Lib "user32" Alias "OemToCharA" (ByVal lpszSrc As String, ByVal lpszDst As String) As Long
Declare Function CharToOemBuff Lib "user32" Alias "CharToOemBuffA" (ByVal lpszSrc As String, ByVal lpszDst As String, ByVal cchDstLength As Long) As Long
Declare Function OemToCharBuff Lib "user32" Alias "OemToCharBuffA" (ByVal lpszSrc As String, ByVal lpszDst As String, ByVal cchDstLength As Long) As Long
Declare Function CharUpper Lib "user32" Alias "CharUpperA" (ByVal lpsz As String) As String
Declare Function CharUpperBuff Lib "user32" Alias "CharUpperBuffA" (ByVal lpsz As String, ByVal cchLength As Long) As Long
Declare Function CharLower Lib "user32" Alias "CharLowerA" (ByVal lpsz As String) As String
Declare Function CharLowerBuff Lib "user32" Alias "CharLowerBuffA" (ByVal lpsz As String, ByVal cchLength As Long) As Long
Declare Function CharNext Lib "user32" Alias "CharNextA" (ByVal lpsz As String) As String
Declare Function CharPrev Lib "user32" Alias "CharPrevA" (ByVal lpszStart As String, ByVal lpszCurrent As String) As String

// Language dependent Routines
Declare Function IsCharAlpha Lib "user32" Alias "IsCharAlphaA" (ByVal cChar As Byte) As Long
Declare Function IsCharAlphaNumeric Lib "user32" Alias "IsCharAlphaNumericA" (ByVal cChar As Byte) As Long
Declare Function IsCharUpper Lib "user32" Alias "IsCharUpperA" (ByVal cChar As Byte) As Long
Declare Function IsCharLower Lib "user32" Alias "IsCharLowerA" (ByVal cChar As Byte) As Long

Declare Function SetFocus Lib "user32" Alias "SetFocus" (ByVal hwnd As Long) As Long
Declare Function GetFocus Lib "user32" Alias "GetFocus" () As Long
Declare Function GetActiveWindow Lib "user32" Alias "GetActiveWindow" () As Long

// Keyboard Information Routines
Declare Function GetKBCodePage Lib "user32" Alias "GetKBCodePage" () As Long
Declare Function GetKeyState Lib "user32" Alias "GetKeyState" (ByVal nVirtKey As Long) As Integer
Declare Function GetAsyncKeyState Lib "user32" Alias "GetAsyncKeyState" (ByVal vKey As Long) As Integer
Declare Function GetKeyboardState Lib "user32" Alias "GetKeyboardState" (pbKeyState As Byte) As Long
Declare Function SetKeyboardState Lib "user32" Alias "SetKeyboardState" (lppbKeyState As Byte) As Long
Declare Function GetKeyboardType Lib "user32" Alias "GetKeyboardType" (ByVal nTypeFlag As Long) As Long
Declare Function GetKeyNameText Lib "user32" Alias "GetKeyNameTextA" (ByVal lParam As Long, ByVal lpBuffer As String, ByVal nSize As Long) As Long

Declare Function ToAscii Lib "user32" Alias "ToAscii" (ByVal uVirtKey As Long, ByVal uScanCode As Long, lpbKeyState As Byte, lpwTransKey As Long, ByVal fuState As Long) As Long
Declare Function ToUnicode Lib "user32" Alias "ToUnicode" (ByVal wVirtKey As Long, ByVal wScanCode As Long, lpKeyState As Byte, ByVal pwszBuff As String, ByVal cchBuff As Long, ByVal wFlags As Long) As Long

Declare Function OemKeyScan Lib "user32" Alias "OemKeyScan" (ByVal wOemChar As Long) As Long
Declare Function VkKeyScan Lib "user32" Alias "VkKeyScanA" (ByVal cChar As Byte) As Integer

public const int KEYEVENTF_EXTENDEDKEY =  H1
public const int KEYEVENTF_KEYUP =  H2

Declare Sub keybd_event Lib "user32" Alias "keybd_event" (ByVal bVk As Byte, ByVal bScan As Byte, ByVal dwFlags As Long, ByVal dwExtraInfo As Long)

public const int MOUSEEVENTF_MOVE =  H1 //  mouse move
public const int MOUSEEVENTF_LEFTDOWN =  H2 //  left button down
public const int MOUSEEVENTF_LEFTUP =  H4 //  left button up
public const int MOUSEEVENTF_RIGHTDOWN =  H8 //  right button down
public const int MOUSEEVENTF_RIGHTUP =  H10 //  right button up
public const int MOUSEEVENTF_MIDDLEDOWN =  H20 //  middle button down
public const int MOUSEEVENTF_MIDDLEUP =  H40 //  middle button up
public const int MOUSEEVENTF_ABSOLUTE =  H8000 //  absolute move

Declare Sub mouse_event Lib "user32" Alias "mouse_event" (ByVal dwFlags As Long, ByVal dx As Long, ByVal dy As Long, ByVal cButtons As Long, ByVal dwExtraInfo As Long)
Declare Function MapVirtualKey Lib "user32" Alias "MapVirtualKeyA" (ByVal wCode As Long, ByVal wMapType As Long) As Long

Declare Function GetInputState Lib "user32" Alias "GetInputState" () As Long
Declare Function GetQueueStatus Lib "user32" Alias "GetQueueStatus" (ByVal fuFlags As Long) As Long
Declare Function GetCapture Lib "user32" Alias "GetCapture" () As Long
Declare Function SetCapture Lib "user32" Alias "SetCapture" (ByVal hwnd As Long) As Long
Declare Function ReleaseCapture Lib "user32" Alias "ReleaseCapture" () As Long

Declare Function MsgWaitForMultipleObjects Lib "user32" Alias "MsgWaitForMultipleObjects" (ByVal nCount As Long, pHandles As Long, ByVal fWaitAll As Long, ByVal dwMilliseconds As Long, ByVal dwWakeMask As Long) As Long

// GetQueueStatus flags
public const int QS_KEY =  H1
public const int QS_MOUSEMOVE =  H2
public const int QS_MOUSEBUTTON =  H4
public const int QS_POSTMESSAGE =  H8
public const int QS_TIMER =  H10
public const int QS_PAINT =  H20
public const int QS_SENDMESSAGE =  H40
public const int QS_HOTKEY =  H80

public const int QS_MOUSE = (QS_MOUSEMOVE Or QS_MOUSEBUTTON)

public const int QS_INPUT = (QS_MOUSE Or QS_KEY)

public const int QS_ALLEVENTS = (QS_INPUT Or QS_POSTMESSAGE Or QS_TIMER Or QS_PAINT Or QS_HOTKEY)

public const int QS_ALLINPUT = (QS_SENDMESSAGE Or QS_PAINT Or QS_TIMER Or QS_POSTMESSAGE Or QS_MOUSEBUTTON Or QS_MOUSEMOVE Or QS_HOTKEY Or QS_KEY)

// Windows Functions
Declare Function KillTimer Lib "user32" Alias "KillTimer" (ByVal hwnd As Long, ByVal nIDEvent As Long) As Long

Declare Function IsWindowUnicode Lib "user32" Alias "IsWindowUnicode" (ByVal hwnd As Long) As Long

Declare Function EnableWindow Lib "user32" Alias "EnableWindow" (ByVal hwnd As Long, ByVal fEnable As Long) As Long
Declare Function IsWindowEnabled Lib "user32" Alias "IsWindowEnabled" (ByVal hwnd As Long) As Long

Declare Function LoadAccelerators Lib "user32" Alias "LoadAcceleratorsA" (ByVal hInstance As Long, ByVal lpTableName As String) As Long
Declare Function CreateAcceleratorTable Lib "user32" Alias "CreateAcceleratorTableA" (lpaccl As ACCEL, ByVal cEntries As Long) As Long
Declare Function DestroyAcceleratorTable Lib "user32" Alias "DestroyAcceleratorTable" (ByVal haccel As Long) As Long
Declare Function CopyAcceleratorTable Lib "user32" Alias "CopyAcceleratorTableA" (ByVal hAccelSrc As Long, lpAccelDst As ACCEL, ByVal cAccelEntries As Long) As Long
Declare Function TranslateAccelerator Lib "user32" Alias "TranslateAcceleratorA" (ByVal hwnd As Long, ByVal hAccTable As Long, lpMsg As MSG) As Long

// GetSystemMetrics() codes
public const int SM_CXSCREEN = 0
public const int SM_CYSCREEN = 1
public const int SM_CXVSCROLL = 2
public const int SM_CYHSCROLL = 3
public const int SM_CYCAPTION = 4
public const int SM_CXBORDER = 5
public const int SM_CYBORDER = 6
public const int SM_CXDLGFRAME = 7
public const int SM_CYDLGFRAME = 8
public const int SM_CYVTHUMB = 9
public const int SM_CXHTHUMB = 10
public const int SM_CXICON = 11
public const int SM_CYICON = 12
public const int SM_CXCURSOR = 13
public const int SM_CYCURSOR = 14
public const int SM_CYMENU = 15
public const int SM_CXFULLSCREEN = 16
public const int SM_CYFULLSCREEN = 17
public const int SM_CYKANJIWINDOW = 18
public const int SM_MOUSEPRESENT = 19
public const int SM_CYVSCROLL = 20
public const int SM_CXHSCROLL = 21
public const int SM_DEBUG = 22
public const int SM_SWAPBUTTON = 23
public const int SM_RESERVED1 = 24
public const int SM_RESERVED2 = 25
public const int SM_RESERVED3 = 26
public const int SM_RESERVED4 = 27
public const int SM_CXMIN = 28
public const int SM_CYMIN = 29
public const int SM_CXSIZE = 30
public const int SM_CYSIZE = 31
public const int SM_CXFRAME = 32
public const int SM_CYFRAME = 33
public const int SM_CXMINTRACK = 34
public const int SM_CYMINTRACK = 35
public const int SM_CXDOUBLECLK = 36
public const int SM_CYDOUBLECLK = 37
public const int SM_CXICONSPACING = 38
public const int SM_CYICONSPACING = 39
public const int SM_MENUDROPALIGNMENT = 40
public const int SM_PENWINDOWS = 41
public const int SM_DBCSENABLED = 42
public const int SM_CMOUSEBUTTONS = 43
public const int SM_CMETRICS = 44
public const int SM_CXSIZEFRAME = SM_CXFRAME
public const int SM_CYSIZEFRAME = SM_CYFRAME
public const int SM_CXFIXEDFRAME = SM_CXDLGFRAME 
public const int SM_CYFIXEDFRAME = SM_CYDLGFRAME 

Declare Function GetSystemMetrics Lib "user32" Alias "GetSystemMetrics" (ByVal nIndex As Long) As Long

Declare Function LoadMenu Lib "user32" Alias "LoadMenuA" (ByVal hInstance As Long, ByVal lpString As String) As Long
Declare Function LoadMenuIndirect Lib "user32" Alias "LoadMenuIndirectA" (ByVal lpMenuTemplate As Long) As Long
Declare Function GetMenu Lib "user32" Alias "GetMenu" (ByVal hwnd As Long) As Long
Declare Function SetMenu Lib "user32" Alias "SetMenu" (ByVal hwnd As Long, ByVal hMenu As Long) As Long
Declare Function HiliteMenuItem Lib "user32" Alias "HiliteMenuItem" (ByVal hwnd As Long, ByVal hMenu As Long, ByVal wIDHiliteItem As Long, ByVal wHilite As Long) As Long
Declare Function GetMenuString Lib "user32" Alias "GetMenuStringA" (ByVal hMenu As Long, ByVal wIDItem As Long, ByVal lpString As String, ByVal nMaxCount As Long, ByVal wFlag As Long) As Long
Declare Function GetMenuState Lib "user32" Alias "GetMenuState" (ByVal hMenu As Long, ByVal wID As Long, ByVal wFlags As Long) As Long
Declare Function DrawMenuBar Lib "user32" Alias "DrawMenuBar" (ByVal hwnd As Long) As Long
Declare Function GetSystemMenu Lib "user32" Alias "GetSystemMenu" (ByVal hwnd As Long, ByVal bRevert As Long) As Long
Declare Function CreateMenu Lib "user32" Alias "CreateMenu" () As Long
Declare Function CreatePopupMenu Lib "user32" Alias "CreatePopupMenu" () As Long
Declare Function DestroyMenu Lib "user32" Alias "DestroyMenu" (ByVal hMenu As Long) As Long
Declare Function CheckMenuItem Lib "user32" Alias "CheckMenuItem" (ByVal hMenu As Long, ByVal wIDCheckItem As Long, ByVal wCheck As Long) As Long
Declare Function EnableMenuItem Lib "user32" Alias "EnableMenuItem" (ByVal hMenu As Long, ByVal wIDEnableItem As Long, ByVal wEnable As Long) As Long
Declare Function GetSubMenu Lib "user32" Alias "GetSubMenu" (ByVal hMenu As Long, ByVal nPos As Long) As Long
Declare Function GetMenuItemID Lib "user32" Alias "GetMenuItemID" (ByVal hMenu As Long, ByVal nPos As Long) As Long
Declare Function GetMenuItemCount Lib "user32" Alias "GetMenuItemCount" (ByVal hMenu As Long) As Long

Declare Function InsertMenu Lib "user32" Alias "InsertMenuA" (ByVal hMenu As Long, ByVal nPosition As Long, ByVal wFlags As Long, ByVal wIDNewItem As Long, ByVal lpNewItem As Any) As Long
Declare Function AppendMenu Lib "user32" Alias "AppendMenuA" (ByVal hMenu As Long, ByVal wFlags As Long, ByVal wIDNewItem As Long, ByVal lpNewItem As Any) As Long
Declare Function ModifyMenu Lib "user32" Alias "ModifyMenuA" (ByVal hMenu As Long, ByVal nPosition As Long, ByVal wFlags As Long, ByVal wIDNewItem As Long, ByVal lpString As Any) As Long
Declare Function RemoveMenu Lib "user32" Alias "RemoveMenu" (ByVal hMenu As Long, ByVal nPosition As Long, ByVal wFlags As Long) As Long
Declare Function DeleteMenu Lib "user32" Alias "DeleteMenu" (ByVal hMenu As Long, ByVal nPosition As Long, ByVal wFlags As Long) As Long
Declare Function SetMenuItemBitmaps Lib "user32" Alias "SetMenuItemBitmaps" (ByVal hMenu As Long, ByVal nPosition As Long, ByVal wFlags As Long, ByVal hBitmapUnchecked As Long, ByVal hBitmapChecked As Long) As Long
Declare Function GetMenuCheckMarkDimensions Lib "user32" Alias "GetMenuCheckMarkDimensions" () As Long
Declare Function TrackPopupMenu Lib "user32" Alias "TrackPopupMenu" (ByVal hMenu As Long, ByVal wFlags As Long, ByVal x As Long, ByVal y As Long, ByVal nReserved As Long, ByVal hwnd As Long, lprc As Rect) As Long

// Flags for TrackPopupMenu
public const int TPM_LEFTBUTTON =  H0 
public const int TPM_RIGHTBUTTON =  H2 
public const int TPM_LEFTALIGN =  H0 
public const int TPM_CENTERALIGN =  H4 
public const int TPM_RIGHTALIGN =  H8 

Declare Function DrawIcon Lib "user32" Alias "DrawIcon" (ByVal hdc As Long, ByVal x As Long, ByVal y As Long, ByVal hIcon As Long) As Long

// DrawText() Format Flags
public const int DT_TOP =  H0
public const int DT_LEFT =  H0
public const int DT_CENTER =  H1
public const int DT_RIGHT =  H2
public const int DT_VCENTER =  H4
public const int DT_BOTTOM =  H8
public const int DT_WORDBREAK =  H10
public const int DT_SINGLELINE =  H20
public const int DT_EXPANDTABS =  H40
public const int DT_TABSTOP =  H80
public const int DT_NOCLIP =  H100
public const int DT_EXTERNALLEADING =  H200
public const int DT_CALCRECT =  H400
public const int DT_NOPREFIX =  H800
public const int DT_INTERNAL =  H1000

Declare Function DrawText Lib "user32" Alias "DrawTextA" (ByVal hdc As Long, ByVal lpStr As String, ByVal nCount As Long, lpRect As RECT, ByVal wFormat As Long) As Long
Declare Function TabbedTextOut Lib "user32" Alias "TabbedTextOutA" (ByVal hdc As Long, ByVal x As Long, ByVal y As Long, ByVal lpString As String, ByVal nCount As Long, ByVal nTabPositions As Long, lpnTabStopPositions As Long, ByVal nTabOrigin As Long) As Long
Declare Function GetTabbedTextExtent Lib "user32" Alias "GetTabbedTextExtentA" (ByVal hdc As Long, ByVal lpString As String, ByVal nCount As Long, ByVal nTabPositions As Long, lpnTabStopPositions As Long) As Long

Declare Function UpdateWindow Lib "user32" Alias "UpdateWindow" (ByVal hwnd As Long) As Long
Declare Function SetActiveWindow Lib "user32" Alias "SetActiveWindow" (ByVal hwnd As Long) As Long
Declare Function GetForegroundWindow Lib "user32" Alias "GetForegroundWindow" () As Long
Declare Function SetForegroundWindow Lib "user32" Alias "SetForegroundWindow" (ByVal hwnd As Long) As Long
Declare Function WindowFromDC Lib "user32" Alias "WindowFromDC" (ByVal hdc As Long) As Long

Declare Function GetDC Lib "user32" Alias "GetDC" (ByVal hwnd As Long) As Long
Declare Function GetDCEx Lib "user32" Alias "GetDCEx" (ByVal hwnd As Long, ByVal hrgnclip As Long, ByVal fdwOptions As Long) As Long

public const int DCX_WINDOW =  H1 
public const int DCX_CACHE =  H2 
public const int DCX_NORESETATTRS =  H4 
public const int DCX_CLIPCHILDREN =  H8 
public const int DCX_CLIPSIBLINGS =  H10 
public const int DCX_PARENTCLIP =  H20 

public const int DCX_EXCLUDERGN =  H40 
public const int DCX_INTERSECTRGN =  H80 

public const int DCX_EXCLUDEUPDATE =  H100 
public const int DCX_INTERSECTUPDATE =  H200 

public const int DCX_LOCKWINDOWUPDATE =  H400 

public const int DCX_NORECOMPUTE =  H100000
public const int DCX_VALIDATE =  H200000

Declare Function GetWindowDC Lib "user32" Alias "GetWindowDC" (ByVal hwnd As Long) As Long
Declare Function ReleaseDC Lib "user32" Alias "ReleaseDC" (ByVal hwnd As Long, ByVal hdc As Long) As Long

Declare Function BeginPaint Lib "user32" Alias "BeginPaint" (ByVal hwnd As Long, lpPaint As PAINTSTRUCT) As Long
Declare Function EndPaint Lib "user32" Alias "EndPaint" (ByVal hwnd As Long, lpPaint As PAINTSTRUCT) As Long
Declare Function GetUpdateRect Lib "user32" Alias "GetUpdateRect" (ByVal hwnd As Long, lpRect As RECT, ByVal bErase As Long) As Long
Declare Function GetUpdateRgn Lib "user32" Alias "GetUpdateRgn" (ByVal hwnd As Long, ByVal hRgn As Long, ByVal fErase As Long) As Long
Declare Function ExcludeUpdateRgn Lib "user32" Alias "ExcludeUpdateRgn" (ByVal hdc As Long, ByVal hwnd As Long) As Long
Declare Function InvalidateRect Lib "user32" Alias "InvalidateRect" (ByVal hwnd As Long, lpRect As RECT, ByVal bErase As Long) As Long
Declare Function ValidateRect Lib "user32" Alias "ValidateRect" (ByVal hwnd As Long, lpRect As RECT) As Long
Declare Function InvalidateRgn Lib "user32" Alias "InvalidateRgn" (ByVal hwnd As Long, ByVal hRgn As Long, ByVal bErase As Long) As Long
Declare Function ValidateRgn Lib "user32" Alias "ValidateRgn" (ByVal hwnd As Long, ByVal hRgn As Long) As Long

Declare Function RedrawWindow Lib "user32" Alias "RedrawWindow" (ByVal hwnd As Long, lprcUpdate As RECT, ByVal hrgnUpdate As Long, ByVal fuRedraw As Long) As Long

public const int RDW_INVALIDATE =  H1
public const int RDW_INTERNALPAINT =  H2
public const int RDW_ERASE =  H4

public const int RDW_VALIDATE =  H8
public const int RDW_NOINTERNALPAINT =  H10
public const int RDW_NOERASE =  H20

public const int RDW_NOCHILDREN =  H40
public const int RDW_ALLCHILDREN =  H80

public const int RDW_UPDATENOW =  H100
public const int RDW_ERASENOW =  H200

public const int RDW_FRAME =  H400
public const int RDW_NOFRAME =  H800

Declare Function LockWindowUpdate Lib "user32" Alias "LockWindowUpdate" (ByVal hwndLock As Long) As Long

Declare Function ScrollWindow Lib "user32" Alias "ScrollWindow" (ByVal hWnd As Long, ByVal XAmount As Long, ByVal YAmount As Long, lpRect As RECT, lpClipRect As RECT) As Long
Declare Function ScrollDC Lib "user32" Alias "ScrollDC" (ByVal hdc As Long, ByVal dx As Long, ByVal dy As Long, lprcScroll As RECT, lprcClip As RECT, ByVal hrgnUpdate As Long, lprcUpdate As RECT) As Long
Declare Function ScrollWindowEx Lib "user32" Alias "ScrollWindowEx" (ByVal hwnd As Long, ByVal dx As Long, ByVal dy As Long, lprcScroll As RECT, lprcClip As RECT, ByVal hrgnUpdate As Long, lprcUpdate As RECT, ByVal fuScroll As Long) As Long

public const int SW_SCROLLCHILDREN =  H1
public const int SW_INVALIDATE =  H2
public const int SW_ERASE =  H4

Declare Function SetScrollPos Lib "user32" Alias "SetScrollPos" (ByVal hwnd As Long, ByVal nBar As Long, ByVal nPos As Long, ByVal bRedraw As Long) As Long
Declare Function GetScrollPos Lib "user32" Alias "GetScrollPos" (ByVal hwnd As Long, ByVal nBar As Long) As Long
Declare Function SetScrollRange Lib "user32" Alias "SetScrollRange" (ByVal hwnd As Long, ByVal nBar As Long, ByVal nMinPos As Long, ByVal nMaxPos As Long, ByVal bRedraw As Long) As Long
Declare Function GetScrollRange Lib "user32" Alias "GetScrollRange" (ByVal hwnd As Long, ByVal nBar As Long, lpMinPos As Long, lpMaxPos As Long) As Long
Declare Function ShowScrollBar Lib "user32" Alias "ShowScrollBar" (ByVal hwnd As Long, ByVal wBar As Long, ByVal bShow As Long) As Long
Declare Function EnableScrollBar Lib "user32" Alias "EnableScrollBar" (ByVal hwnd As Long, ByVal wSBflags As Long, ByVal wArrows As Long) As Long

// EnableScrollBar() flags
public const int ESB_ENABLE_BOTH =  H0
public const int ESB_DISABLE_BOTH =  H3

public const int ESB_DISABLE_LEFT =  H1
public const int ESB_DISABLE_RIGHT =  H2

public const int ESB_DISABLE_UP =  H1
public const int ESB_DISABLE_DOWN =  H2

public const int ESB_DISABLE_LTUP = ESB_DISABLE_LEFT
public const int ESB_DISABLE_RTDN = ESB_DISABLE_RIGHT

Declare Function SetProp Lib "user32" Alias "SetPropA" (ByVal hwnd As Long, ByVal lpString As String, ByVal hData As Long) As Long
Declare Function GetProp Lib "user32" Alias "GetPropA" (ByVal hwnd As Long, ByVal lpString As String) As Long
Declare Function RemoveProp Lib "user32" Alias "RemovePropA" (ByVal hwnd As Long, ByVal lpString As String) As Long

Declare Function SetWindowText Lib "user32" Alias "SetWindowTextA" (ByVal hwnd As Long, ByVal lpString As String) As Long
Declare Function GetWindowText Lib "user32" Alias "GetWindowTextA" (ByVal hwnd As Long, ByVal lpString As String, ByVal cch As Long) As Long
Declare Function GetWindowTextLength Lib "user32" Alias "GetWindowTextLengthA" (ByVal hwnd As Long) As Long

Declare Function GetClientRect Lib "user32" Alias "GetClientRect" (ByVal hwnd As Long, lpRect As RECT) As Long
Declare Function GetWindowRect Lib "user32" Alias "GetWindowRect" (ByVal hwnd As Long, lpRect As RECT) As Long
Declare Function AdjustWindowRect Lib "user32" Alias "AdjustWindowRect" (lpRect As RECT, ByVal dwStyle As Long, ByVal bMenu As Long) As Long
Declare Function AdjustWindowRectEx Lib "user32" Alias "AdjustWindowRectEx" (lpRect As RECT, ByVal dsStyle As Long, ByVal bMenu As Long, ByVal dwEsStyle As Long) As Long

// MessageBox() Flags
public const int MB_OK =  H0 
public const int MB_OKCANCEL =  H1 
public const int MB_ABORTRETRYIGNORE =  H2 
public const int MB_YESNOCANCEL =  H3 
public const int MB_YESNO =  H4 
public const int MB_RETRYCANCEL =  H5 

public const int MB_ICONHAND =  H10 
public const int MB_ICONQUESTION =  H20 
public const int MB_ICONEXCLAMATION =  H30 
public const int MB_ICONASTERISK =  H40 

public const int MB_ICONINFORMATION = MB_ICONASTERISK
public const int MB_Ipublic const intOP = MB_ICONHAND

public const int MB_DEFBUTTON1 =  H0 
public const int MB_DEFBUTTON2 =  H100 
public const int MB_DEFBUTTON3 =  H200 

public const int MB_APPLMODAL =  H0 
public const int MB_SYSTEMMODAL =  H1000 
public const int MB_TASKMODAL =  H2000 

public const int MB_NOFOCUS =  H8000 
public const int MB_SETFOREGROUND =  H10000
public const int MB_DEFAULT_DESKTOP_ONLY =  H20000

public const int MB_TYPEMASK =  HF 
public const int MB_ICONMASK =  HF0 
public const int MB_DEFMASK =  HF00 
public const int MB_MODEMASK =  H3000 
public const int MB_MISCMASK =  HC000 

Declare Function MessageBox Lib "user32" Alias "MessageBoxA" (ByVal hwnd As Long, ByVal lpText As String, ByVal lpCaption As String, ByVal wType As Long) As Long
Declare Function MessageBoxEx Lib "user32" Alias "MessageBoxExA" (ByVal hwnd As Long, ByVal lpText As String, ByVal lpCaption As String, ByVal uType As Long, ByVal wLanguageId As Long) As Long
Declare Function MessageBeep Lib "user32" Alias "MessageBeep" (ByVal wType As Long) As Long

Declare Function ShowCursor Lib "user32" Alias "ShowCursor" (ByVal bShow As Long) As Long
Declare Function SetCursorPos Lib "user32" Alias "SetCursorPos" (ByVal x As Long, ByVal y As Long) As Long
Declare Function SetCursor Lib "user32" Alias "SetCursor" (ByVal hCursor As Long) As Long
Declare Function GetCursorPos Lib "user32" Alias "GetCursorPos" (lpPoint As POINTAPI) As Long
Declare Function ClipCursor Lib "user32" Alias "ClipCursor" (lpRect As Any) As Long
Declare Function GetCursor Lib "user32" Alias "GetCursor" () As Long
Declare Function GetClipCursor Lib "user32" Alias "GetClipCursor" (lprc As RECT) As Long

Declare Function CreateCaret Lib "user32" Alias "CreateCaret" (ByVal hwnd As Long, ByVal hBitmap As Long, ByVal nWidth As Long, ByVal nHeight As Long) As Long
Declare Function GetCaretBlinkTime Lib "user32" Alias "GetCaretBlinkTime" () As Long
Declare Function SetCaretBlinkTime Lib "user32" Alias "SetCaretBlinkTime" (ByVal wMSeconds As Long) As Long
Declare Function DestroyCaret Lib "user32" Alias "DestroyCaret" () As Long
Declare Function HideCaret Lib "user32" Alias "HideCaret" (ByVal hwnd As Long) As Long
Declare Function ShowCaret Lib "user32" Alias "ShowCaret" (ByVal hwnd As Long) As Long
Declare Function SetCaretPos Lib "user32" Alias "SetCaretPos" (ByVal x As Long, ByVal y As Long) As Long
Declare Function GetCaretPos Lib "user32" Alias "GetCaretPos" (lpPoint As POINTAPI) As Long

Declare Function ClientToScreen Lib "user32" Alias "ClientToScreen" (ByVal hwnd As Long, lpPoint As POINTAPI) As Long
Declare Function ScreenToClient Lib "user32" Alias "ScreenToClient" (ByVal hwnd As Long, lpPoint As POINTAPI) As Long

Declare Function MapWindowPoints Lib "user32" Alias "MapWindowPoints" (ByVal hwndFrom As Long, ByVal hwndTo As Long, lppt As Any, ByVal cPoints As Long) As Long
Declare Function WindowFromPoint Lib "user32" Alias "WindowFromPoint" (ByVal xPoint As Long, ByVal yPoint As Long) As Long
Declare Function ChildWindowFromPoint Lib "user32" Alias "ChildWindowFromPoint" (ByVal hWnd As Long, ByVal xPoint As Long, ByVal yPoint As Long) As Long
Declare Function ChildWindowFromPointEx Lib "user32" Alias "ChildWindowFromPointEx" (ByVal hWnd As Long, ByVal xPoint As Long, ByVal yPoint As Long, ByVal un As Long) As Long

// Color Types
public const int CTLCOLOR_MSGBOX = 0
public const int CTLCOLOR_EDIT = 1
public const int CTLCOLOR_LISTBOX = 2
public const int CTLCOLOR_BTN = 3
public const int CTLCOLOR_DLG = 4
public const int CTLCOLOR_SCROLLBAR = 5
public const int CTLCOLOR_STATIC = 6
public const int CTLCOLOR_MAX = 8   //  three bits max

public const int COLOR_SCROLLBAR = 0
public const int COLOR_BACKGROUND = 1
public const int COLOR_ACTIVECAPTION = 2
public const int COLOR_INACTIVECAPTION = 3
public const int COLOR_MENU = 4
public const int COLOR_WINDOW = 5
public const int COLOR_WINDOWFRAME = 6
public const int COLOR_MENUTEXT = 7
public const int COLOR_WINDOWTEXT = 8
public const int COLOR_CAPTIONTEXT = 9
public const int COLOR_ACTIVEBORDER = 10
public const int COLOR_INACTIVEBORDER = 11
public const int COLOR_APPWORKSPACE = 12
public const int COLOR_HIGHLIGHT = 13
public const int COLOR_HIGHLIGHTTEXT = 14
public const int COLOR_BTNFACE = 15
public const int COLOR_BTNSHADOW = 16
public const int COLOR_GRAYTEXT = 17
public const int COLOR_BTNTEXT = 18
public const int COLOR_INACTIVECAPTIONTEXT = 19
public const int COLOR_BTNHIGHLIGHT = 20

Declare Function GetSysColor Lib "user32" Alias "GetSysColor" (ByVal nIndex As Long) As Long
Declare Function SetSysColors Lib "user32" Alias "SetSysColors" (ByVal nChanges As Long, lpSysColor As Long, lpColorValues As Long) As Long

Declare Function DrawFocusRect Lib "user32" Alias "DrawFocusRect" (ByVal hdc As Long, lpRect As RECT) As Long
Declare Function FillRect Lib "user32" Alias "FillRect" (ByVal hdc As Long, lpRect As RECT, ByVal hBrush As Long) As Long
Declare Function FrameRect Lib "user32" Alias "FrameRect" (ByVal hdc As Long, lpRect As RECT, ByVal hBrush As Long) As Long
Declare Function InvertRect Lib "user32" Alias "InvertRect" (ByVal hdc As Long, lpRect As RECT) As Long
Declare Function SetRect Lib "user32" Alias "SetRect" (lpRect As RECT, ByVal X1 As Long, ByVal Y1 As Long, ByVal X2 As Long, ByVal Y2 As Long) As Long
Declare Function SetRectEmpty Lib "user32" Alias "SetRectEmpty" (lpRect As RECT) As Long
Declare Function CopyRect Lib "user32" Alias "CopyRect" (lpDestRect As RECT, lpSourceRect As RECT) As Long
Declare Function InflateRect Lib "user32" Alias "InflateRect" (lpRect As RECT, ByVal x As Long, ByVal y As Long) As Long
Declare Function IntersectRect Lib "user32" Alias "IntersectRect" (lpDestRect As RECT, lpSrc1Rect As RECT, lpSrc2Rect As RECT) As Long
Declare Function UnionRect Lib "user32" Alias "UnionRect" (lpDestRect As RECT, lpSrc1Rect As RECT, lpSrc2Rect As RECT) As Long
Declare Function SubtractRect Lib "user32" Alias "SubtractRect" (lprcDst As RECT, lprcSrc1 As RECT, lprcSrc2 As RECT) As Long
Declare Function OffsetRect Lib "user32" Alias "OffsetRect" (lpRect As RECT, ByVal x As Long, ByVal y As Long) As Long
Declare Function IsRectEmpty Lib "user32" Alias "IsRectEmpty" (lpRect As RECT) As Long
Declare Function EqualRect Lib "user32" Alias "EqualRect" (lpRect1 As RECT, lpRect2 As RECT) As Long
Declare Function PtInRect Lib "user32" Alias "PtInRect" (lpRect As RECT, ByVal ptX as Long, ByVal ptY as Long) As Long

Declare Function GetWindowWord Lib "user32" Alias "GetWindowWord" (ByVal hwnd As Long, ByVal nIndex As Long) As Integer
Declare Function SetWindowWord Lib "user32" Alias "SetWindowWord" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal wNewWord As Long) As Long
Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
Declare Function GetClassWord Lib "user32" Alias "GetClassWord" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
Declare Function SetClassWord Lib "user32" Alias "SetClassWord" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal wNewWord As Long) As Long
Declare Function GetClassLong Lib "user32" Alias "GetClassLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
Declare Function SetClassLong Lib "user32" Alias "SetClassLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
Declare Function GetDesktopWindow Lib "user32" Alias "GetDesktopWindow" () As Long

Declare Function GetParent Lib "user32" Alias "GetParent" (ByVal hwnd As Long) As Long
Declare Function SetParent Lib "user32" Alias "SetParent" (ByVal hWndChild As Long, ByVal hWndNewParent As Long) As Long
Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long

Declare Function GetClassName Lib "user32" Alias "GetClassNameA" (ByVal hwnd As Long, ByVal lpClassName As String, ByVal nMaxCount As Long) As Long
Declare Function GetTopWindow Lib "user32" Alias "GetTopWindow" (ByVal hwnd As Long) As Long
Declare Function GetNextWindow Lib "user32" Alias "GetWindow" (ByVal hwnd As Long, ByVal wFlag As Long) As Long

Declare Function GetWindowThreadProcessId Lib "user32" Alias "GetWindowThreadProcessId" (ByVal hwnd As Long, lpdwProcessId As Long) As Long

Declare Function GetLastActivePopup Lib "user32" Alias "GetLastActivePopup" (ByVal hwndOwnder As Long) As Long

// GetWindow() public const intants
public const int GW_HWNDFIRST = 0
public const int GW_HWNDLAST = 1
public const int GW_HWNDNEXT = 2
public const int GW_HWNDPREV = 3
public const int GW_OWNER = 4
public const int GW_CHILD = 5
public const int GW_MAX = 5

Declare Function GetWindow Lib "user32" Alias "GetWindow" (ByVal hwnd As Long, ByVal wCmd As Long) As Long
Declare Function UnhookWindowsHookEx Lib "user32" Alias "UnhookWindowsHookEx" (ByVal hHook As Long) As Long
Declare Function CallNextHookEx Lib "user32" Alias "CallNextHookEx" (ByVal hHook As Long, ByVal ncode As Long, ByVal wParam As Long, lParam As Any) As Long

// Menu flags for Add/Check/EnableMenuItem()
public const int MF_INSERT =  H0 
public const int MF_CHANGE =  H80 
public const int MF_APPEND =  H100 
public const int MF_DELETE =  H200 
public const int MF_REMOVE =  H1000 

public const int MF_BYCOMMAND =  H0 
public const int MF_BYPOSITION =  H400 

public const int MF_SEPARATOR =  H800 

public const int MF_ENABLED =  H0 
public const int MF_GRAYED =  H1 
public const int MF_DISABLED =  H2 

public const int MF_UNCHECKED =  H0 
public const int MF_CHECKED =  H8 
public const int MF_USECHECKBITMAPS =  H200 

public const int MF_STRING =  H0 
public const int MF_BITMAP =  H4 
public const int MF_OWNERDRAW =  H100 

public const int MF_POPUP =  H10 
public const int MF_MENUBARBREAK =  H20 
public const int MF_MENUBREAK =  H40 

public const int MF_UNHILITE =  H0 
public const int MF_HILITE =  H80 

public const int MF_SYSMENU =  H2000 
public const int MF_HELP =  H4000 
public const int MF_MOUSESELECT =  H8000 

// Menu item resource format
Type MENUITEMTEMPLATEHEADER
        versionNumber As Integer
        offset As Integer
End Type

Type MENUITEMTEMPLATE
        mtOption As Integer
        mtID As Integer
        mtString As Byte
End Type

public const int MF_END =  H80

// System Menu Command Values


public const int SC_SIZE =  HF000 
public const int SC_MOVE =  HF010 
public const int SC_MINIMIZE =  HF020 
public const int SC_MAXIMIZE =  HF030 
public const int SC_NEXTWINDOW =  HF040 
public const int SC_PREVWINDOW =  HF050 
public const int SC_CLOSE =  HF060 
public const int SC_VSCROLL =  HF070 
public const int SC_HSCROLL =  HF080 
public const int SC_MOUSEMENU =  HF090 
public const int SC_KEYMENU =  HF100 
public const int SC_ARRANGE =  HF110 
public const int SC_RESTORE =  HF120 
public const int SC_TASKLIST =  HF130 
public const int SC_SCREENSAVE =  HF140 
public const int SC_HOTKEY =  HF150 

// Obsolete names
public const int SC_ICON = SC_MINIMIZE
public const int SC_ZOOM = SC_MAXIMIZE

// Resource Loading Routines
Declare Function LoadBitmap Lib "user32" Alias "LoadBitmapA" (ByVal hInstance As Long, ByVal lpBitmapName As String) As Long
Declare Function LoadCursor Lib "user32" Alias "LoadCursorA" (ByVal hInstance As Long, ByVal lpCursorName As String) As Long
Declare Function CreateCursor Lib "user32" Alias "CreateCursor" (ByVal hInstance As Long, ByVal nXhotspot As Long, ByVal nYhotspot As Long, ByVal nWidth As Long, ByVal nHeight As Long, lpANDbitPlane As Any, lpXORbitPlane As Any) As Long
Declare Function DestroyCursor Lib "user32" Alias "DestroyCursor" (ByVal hCursor As Long) As Long
Declare Function CopyCursor Lib "user32" Alias "CopyCursor" (ByVal hcur As Long) As Long

// Standard Cursor IDs
public const int IDC_ARROW = 32512 
public const int IDC_IBEAM = 32513 
public const int IDC_WAIT = 32514 
public const int IDC_CROSS = 32515 
public const int IDC_UPARROW = 32516 
public const int IDC_SIZE = 32640 
public const int IDC_ICON = 32641 
public const int IDC_SIZENWSE = 32642 
public const int IDC_SIZENESW = 32643 
public const int IDC_SIZEWE = 32644 
public const int IDC_SIZENS = 32645 
public const int IDC_SIZEALL = 32646 
public const int IDC_NO = 32648 
public const int IDC_APPSTARTING = 32650 

Type ICONINFO
        fIcon As Long
        xHotspot As Long
        yHotspot As Long
        hbmMask As Long
        hbmColor As Long
End Type

Declare Function LoadIcon Lib "user32" Alias "LoadIconA" (ByVal hInstance As Long, ByVal lpIconName As String) As Long
Declare Function CreateIcon Lib "user32" Alias "CreateIcon" (ByVal hInstance As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal nPlanes As Byte, ByVal nBitsPixel As Byte, lpANDbits As Byte, lpXORbits As Byte) As Long
Declare Function DestroyIcon Lib "user32" Alias "DestroyIcon" (ByVal hIcon As Long) As Long
Declare Function LookupIconIdFromDirectory Lib "user32" Alias "LookupIconIdFromDirectory" (presbits As Byte, ByVal fIcon As Long) As Long
Declare Function CreateIconIndirect Lib "user32" Alias "CreateIconIndirect" (piconinfo As ICONINFO) As Long
Declare Function CopyIcon Lib "user32" Alias "CopyIcon" (ByVal hIcon As Long) As Long
Declare Function GetIconInfo Lib "user32" Alias "GetIconInfo" (ByVal hIcon As Long, piconinfo As ICONINFO) As Long

// OEM Resource Ordinal Numbers
public const int OBM_CLOSE = 32754
public const int OBM_UPARROW = 32753
public const int OBM_DNARROW = 32752
public const int OBM_RGARROW = 32751
public const int OBM_LFARROW = 32750
public const int OBM_REDUCE = 32749
public const int OBM_ZOOM = 32748
public const int OBM_RESTORE = 32747
public const int OBM_REDUCED = 32746
public const int OBM_ZOOMD = 32745
public const int OBM_RESTORED = 32744
public const int OBM_UPARROWD = 32743
public const int OBM_DNARROWD = 32742
public const int OBM_RGARROWD = 32741
public const int OBM_LFARROWD = 32740
public const int OBM_MNARROW = 32739
public const int OBM_COMBO = 32738
public const int OBM_UPARROWI = 32737
public const int OBM_DNARROWI = 32736
public const int OBM_RGARROWI = 32735
public const int OBM_LFARROWI = 32734

public const int OBM_OLD_CLOSE = 32767
public const int OBM_SIZE = 32766
public const int OBM_OLD_UPARROW = 32765
public const int OBM_OLD_DNARROW = 32764
public const int OBM_OLD_RGARROW = 32763
public const int OBM_OLD_LFARROW = 32762
public const int OBM_BTSIZE = 32761
public const int OBM_CHECK = 32760
public const int OBM_CHECKBOXES = 32759
public const int OBM_BTNCORNERS = 32758
public const int OBM_OLD_REDUCE = 32757
public const int OBM_OLD_ZOOM = 32756
public const int OBM_OLD_RESTORE = 32755

public const int OCR_NORMAL = 32512
public const int OCR_IBEAM = 32513
public const int OCR_WAIT = 32514
public const int OCR_CROSS = 32515
public const int OCR_UP = 32516
public const int OCR_SIZE = 32640
public const int OCR_ICON = 32641
public const int OCR_SIZENWSE = 32642
public const int OCR_SIZENESW = 32643
public const int OCR_SIZEWE = 32644
public const int OCR_SIZENS = 32645
public const int OCR_SIZEALL = 32646
public const int OCR_ICOCUR = 32647
public const int OCR_NO = 32648 // not in win3.1

public const int OIC_SAMPLE = 32512
public const int OIC_HAND = 32513
public const int OIC_QUES = 32514
public const int OIC_BANG = 32515
public const int OIC_NOTE = 32516

public const int ORD_LANGDRIVER = 1 //  The ordinal number for the entry point of
                                //  language drivers.

// Standard Icon IDs
public const int IDI_APPLICATION = 32512 
public const int IDI_HAND = 32513 
public const int IDI_QUESTION = 32514 
public const int IDI_EXCLAMATION = 32515 
public const int IDI_ASTERISK = 32516 

Declare Function LoadString Lib "user32" Alias "LoadStringA" (ByVal hInstance As Long, ByVal wID As Long, ByVal lpBuffer As String, ByVal nBufferMax As Long) As Long

// Dialog Box Command IDs
public const int IDOK = 1
public const int IDCANCEL = 2
public const int IDABORT = 3
public const int IDRETRY = 4
public const int IDIGNORE = 5
public const int IDYES = 6
public const int IDNO = 7

// Control Manager Structures and Definitions

// Edit Control Styles
public const int ES_LEFT =  H0 
public const int ES_CENTER =  H1 
public const int ES_RIGHT =  H2 
public const int ES_MULTILINE =  H4 
public const int ES_UPPERCASE =  H8 
public const int ES_LOWERCASE =  H10 
public const int ES_PASSWORD =  H20 
public const int ES_AUTOVSCROLL =  H40 
public const int ES_AUTOHSCROLL =  H80 
public const int ES_NOHIDESEL =  H100 
public const int ES_OEMCONVERT =  H400 
public const int ES_READONLY =  H800 
public const int ES_WANTRETURN =  H1000 

// Edit Control Notification Codes
public const int EN_SETFOCUS =  H100
public const int EN_KILLFOCUS =  H200
public const int EN_CHANGE =  H300
public const int EN_UPDATE =  H400
public const int EN_ERRSPACE =  H500
public const int EN_MAXTEXT =  H501
public const int EN_HSCROLL =  H601
public const int EN_VSCROLL =  H602

// Edit Control Messages
public const int EM_GETSEL =  HB0
public const int EM_SETSEL =  HB1
public const int EM_GETRECT =  HB2
public const int EM_SETRECT =  HB3
public const int EM_SETRECTNP =  HB4
public const int EM_SCROLL =  HB5
public const int EM_LINESCROLL =  HB6
public const int EM_SCROLLCARET =  HB7
public const int EM_GETMODIFY =  HB8
public const int EM_SETMODIFY =  HB9
public const int EM_GETLINECOUNT =  HBA
public const int EM_LINEINDEX =  HBB

public const int EM_GETTHUMB =  HBE
public const int EM_LINELENGTH =  HC1
public const int EM_REPLACESEL =  HC2
public const int EM_GETLINE =  HC4
public const int EM_LIMITTEXT =  HC5
public const int EM_CANUNDO =  HC6
public const int EM_UNDO =  HC7
public const int EM_FMTLINES =  HC8
public const int EM_LINEFROMCHAR =  HC9
public const int EM_SETTABSTOPS =  HCB
public const int EM_SETPASSWORDCHAR =  HCC
public const int EM_EMPTYUNDOBUFFER =  HCD
public const int EM_GETFIRSTVISIBLELINE =  HCE
public const int EM_SETREADONLY =  HCF
public const int EM_SETWORDBREAKPROC =  HD0
public const int EM_GETWORDBREAKPROC =  HD1
public const int EM_GETPASSWORDCHAR =  HD2

// EDITWORDBREAKPROC code values
public const int WB_LEFT = 0
public const int WB_RIGHT = 1
public const int WB_ISDELIMITER = 2

// Button Control Styles
public const int BS_PUSHBUTTON =  H0 
public const int BS_DEFPUSHBUTTON =  H1 
public const int BS_CHECKBOX =  H2 
public const int BS_AUTOCHECKBOX =  H3 
public const int BS_RADIOBUTTON =  H4 
public const int BS_3STATE =  H5 
public const int BS_AUTO3STATE =  H6 
public const int BS_GROUPBOX =  H7 
public const int BS_USERBUTTON =  H8 
public const int BS_AUTORADIOBUTTON =  H9 
public const int BS_OWNERDRAW =  HB 
public const int BS_LEFTTEXT =  H20 

// User Button Notification Codes
public const int BN_CLICKED = 0
public const int BN_PAINT = 1
public const int BN_HILITE = 2
public const int BN_UNHILITE = 3
public const int BN_DISABLE = 4
public const int BN_DOUBLECLICKED = 5

// Button Control Messages
public const int BM_GETCHECK =  HF0
public const int BM_SETCHECK =  HF1
public const int BM_GETSTATE =  HF2
public const int BM_SETSTATE =  HF3
public const int BM_SETSTYLE =  HF4

// Static Control public const intants
public const int SS_LEFT =  H0 
public const int SS_CENTER =  H1 
public const int SS_RIGHT =  H2 
public const int SS_ICON =  H3 
public const int SS_BLACKRECT =  H4 
public const int SS_GRAYRECT =  H5 
public const int SS_WHITERECT =  H6 
public const int SS_BLACKFRAME =  H7 
public const int SS_GRAYFRAME =  H8 
public const int SS_WHITEFRAME =  H9 
public const int SS_USERITEM =  HA 
public const int SS_SIMPLE =  HB 
public const int SS_LEFTNOWORDWRAP =  HC 
public const int SS_NOPREFIX =  H80           //  Don//t do " " character translation

// Static Control Mesages
public const int STM_SETICON =  H170
public const int STM_GETICON =  H171
public const int STM_MSGMAX =  H172

public const int WC_DIALOG = 8002 

//  Get/SetWindowWord/Long offsets for use with WC_DIALOG windows
public const int DWL_MSGRESULT = 0
public const int DWL_DLGPROC = 4
public const int DWL_USER = 8

// Dialog Manager Routines
Declare Function IsDialogMessage Lib "user32" Alias "IsDialogMessageA" (ByVal hDlg As Long, lpMsg As MSG) As Long
Declare Function MapDialogRect Lib "user32" Alias "MapDialogRect" (ByVal hDlg As Long, lpRect As RECT) As Long
Declare Function DlgDirList Lib "user32" Alias "DlgDirListA" (ByVal hDlg As Long, ByVal lpPathSpec As String, ByVal nIDListBox As Long, ByVal nIDStaticPath As Long, ByVal wFileType As Long) As Long

// DlgDirList, DlgDirListComboBox flags values
public const int DDL_READWRITE =  H0
public const int DDL_READONLY =  H1
public const int DDL_HIDDEN =  H2
public const int DDL_SYSTEM =  H4
public const int DDL_DIRECTORY =  H10
public const int DDL_ARCHIVE =  H20

public const int DDL_POSTMSGS =  H2000
public const int DDL_DRIVES =  H4000
public const int DDL_EXCLUSIVE =  H8000

Declare Function DlgDirSelectEx Lib "user32" Alias "DlgDirSelectExA" (ByVal hWndDlg As Long, ByVal lpszPath As String, ByVal cbPath As Long, ByVal idListBox As Long) As Long
Declare Function DlgDirListComboBox Lib "user32" Alias "DlgDirListComboBoxA" (ByVal hDlg As Long, ByVal lpPathSpec As String, ByVal nIDComboBox As Long, ByVal nIDStaticPath As Long, ByVal wFileType As Long) As Long
Declare Function DlgDirSelectComboBoxEx Lib "user32" Alias "DlgDirSelectComboBoxExA" (ByVal hWndDlg As Long, ByVal lpszPath As String, ByVal cbPath As Long, ByVal idComboBox As Long) As Long

// Dialog Styles
public const int DS_ABSALIGN =  H1 
public const int DS_SYSMODAL =  H2 
public const int DS_LOCALEDIT =  H20          //  Edit items get Local storage.
public const int DS_SETFONT =  H40            //  User specified font for Dlg controls
public const int DS_MODALFRAME =  H80         //  Can be combined with WS_CAPTION
public const int DS_NOIDLEMSG =  H100         //  WM_ENTERIDLE message will not be sent
public const int DS_SETFOREGROUND =  H200     //  not in win3.1

public const int DM_GETDEFID = WM_USER + 0
public const int DM_SETDEFID = WM_USER + 1
public const int DC_HASDEFID =  H534      //0x534B

// Dialog Codes
public const int DLGC_WANTARROWS =  H1              //  Control wants arrow keys
public const int DLGC_WANTTAB =  H2                 //  Control wants tab keys
public const int DLGC_WANTALLKEYS =  H4             //  Control wants all keys
public const int DLGC_WANTMESSAGE =  H4             //  Pass message to control
public const int DLGC_HASSETSEL =  H8               //  Understands EM_SETSEL message
public const int DLGC_DEFPUSHBUTTON =  H10          //  Default pushbutton
public const int DLGC_UNDEFPUSHBUTTON =  H20        //  Non-default pushbutton
public const int DLGC_RADIOBUTTON =  H40            //  Radio button
public const int DLGC_WANTCHARS =  H80              //  Want WM_CHAR messages
public const int DLGC_STATIC =  H100                //  Static item: don//t include
public const int DLGC_BUTTON =  H2000               //  Button item: can be checked

public const int LB_CTLCODE = 0 

// Listbox Return Values
public const int LB_OKAY = 0
public const int LB_ERR = (-1)
public const int LB_ERRSPACE = (-2)

// The idStaticPath parameter to DlgDirList can have the following values
// ORed if the list box should show other details of the files along with
// the name of the files;
// all other details also will be returned

// Listbox Notification Codes
public const int LBN_ERRSPACE = (-2)
public const int LBN_SELCHANGE = 1
public const int LBN_DBLCLK = 2
public const int LBN_SELCANCEL = 3
public const int LBN_SETFOCUS = 4
public const int LBN_KILLFOCUS = 5

// Listbox messages
public const int LB_ADDSTRING =  H180
public const int LB_INSERTSTRING =  H181
public const int LB_DELETESTRING =  H182
public const int LB_SELITEMRANGEEX =  H183
public const int LB_RESETCONTENT =  H184
public const int LB_SETSEL =  H185
public const int LB_SETCURSEL =  H186
public const int LB_GETSEL =  H187
public const int LB_GETCURSEL =  H188
public const int LB_GETTEXT =  H189
public const int LB_GETTEXTLEN =  H18A
public const int LB_GETCOUNT =  H18B
public const int LB_SELECTSTRING =  H18C
public const int LB_DIR =  H18D
public const int LB_GETTOPINDEX =  H18E
public const int LB_FINDSTRING =  H18F
public const int LB_GETSELCOUNT =  H190
public const int LB_GETSELITEMS =  H191
public const int LB_SETTABSTOPS =  H192
public const int LB_GETHORIZONTALEXTENT =  H193
public const int LB_SETHORIZONTALEXTENT =  H194
public const int LB_SETCOLUMNWIDTH =  H195
public const int LB_ADDFILE =  H196
public const int LB_SETTOPINDEX =  H197
public const int LB_GETITEMRECT =  H198
public const int LB_GETITEMDATA =  H199
public const int LB_SETITEMDATA =  H19A
public const int LB_SELITEMRANGE =  H19B
public const int LB_SETANCHORINDEX =  H19C
public const int LB_GETANCHORINDEX =  H19D
public const int LB_SETCARETINDEX =  H19E
public const int LB_GETCARETINDEX =  H19F
public const int LB_SETITEMHEIGHT =  H1A0
public const int LB_GETITEMHEIGHT =  H1A1
public const int LB_FINDSTRINGEXACT =  H1A2
public const int LB_SETLOCALE =  H1A5
public const int LB_GETLOCALE =  H1A6
public const int LB_SETCOUNT =  H1A7
public const int LB_MSGMAX =  H1A8

// Listbox Styles
public const int LBS_NOTIFY =  H1 
public const int LBS_SORT =  H2 
public const int LBS_NOREDRAW =  H4 
public const int LBS_MULTIPLESEL =  H8 
public const int LBS_OWNERDRAWFIXED =  H10 
public const int LBS_OWNERDRAWVARIABLE =  H20 
public const int LBS_HASSTRINGS =  H40 
public const int LBS_USETABSTOPS =  H80 
public const int LBS_NOINTEGRALHEIGHT =  H100 
public const int LBS_MULTICOLUMN =  H200 
public const int LBS_WANTKEYBOARDINPUT =  H400 
public const int LBS_EXTENDEDSEL =  H800 
public const int LBS_DISABLENOSCROLL =  H1000 
public const int LBS_NODATA =  H2000 
public const int LBS_STANDARD = (LBS_NOTIFY Or LBS_SORT Or WS_VSCROLL Or WS_BORDER)

// Combo Box return Values
public const int CB_OKAY = 0
public const int CB_ERR = (-1)
public const int CB_ERRSPACE = (-2)

// Combo Box Notification Codes
public const int CBN_ERRSPACE = (-1)
public const int CBN_SELCHANGE = 1
public const int CBN_DBLCLK = 2
public const int CBN_SETFOCUS = 3
public const int CBN_KILLFOCUS = 4
public const int CBN_EDITCHANGE = 5
public const int CBN_EDITUPDATE = 6
public const int CBN_DROPDOWN = 7
public const int CBN_CLOSEUP = 8
public const int CBN_SELENDOK = 9
public const int CBN_SELENDCANCEL = 10

// Combo Box styles
public const int CBS_SIMPLE =  H1 
public const int CBS_DROPDOWN =  H2 
public const int CBS_DROPDOWNLIST =  H3 
public const int CBS_OWNERDRAWFIXED =  H10 
public const int CBS_OWNERDRAWVARIABLE =  H20 
public const int CBS_AUTOHSCROLL =  H40 
public const int CBS_OEMCONVERT =  H80 
public const int CBS_SORT =  H100 
public const int CBS_HASSTRINGS =  H200 
public const int CBS_NOINTEGRALHEIGHT =  H400 
public const int CBS_DISABLENOSCROLL =  H800 

// Combo Box messages
public const int CB_GETEDITSEL =  H140
public const int CB_LIMITTEXT =  H141
public const int CB_SETEDITSEL =  H142
public const int CB_ADDSTRING =  H143
public const int CB_DELETESTRING =  H144
public const int CB_DIR =  H145
public const int CB_GETCOUNT =  H146
public const int CB_GETCURSEL =  H147
public const int CB_GETLBTEXT =  H148
public const int CB_GETLBTEXTLEN =  H149
public const int CB_INSERTSTRING =  H14A
public const int CB_RESETCONTENT =  H14B
public const int CB_FINDSTRING =  H14C
public const int CB_SELECTSTRING =  H14D
public const int CB_SETCURSEL =  H14E
public const int CB_SHOWDROPDOWN =  H14F
public const int CB_GETITEMDATA =  H150
public const int CB_SETITEMDATA =  H151
public const int CB_GETDROPPEDCONTROLRECT =  H152
public const int CB_SETITEMHEIGHT =  H153
public const int CB_GETITEMHEIGHT =  H154
public const int CB_SETEXTENDEDUI =  H155
public const int CB_GETEXTENDEDUI =  H156
public const int CB_GETDROPPEDSTATE =  H157
public const int CB_FINDSTRINGEXACT =  H158
public const int CB_SETLOCALE =  H159
public const int CB_GETLOCALE =  H15A
public const int CB_MSGMAX =  H15B

// Scroll Bar Styles
public const int SBS_HORZ =  H0 
public const int SBS_VERT =  H1 
public const int SBS_TOPALIGN =  H2 
public const int SBS_LEFTALIGN =  H2 
public const int SBS_BOTTOMALIGN =  H4 
public const int SBS_RIGHTALIGN =  H4 
public const int SBS_SIZEBOXTOPLEFTALIGN =  H2 
public const int SBS_SIZEBOXBOTTOMRIGHTALIGN =  H4 
public const int SBS_SIZEBOX =  H8 

//  Scroll bar messages
public const int SBM_SETPOS =  HE0 // not in win3.1
public const int SBM_GETPOS =  HE1 // not in win3.1
public const int SBM_SETRANGE =  HE2 // not in win3.1
public const int SBM_SETRANGEREDRAW =  HE6 // not in win3.1
public const int SBM_GETRANGE =  HE3 // not in win3.1
public const int SBM_ENABLE_ARROWS =  HE4 // not in win3.1

public const int MDIS_ALLCHILDSTYLES =  H1

// wParam values for WM_MDITILE and WM_MDICASCADE messages.
public const int MDITILE_VERTICAL =  H0
public const int MDITILE_HORIZONTAL =  H1
public const int MDITILE_SKIPDISABLED =  H2

Type MDICREATESTRUCT
        szClass As String
        szTitle As String
        hOwner As Long
        x As Long
        y As Long
        cx As Long
        cy As Long
        style As Long
        lParam As Long
End Type

Type CLIENTCREATESTRUCT
        hWindowMenu As Long
        idFirstChild As Long
End Type

Declare Function DefFrameProc Lib "user32" Alias "DefFrameProcA" (ByVal hwnd As Long, ByVal hWndMDIClient As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long
Declare Function DefMDIChildProc Lib "user32" Alias "DefMDIChildProcA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long

Declare Function TranslateMDISysAccel Lib "user32" Alias "TranslateMDISysAccel" (ByVal hWndClient As Long, lpMsg As MSG) As Long

Declare Function ArrangeIconicWindows Lib "user32" Alias "ArrangeIconicWindows" (ByVal hwnd As Long) As Long

Declare Function CreateMDIWindow Lib "user32" Alias "CreateMDIWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String, ByVal dwStyle As Long, ByVal x As Long, ByVal y As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal hWndParent As Long, ByVal hInstance As Long, ByVal lParam As Long) As Long

//  Help engine section.

Type MULTIKEYHELP
        mkSize As Long
        mkKeylist As Byte
        szKeyphrase As String * 253 // Array length is arbitrary; may be changed
End Type

Type HELPWININFO
        wStructSize As Long
        x As Long
        y As Long
        dx As Long
        dy As Long
        wMax As Long
        rgchMember As String * 2
End Type

// Commands to pass WinHelp()
public const int HELP_CONTEXT =  H1          //  Display topic in ulTopic
public const int HELP_QUIT =  H2             //  Terminate help
public const int HELP_INDEX =  H3            //  Display index
public const int HELP_CONTENTS =  H3 
public const int HELP_HELPONHELP =  H4       //  Display help on using help
public const int HELP_SETINDEX =  H5         //  Set current Index for multi index help
public const int HELP_SETCONTENTS =  H5 
public const int HELP_CONTEXTPOPUP =  H8 
public const int HELP_FORCEFILE =  H9 
public const int HELP_KEY =  H101            //  Display topic for keyword in offabData
public const int HELP_COMMAND =  H102 
public const int HELP_PARTIALKEY =  H105 
public const int HELP_MULTIKEY =  H201 
public const int HELP_SETWINPOS =  H203 

Declare Function WinHelp Lib "user32" Alias "WinHelpA" (ByVal hwnd As Long, ByVal lpHelpFile As String, ByVal wCommand As Long, ByVal dwData As Long) As Long

// Parameter for SystemParametersInfo()
public const int SPI_GETBEEP = 1
public const int SPI_SETBEEP = 2
public const int SPI_GETMOUSE = 3
public const int SPI_SETMOUSE = 4
public const int SPI_GETBORDER = 5
public const int SPI_SETBORDER = 6
public const int SPI_GETKEYBOARDSPEED = 10
public const int SPI_SETKEYBOARDSPEED = 11
public const int SPI_LANGDRIVER = 12
public const int SPI_ICONHORIZONTALSPACING = 13
public const int SPI_GETSCREENSAVETIMEOUT = 14
public const int SPI_SETSCREENSAVETIMEOUT = 15
public const int SPI_GETSCREENSAVEACTIVE = 16
public const int SPI_SETSCREENSAVEACTIVE = 17
public const int SPI_GETGRIDGRANULARITY = 18
public const int SPI_SETGRIDGRANULARITY = 19
public const int SPI_SETDESKWALLPAPER = 20
public const int SPI_SETDESKPATTERN = 21
public const int SPI_GETKEYBOARDDELAY = 22
public const int SPI_SETKEYBOARDDELAY = 23
public const int SPI_ICONVERTICALSPACING = 24
public const int SPI_GETICONTITLEWRAP = 25
public const int SPI_SETICONTITLEWRAP = 26
public const int SPI_GETMENUDROPALIGNMENT = 27
public const int SPI_SETMENUDROPALIGNMENT = 28
public const int SPI_SETDOUBLECLKWIDTH = 29
public const int SPI_SETDOUBLECLKHEIGHT = 30
public const int SPI_GETICONTITLELOGFONT = 31
public const int SPI_SETDOUBLECLICKTIME = 32
public const int SPI_SETMOUSEBUTTONSWAP = 33
public const int SPI_SETICONTITLELOGFONT = 34
public const int SPI_GETFASTTASKSWITCH = 35
public const int SPI_SETFASTTASKSWITCH = 36
public const int SPI_SETDRAGFULLWINDOWS = 37
public const int SPI_GETDRAGFULLWINDOWS = 38
public const int SPI_GETNONCLIENTMETRICS = 41
public const int SPI_SETNONCLIENTMETRICS = 42
public const int SPI_GETMINIMIZEDMETRICS = 43
public const int SPI_SETMINIMIZEDMETRICS = 44
public const int SPI_GETICONMETRICS = 45
public const int SPI_SETICONMETRICS = 46
public const int SPI_SETWORKAREA = 47
public const int SPI_GETWORKAREA = 48
public const int SPI_SETPENWINDOWS = 49
public const int SPI_GETFILTERKEYS = 50
public const int SPI_SETFILTERKEYS = 51
public const int SPI_GETTOGGLEKEYS = 52
public const int SPI_SETTOGGLEKEYS = 53
public const int SPI_GETMOUSEKEYS = 54
public const int SPI_SETMOUSEKEYS = 55
public const int SPI_GETSHOWSOUNDS = 56
public const int SPI_SETSHOWSOUNDS = 57
public const int SPI_GETSTICKYKEYS = 58
public const int SPI_SETSTICKYKEYS = 59
public const int SPI_GETACCESSTIMEOUT = 60
public const int SPI_SETACCESSTIMEOUT = 61
public const int SPI_GETSERIALKEYS = 62
public const int SPI_SETSERIALKEYS = 63
public const int SPI_GETSOUNDSENTRY = 64
public const int SPI_SETSOUNDSENTRY = 65
public const int SPI_GETHIGHCONTRAST = 66
public const int SPI_SETHIGHCONTRAST = 67
public const int SPI_GETKEYBOARDPREF = 68
public const int SPI_SETKEYBOARDPREF = 69
public const int SPI_GETSCREENREADER = 70
public const int SPI_SETSCREENREADER = 71
public const int SPI_GETANIMATION = 72
public const int SPI_SETANIMATION = 73
public const int SPI_GETFONTSMOOTHING = 74
public const int SPI_SETFONTSMOOTHING = 75
public const int SPI_SETDRAGWIDTH = 76
public const int SPI_SETDRAGHEIGHT = 77
public const int SPI_SETHANDHELD = 78
public const int SPI_GETLOWPOWERTIMEOUT = 79
public const int SPI_GETPOWEROFFTIMEOUT = 80
public const int SPI_SETLOWPOWERTIMEOUT = 81
public const int SPI_SETPOWEROFFTIMEOUT = 82
public const int SPI_GETLOWPOWERACTIVE = 83
public const int SPI_GETPOWEROFFACTIVE = 84
public const int SPI_SETLOWPOWERACTIVE = 85
public const int SPI_SETPOWEROFFACTIVE = 86
public const int SPI_SETCURSORS = 87
public const int SPI_SETICONS = 88
public const int SPI_GETDEFAULTINPUTLANG = 89
public const int SPI_SETDEFAULTINPUTLANG = 90
public const int SPI_SETLANGTOGGLE = 91
public const int SPI_GETWINDOWSEXTENSION = 92
public const int SPI_SETMOUSETRAILS = 93
public const int SPI_GETMOUSETRAILS = 94
public const int SPI_SCREENSAVERRUNNING = 97

// SystemParametersInfo flags
public const int SPIF_UPDATEINIFILE =  H1
public const int SPIF_SENDWININICHANGE =  H2

Declare Function SystemParametersInfo Lib "user32" Alias "SystemParametersInfoA" (ByVal uAction As Long, ByVal uParam As Long, ByRef lpvParam As Any, ByVal fuWinIni As Long) As Long

//  DDE window messages
public const int WM_DDE_FIRST =  H3E0
public const int WM_DDE_INITIATE = (WM_DDE_FIRST)
public const int WM_DDE_TERMINATE = (WM_DDE_FIRST + 1)
public const int WM_DDE_ADVISE = (WM_DDE_FIRST + 2)
public const int WM_DDE_UNADVISE = (WM_DDE_FIRST + 3)
public const int WM_DDE_ACK = (WM_DDE_FIRST + 4)
public const int WM_DDE_DATA = (WM_DDE_FIRST + 5)
public const int WM_DDE_REQUEST = (WM_DDE_FIRST + 6)
public const int WM_DDE_POKE = (WM_DDE_FIRST + 7)
public const int WM_DDE_EXECUTE = (WM_DDE_FIRST + 8)
public const int WM_DDE_LAST = (WM_DDE_FIRST + 8)

// *****************************************************************************                                                                             *
// * dde.h -       Dynamic Data Exchange structures and definitions              *
// *                                                                             *
// * Copyright (c) 1993-1995, Microsoft Corp.        All rights reserved              *
// *                                                                             *
// \*****************************************************************************/


// ----------------------------------------------------------------------------
//        DDEACK structure
// 
//         Structure of wStatus (LOWORD(lParam)) in WM_DDE_ACK message
//        sent in response to a WM_DDE_DATA, WM_DDE_REQUEST, WM_DDE_POKE,
//        WM_DDE_ADVISE, or WM_DDE_UNADVISE message.
// 
// ----------------------------------------------------------------------------*/

Type DDEACK
        bAppReturnCode As Integer
        Reserved As Integer
        fbusy As Integer
        fack As Integer
End Type

// ----------------------------------------------------------------------------
//        DDEADVISE structure
//
//         WM_DDE_ADVISE parameter structure for hOptions (LOWORD(lParam))
//
// ----------------------------------------------------------------------------*/

Type DDEADVISE
        Reserved As Integer
        fDeferUpd As Integer
        fAckReq As Integer
        cfFormat As Integer
End Type


// ----------------------------------------------------------------------------
//        DDEDATA structure
//
//        WM_DDE_DATA parameter structure for hData (LOWORD(lParam)).
//        The actual size of this structure depends on the size of
//        the Value array.
//
// ----------------------------------------------------------------------------*/

Type DDEDATA
        unused As Integer
        fresponse As Integer
        fRelease As Integer
        Reserved As Integer
        fAckReq As Integer
        cfFormat As Integer
        Value(1) As Byte
End Type


// ----------------------------------------------------------------------------
//         DDEPOKE structure
//
//         WM_DDE_POKE parameter structure for hData (LOWORD(lParam)).
//        The actual size of this structure depends on the size of
//        the Value array.
//
// ----------------------------------------------------------------------------*/

Type DDEPOKE
        unused As Integer
        fRelease As Integer
        fReserved As Integer
        cfFormat As Integer
        Value(1) As Byte
End Type

// ----------------------------------------------------------------------------
// The following typedef//s were used in previous versions of the Windows SDK.
// They are still valid.  The above typedef//s define exactly the same structures
// as those below.  The above typedef names are recommended, however, as they
// are more meaningful.

// Note that the DDEPOKE structure typedef//ed in earlier versions of DDE.H did
// not correctly define the bit positions.
// ----------------------------------------------------------------------------*/

Type DDELN
        unused As Integer
        fRelease As Integer
        fDeferUpd As Integer
        fAckReq As Integer
        cfFormat As Integer
End Type

Type DDEUP
        unused As Integer
        fAck As Integer
        fRelease As Integer
        fReserved As Integer
        fAckReq As Integer
        cfFormat As Integer
        rgb(1) As Byte
End Type

Declare Function DdeSetQualityOfService Lib "user32" Alias "DdeSetQualityOfService" (ByVal hWndClient As Long, pqosNew As SECURITY_QUALITY_OF_SERVICE, pqosPrev As SECURITY_QUALITY_OF_SERVICE) As Long
Declare Function ImpersonateDdeClientWindow Lib "user32" Alias "ImpersonateDdeClientWindow" (ByVal hWndClient As Long, ByVal hWndServer As Long) As Long
Declare Function PackDDElParam Lib "user32" Alias "PackDDElParam" (ByVal msg As Long, ByVal uiLo As Long, ByVal uiHi As Long) As Long
Declare Function UnpackDDElParam Lib "user32" Alias "UnpackDDElParam" (ByVal msg As Long, ByVal lParam As Long, puiLo As Long, puiHi As Long) As Long
Declare Function FreeDDElParam Lib "user32" Alias "FreeDDElParam" (ByVal msg As Long, ByVal lParam As Long) As Long
Declare Function ReuseDDElParam Lib "user32" Alias "ReuseDDElParam" (ByVal lParam As Long, ByVal msgIn As Long, ByVal msgOut As Long, ByVal uiLo As Long, ByVal uiHi As Long) As Long

Type HSZPAIR
        hszSvc As Long
        hszTopic As Long
End Type

////
//// Quality Of Service
////

Type SECURITY_QUALITY_OF_SERVICE
    Length As Long
    Impersonationlevel As Integer
    ContextTrackingMode As Integer
    EffectiveOnly As Long
End Type
    
Type CONVCONTEXT
        cb As Long
        wFlags As Long
        wCountryID As Long
        iCodePage As Long
        dwLangID As Long
        dwSecurity As Long
        qos As SECURITY_QUALITY_OF_SERVICE
End Type

Type CONVINFO
        cb As Long
        hUser As Long
        hConvPartner As Long
        hszSvcPartner As Long
        hszServiceReq As Long
        hszTopic As Long
        hszItem As Long
        wFmt As Long
        wType As Long
        wStatus As Long
        wConvst As Long
        wLastError As Long
        hConvList As Long
        ConvCtxt As CONVCONTEXT
        hwnd As Long
        hwndPartner As Long
End Type

//  conversation states (usState)
public const int XST_NULL = 0  //  quiescent states
public const int XST_INCOMPLETE = 1
public const int XST_CONNECTED = 2
public const int XST_INIT1 = 3  //  mid-initiation states
public const int XST_INIT2 = 4
public const int XST_REQSENT = 5  //  active conversation states
public const int XST_DATARCVD = 6
public const int XST_POKESENT = 7
public const int XST_POKEACKRCVD = 8
public const int XST_EXECSENT = 9
public const int XST_EXECACKRCVD = 10
public const int XST_ADVSENT = 11
public const int XST_UNADVSENT = 12
public const int XST_ADVACKRCVD = 13
public const int XST_UNADVACKRCVD = 14
public const int XST_ADVDATASENT = 15
public const int XST_ADVDATAACKRCVD = 16

//  used in LOWORD(dwData1) of XTYP_ADVREQ callbacks...
public const int CADV_LATEACK =  HFFFF

//  conversation status bits (fsStatus)
public const int ST_CONNECTED =  H1
public const int ST_ADVISE =  H2
public const int ST_ISLOCAL =  H4
public const int ST_BLOCKED =  H8
public const int ST_CLIENT =  H10
public const int ST_TERMINATED =  H20
public const int ST_INLIST =  H40
public const int ST_BLOCKNEXT =  H80
public const int ST_ISSELF =  H100

//  DDE public const intants for wStatus field
public const int DDE_FACK =  H8000
public const int DDE_FBUSY =  H4000
public const int DDE_FDEFERUPD =  H4000
public const int DDE_FACKREQ =  H8000
public const int DDE_FRELEASE =  H2000
public const int DDE_FREQUESTED =  H1000
public const int DDE_FAPPSTATUS =  HFF
public const int DDE_FNOTPROCESSED =  H0

public const int DDE_FACKRESERVED = (Not (DDE_FACK Or DDE_FBUSY Or DDE_FAPPSTATUS))
public const int DDE_FADVRESERVED = (Not (DDE_FACKREQ Or DDE_FDEFERUPD))
public const int DDE_FDATRESERVED = (Not (DDE_FACKREQ Or DDE_FRELEASE Or DDE_FREQUESTED))
public const int DDE_FPOKRESERVED = (Not (DDE_FRELEASE))

//  message filter hook types
public const int MSGF_DDEMGR =  H8001

//  codepage public const intants
public const int CP_WINANSI = 1004  //  default codepage for windows old DDE convs.
public const int CP_WINUNICODE = 1200

//  transaction types
public const int XTYPF_NOBLOCK =  H2     //  CBR_BLOCK will not work
public const int XTYPF_NODATA =  H4     //  DDE_FDEFERUPD
public const int XTYPF_ACKREQ =  H8     //  DDE_FACKREQ

public const int XCLASS_MASK =  HFC00
public const int XCLASS_BOOL =  H1000
public const int XCLASS_DATA =  H2000
public const int XCLASS_FLAGS =  H4000
public const int XCLASS_NOTIFICATION =  H8000

public const int XTYP_ERROR = ( H0 Or XCLASS_NOTIFICATION Or XTYPF_NOBLOCK)
public const int XTYP_ADVDATA = ( H10 Or XCLASS_FLAGS)
public const int XTYP_ADVREQ = ( H20 Or XCLASS_DATA Or XTYPF_NOBLOCK)
public const int XTYP_ADVSTART = ( H30 Or XCLASS_BOOL)
public const int XTYP_ADVSTOP = ( H40 Or XCLASS_NOTIFICATION)
public const int XTYP_EXECUTE = ( H50 Or XCLASS_FLAGS)
public const int XTYP_CONNECT = ( H60 Or XCLASS_BOOL Or XTYPF_NOBLOCK)
public const int XTYP_CONNECT_CONFIRM = ( H70 Or XCLASS_NOTIFICATION Or XTYPF_NOBLOCK)
public const int XTYP_XACT_COMPLETE = ( H80 Or XCLASS_NOTIFICATION)
public const int XTYP_POKE = ( H90 Or XCLASS_FLAGS)
public const int XTYP_REGISTER = ( HA0 Or XCLASS_NOTIFICATION Or XTYPF_NOBLOCK)
public const int XTYP_REQUEST = ( HB0 Or XCLASS_DATA)
public const int XTYP_DISCONNECT = ( HC0 Or XCLASS_NOTIFICATION Or XTYPF_NOBLOCK)
public const int XTYP_UNREGISTER = ( HD0 Or XCLASS_NOTIFICATION Or XTYPF_NOBLOCK)
public const int XTYP_WILDCONNECT = ( HE0 Or XCLASS_DATA Or XTYPF_NOBLOCK)

public const int XTYP_MASK =  HF0
public const int XTYP_SHIFT = 4  //  shift to turn XTYP_ into an index

//  Timeout public const intants
public const int TIMEOUT_ASYNC =  HFFFF

//  Transaction ID public const intants
public const int QID_SYNC =  HFFFF

// Public strings used in DDE
public const int SZDDESYS_TOPIC = "System"
public const int SZDDESYS_ITEM_TOPICS = "Topics"
public const int SZDDESYS_ITEM_SYSITEMS = "SysItems"
public const int SZDDESYS_ITEM_RTNMSG = "ReturnMessage"
public const int SZDDESYS_ITEM_STATUS = "Status"
public const int SZDDESYS_ITEM_FORMATS = "Formats"
public const int SZDDESYS_ITEM_HELP = "Help"
public const int SZDDE_ITEM_ITEMLIST = "TopicItemList"

public const int CBR_BLOCK =  HFFFF

// Callback filter flags for use with standard apps.
public const int CBF_FAIL_SELFCONNECTIONS =  H1000
public const int CBF_FAIL_CONNECTIONS =  H2000
public const int CBF_FAIL_ADVISES =  H4000
public const int CBF_FAIL_EXECUTES =  H8000
public const int CBF_FAIL_POKES =  H10000
public const int CBF_FAIL_REQUESTS =  H20000
public const int CBF_FAIL_ALLSVRXACTIONS =  H3F000

public const int CBF_SKIP_CONNECT_CONFIRMS =  H40000
public const int CBF_SKIP_REGISTRATIONS =  H80000
public const int CBF_SKIP_UNREGISTRATIONS =  H100000
public const int CBF_SKIP_DISCONNECTS =  H200000
public const int CBF_SKIP_ALLNOTIFICATIONS =  H3C0000

// Application command flags
public const int APPCMD_CLIENTONLY =  H10 
public const int APPCMD_FILTERINITS =  H20 
public const int APPCMD_MASK =  HFF0 

// Application classification flags
public const int APPCLASS_STANDARD =  H0 
public const int APPCLASS_MASK =  HF 

Declare Function DdeUninitialize Lib "user32" Alias "DdeUninitialize" (ByVal idInst As Long) As Long

// conversation enumeration functions
Declare Function DdeConnectList Lib "user32" Alias "DdeConnectList" (ByVal idInst As Long, ByVal hszService As Long, ByVal hszTopic As Long, ByVal hConvList As Long, pCC As CONVCONTEXT) As Long
Declare Function DdeQueryNextServer Lib "user32" Alias "DdeQueryNextServer" (ByVal hConvList As Long, ByVal hConvPrev As Long) As Long
Declare Function DdeDisconnectList Lib "user32" Alias "DdeDisconnectList" (ByVal hConvList As Long) As Long

// conversation control functions
Declare Function DdeConnect Lib "user32" Alias "DdeConnect" (ByVal idInst As Long, ByVal hszService As Long, ByVal hszTopic As Long, pCC As CONVCONTEXT) As Long
Declare Function DdeDisconnect Lib "user32" Alias "DdeDisconnect" (ByVal hConv As Long) As Long
Declare Function DdeReconnect Lib "user32" Alias "DdeReconnect" (ByVal hConv As Long) As Long
Declare Function DdeQueryConvInfo Lib "user32" Alias "DdeQueryConvInfo" (ByVal hConv As Long, ByVal idTransaction As Long, pConvInfo As CONVINFO) As Long
Declare Function DdeSetUserHandle Lib "user32" Alias "DdeSetUserHandle" (ByVal hConv As Long, ByVal id As Long, ByVal hUser As Long) As Long
Declare Function DdeAbandonTransaction Lib "user32" Alias "DdeAbandonTransaction" (ByVal idInst As Long, ByVal hConv As Long, ByVal idTransaction As Long) As Long

// app server interface functions
Declare Function DdePostAdvise Lib "user32" Alias "DdePostAdvise" (ByVal idInst As Long, ByVal hszTopic As Long, ByVal hszItem As Long) As Long
Declare Function DdeEnableCallback Lib "user32" Alias "DdeEnableCallback" (ByVal idInst As Long, ByVal hConv As Long, ByVal wCmd As Long) As Long
Declare Function DdeImpersonateClient Lib "user32" Alias "DdeImpersonateClient" (ByVal hConv As Long) As Long

public const int EC_ENABLEALL = 0
public const int EC_ENABLEONE = ST_BLOCKNEXT
public const int EC_DISABLE = ST_BLOCKED
public const int EC_QUERYWAITING = 2

Declare Function DdeNameService Lib "user32" Alias "DdeNameService" (ByVal idInst As Long, ByVal hsz1 As Long, ByVal hsz2 As Long, ByVal afCmd As Long) As Long

public const int DNS_REGISTER =  H1
public const int DNS_UNREGISTER =  H2
public const int DNS_FILTERON =  H4
public const int DNS_FILTEROFF =  H8

// app client interface functions
Declare Function DdeClientTransaction Lib "user32" Alias "DdeClientTransaction" (pData As Byte, ByVal cbData As Long, ByVal hConv As Long, ByVal hszItem As Long, ByVal wFmt As Long, ByVal wType As Long, ByVal dwTimeout As Long, pdwResult As Long) As Long

// data transfer functions
Declare Function DdeCreateDataHandle Lib "user32" Alias "DdeCreateDataHandle" (ByVal idInst As Long, pSrc As Byte, ByVal cb As Long, ByVal cbOff As Long, ByVal hszItem As Long, ByVal wFmt As Long, ByVal afCmd As Long) As Long
Declare Function DdeAddData Lib "user32" Alias "DdeAddDataA" (ByVal hData As Long, pSrc As Byte, ByVal cb As Long, ByVal cbOff As Long) As Long
Declare Function DdeGetData Lib "user32" Alias "DdeGetDataA" (ByVal hData As Long, pDst As Byte, ByVal cbMax As Long, ByVal cbOff As Long) As Long
Declare Function DdeAccessData Lib "user32" Alias "DdeAccessDataA" (ByVal hData As Long, pcbDataSize As Long) As Long
Declare Function DdeUnaccessData Lib "user32" Alias "DdeUnaccessDataA" (ByVal hData As Long) As Long
Declare Function DdeFreeDataHandle Lib "user32" Alias "DdeFreeDataHandle" (ByVal hData As Long) As Long

public const int HDATA_APPOWNED =  H1

Declare Function DdeGetLastError Lib "user32" Alias "DdeGetLastError" (ByVal idInst As Long) As Long

public const int DMLERR_NO_ERROR = 0                           //  must be 0

public const int DMLERR_FIRST =  H4000

public const int DMLERR_ADVACKTIMEOUT =  H4000
public const int DMLERR_BUSY =  H4001
public const int DMLERR_DATAACKTIMEOUT =  H4002
public const int DMLERR_DLL_NOT_INITIALIZED =  H4003
public const int DMLERR_DLL_USAGE =  H4004
public const int DMLERR_EXECACKTIMEOUT =  H4005
public const int DMLERR_INVALIDPARAMETER =  H4006
public const int DMLERR_LOW_MEMORY =  H4007
public const int DMLERR_MEMORY_ERROR =  H4008
public const int DMLERR_NOTPROCESSED =  H4009
public const int DMLERR_NO_CONV_ESTABLISHED =  H400A
public const int DMLERR_POKEACKTIMEOUT =  H400B
public const int DMLERR_POSTMSG_FAILED =  H400C
public const int DMLERR_REENTRANCY =  H400D
public const int DMLERR_SERVER_DIED =  H400E
public const int DMLERR_SYS_ERROR =  H400F
public const int DMLERR_UNADVACKTIMEOUT =  H4010
public const int DMLERR_UNFOUND_QUEUE_ID =  H4011

public const int DMLERR_LAST =  H4011

Declare Function DdeCreateStringHandle Lib "user32" Alias "DdeCreateStringHandleA" (ByVal idInst As Long, ByVal psz As String, ByVal iCodePage As Long) As Long

Declare Function DdeQueryString Lib "user32" Alias "DdeQueryStringA" (ByVal idInst As Long, ByVal hsz As Long, ByVal psz As String, ByVal cchMax As Long, ByVal iCodePage As Long) As Long

Declare Function DdeFreeStringHandle Lib "user32" Alias "DdeFreeStringHandle" (ByVal idInst As Long, ByVal hsz As Long) As Long
Declare Function DdeKeepStringHandle Lib "user32" Alias "DdeKeepStringHandle" (ByVal idInst As Long, ByVal hsz As Long) As Long
Declare Function DdeCmpStringHandles Lib "user32" Alias "DdeCmpStringHandles" (ByVal hsz1 As Long, ByVal hsz2 As Long) As Long

Type DDEML_MSG_HOOK_DATA    //  new for NT
        uiLo  //  unpacked lo and hi parts of lParam
        uiHi As Long
        cbData   //  amount of data in message, if any. May be > than 32 bytes.
        Data(8)  //  data peeking by DDESPY is limited to 32 bytes.
End Type

Type MONMSGSTRUCT
        cb As Long
        hwndTo As Long
        dwTime As Long
        htask As Long
        wMsg As Long
        wParam As Long
        lParam As Long
        dmhd As DDEML_MSG_HOOK_DATA       //  new for NT
End Type

Type MONCBSTRUCT
        cb As Long
        dwTime As Long
        htask As Long
        dwRet As Long
        wType As Long
        wFmt As Long
        hConv As Long
        hsz1 As Long
        hsz2 As Long
        hData As Long
        dwData1 As Long
        dwData2 As Long
        cc As CONVCONTEXT                 //  new for NT for XTYP_CONNECT callbacks
        cbData                  //  new for NT for data peeking
        Data(8)                 //  new for NT for data peeking
End Type

Type MONHSZSTRUCT
        cb As Long
        fsAction //  MH_ value
        dwTime As Long
        hsz As Long
        htask As Long
        str As Byte
End Type

public const int MH_CREATE = 1
public const int MH_KEEP = 2
public const int MH_DELETE = 3
public const int MH_CLEANUP = 4

Type MONERRSTRUCT
        cb As Long
        wLastError As Long
        dwTime As Long
        htask As Long
End Type

Type MONLINKSTRUCT
        cb As Long
        dwTime As Long
        htask As Long
        fEstablished As Long
        fNoData As Long
        hszSvc As Long
        hszTopic As Long
        hszItem As Long
        wFmt As Long
        fServer As Long
        hConvServer As Long
        hConvClient As Long
End Type

Type MONCONVSTRUCT
        cb As Long
        fConnect As Long
        dwTime As Long
        htask As Long
        hszSvc As Long
        hszTopic As Long
        hConvClient        //  Globally unique value != apps local hConv
        hConvServer        //  Globally unique value != apps local hConv
End Type

public const int MAX_MONITORS = 4
public const int APPCLASS_MONITOR =  H1 
public const int XTYP_MONITOR = ( HF0 Or XCLASS_NOTIFICATION Or XTYPF_NOBLOCK)

// Callback filter flags for use with MONITOR apps - 0 implies no monitor callbacks
public const int MF_HSZ_INFO =  H1000000
public const int MF_SENDMSGS =  H2000000
public const int MF_POSTMSGS =  H4000000
public const int MF_CALLBACKS =  H8000000
public const int MF_ERRORS =  H10000000
public const int MF_LINKS =  H20000000
public const int MF_CONV =  H40000000

public const int MF_MASK =  HFF000000

// -----------------------------------------
// Win32 API error code definitions
// -----------------------------------------
// This section contains the error code definitions for the Win32 API functions.

// NO_ERROR
public const int NO_ERROR = 0 //  dderror

// The configuration registry database operation completed successfully.
public const int ERROR_SUCCESS = 0 

//   Incorrect function.
public const int ERROR_INVALID_FUNCTION = 1 //  dderror

//   The system cannot find the file specified.
public const int ERROR_FILE_NOT_FOUND = 2 

//   The system cannot find the path specified.
public const int ERROR_PATH_NOT_FOUND = 3 

//   The system cannot open the file.
public const int ERROR_TOO_MANY_OPEN_FILES = 4 

//   Access is denied.
public const int ERROR_ACCESS_DENIED = 5 

//   The handle is invalid.
public const int ERROR_INVALID_HANDLE = 6 

//   The storage control blocks were destroyed.
public const int ERROR_ARENA_TRASHED = 7 

//   Not enough storage is available to process this command.
public const int ERROR_NOT_ENOUGH_MEMORY = 8 //  dderror

//   The storage control block address is invalid.
public const int ERROR_INVALID_BLOCK = 9 

//   The environment is incorrect.
public const int ERROR_BAD_ENVIRONMENT = 10 

//   An attempt was made to load a program with an
//   incorrect format.
public const int ERROR_BAD_FORMAT = 11 

//   The access code is invalid.
public const int ERROR_INVALID_ACCESS = 12 

//   The data is invalid.
public const int ERROR_INVALID_DATA = 13 

//   Not enough storage is available to complete this operation.
public const int ERROR_OUTOFMEMORY = 14 

//   The system cannot find the drive specified.
public const int ERROR_INVALID_DRIVE = 15 

//   The directory cannot be removed.
public const int ERROR_CURRENT_DIRECTORY = 16 

//   The system cannot move the file
//   to a different disk drive.
public const int ERROR_NOT_SAME_DEVICE = 17 

//   There are no more files.
public const int ERROR_NO_MORE_FILES = 18 

//   The media is write protected.
public const int ERROR_WRITE_PROTECT = 19 

//   The system cannot find the device specified.
public const int ERROR_BAD_UNIT = 20 

//   The device is not ready.
public const int ERROR_NOT_READY = 21 

//   The device does not recognize the command.
public const int ERROR_BAD_COMMAND = 22 

//   Data error (cyclic redundancy check)
public const int ERROR_CRC = 23 

//   The program issued a command but the
//   command length is incorrect.
public const int ERROR_BAD_LENGTH = 24 

//   The drive cannot locate a specific
//   area or track on the disk.
public const int ERROR_SEEK = 25 

//   The specified disk or diskette cannot be accessed.
public const int ERROR_NOT_DOS_DISK = 26 

//   The drive cannot find the sector requested.
public const int ERROR_SECTOR_NOT_FOUND = 27 

//   The printer is out of paper.
public const int ERROR_OUT_OF_PAPER = 28 

//   The system cannot write to the specified device.
public const int ERROR_WRITE_FAULT = 29 

//   The system cannot read from the specified device.
public const int ERROR_READ_FAULT = 30 

//   A device attached to the system is not functioning.
public const int ERROR_GEN_FAILURE = 31 

//   The process cannot access the file because
//   it is being used by another process.
public const int ERROR_SHARING_VIOLATION = 32 

//   The process cannot access the file because
//   another process has locked a portion of the file.
public const int ERROR_LOCK_VIOLATION = 33 

//   The wrong diskette is in the drive.
//   Insert %2 (Volume Serial Number: %3)
//   into drive %1.
public const int ERROR_WRONG_DISK = 34 

//   Too many files opened for sharing.
public const int ERROR_SHARING_BUFFER_EXCEEDED = 36 

//   Reached end of file.
public const int ERROR_HANDLE_EOF = 38 

//   The disk is full.
public const int ERROR_HANDLE_DISK_FULL = 39 

//   The network request is not supported.
public const int ERROR_NOT_SUPPORTED = 50 

//   The remote computer is not available.
public const int ERROR_REM_NOT_LIST = 51 

//   A duplicate name exists on the network.
public const int ERROR_DUP_NAME = 52 

//   The network path was not found.
public const int ERROR_BAD_NETPATH = 53 

//   The network is busy.
public const int ERROR_NETWORK_BUSY = 54 

//   The specified network resource or device is no longer
//   available.
public const int ERROR_DEV_NOT_EXIST = 55 //  dderror

//   The network BIOS command limit has been reached.
public const int ERROR_TOO_MANY_CMDS = 56 

//   A network adapter hardware error occurred.
public const int ERROR_ADAP_HDW_ERR = 57 

//   The specified server cannot perform the requested
//   operation.
public const int ERROR_BAD_NET_RESP = 58 

//   An unexpected network error occurred.
public const int ERROR_UNEXP_NET_ERR = 59 

//   The remote adapter is not compatible.
public const int ERROR_BAD_REM_ADAP = 60 

//   The printer queue is full.
public const int ERROR_PRINTQ_FULL = 61 

//   Space to store the file waiting to be printed is
//   not available on the server.
public const int ERROR_NO_SPOOL_SPACE = 62 

//   Your file waiting to be printed was deleted.
public const int ERROR_PRINT_CANCELLED = 63 

//   The specified network name is no longer available.
public const int ERROR_NETNAME_DELETED = 64 

//   Network access is denied.
public const int ERROR_NETWORK_ACCESS_DENIED = 65 

//   The network resource type is not correct.
public const int ERROR_BAD_DEV_TYPE = 66 

//   The network name cannot be found.
public const int ERROR_BAD_NET_NAME = 67 

//   The name limit for the local computer network
//   adapter card was exceeded.
public const int ERROR_TOO_MANY_NAMES = 68 

//   The network BIOS session limit was exceeded.
public const int ERROR_TOO_MANY_SESS = 69 

//   The remote server has been paused or is in the
//   process of being started.
public const int ERROR_SHARING_PAUSED = 70 

//   The network request was not accepted.
public const int ERROR_REQ_NOT_ACCEP = 71 

//   The specified printer or disk device has been paused.
public const int ERROR_REDIR_PAUSED = 72 

//   The file exists.
public const int ERROR_FILE_EXISTS = 80 

//   The directory or file cannot be created.
public const int ERROR_CANNOT_MAKE = 82 

//   Fail on INT 24
public const int ERROR_FAIL_I24 = 83 

//   Storage to process this request is not available.
public const int ERROR_OUT_OF_STRUCTURES = 84 

//   The local device name is already in use.
public const int ERROR_ALREADY_ASSIGNED = 85 

//   The specified network password is not correct.
public const int ERROR_INVALID_PASSWORD = 86 

//   The parameter is incorrect.
public const int ERROR_INVALID_PARAMETER = 87 //  dderror

//   A write fault occurred on the network.
public const int ERROR_NET_WRITE_FAULT = 88 

//   The system cannot start another process at
//   this time.
public const int ERROR_NO_PROC_SLOTS = 89 

//   Cannot create another system semaphore.
public const int ERROR_TOO_MANY_SEMAPHORES = 100 

//   The exclusive semaphore is owned by another process.
public const int ERROR_EXCL_SEM_ALREADY_OWNED = 101 

//   The semaphore is set and cannot be closed.
public const int ERROR_SEM_IS_SET = 102 

//   The semaphore cannot be set again.
public const int ERROR_TOO_MANY_SEM_REQUESTS = 103 

//   Cannot request exclusive semaphores at interrupt time.
public const int ERROR_INVALID_AT_INTERRUPT_TIME = 104 

//   The previous ownership of this semaphore has ended.
public const int ERROR_SEM_OWNER_DIED = 105 

//   Insert the diskette for drive %1.
public const int ERROR_SEM_USER_LIMIT = 106 

//   Program stopped because alternate diskette was not inserted.
public const int ERROR_DISK_CHANGE = 107 

//   The disk is in use or locked by
//   another process.
public const int ERROR_DRIVE_LOCKED = 108 

//   The pipe has been ended.
public const int ERROR_BROKEN_PIPE = 109 

//   The system cannot open the
//   device or file specified.
public const int ERROR_OPEN_FAILED = 110 

//   The file name is too long.
public const int ERROR_BUFFER_OVERFLOW = 111 

//   There is not enough space on the disk.
public const int ERROR_DISK_FULL = 112 

//   No more internal file identifiers available.
public const int ERROR_NO_MORE_SEARCH_HANDLES = 113 

//   The target internal file identifier is incorrect.
public const int ERROR_INVALID_TARGET_HANDLE = 114 

//   The IOCTL call made by the application program is
//   not correct.
public const int ERROR_INVALID_CATEGORY = 117 

//   The verify-on-write switch parameter value is not
//   correct.
public const int ERROR_INVALID_VERIFY_SWITCH = 118 

//   The system does not support the command requested.
public const int ERROR_BAD_DRIVER_LEVEL = 119 

//   This function is only valid in Windows NT mode.
public const int ERROR_CALL_NOT_IMPLEMENTED = 120 

//   The semaphore timeout period has expired.
public const int ERROR_SEM_TIMEOUT = 121 

//   The data area passed to a system call is too
//   small.
public const int ERROR_INSUFFICIENT_BUFFER = 122 //  dderror

//   The filename, directory name, or volume label syntax is incorrect.
public const int ERROR_INVALID_NAME = 123 

//   The system call level is not correct.
public const int ERROR_INVALID_LEVEL = 124 

//   The disk has no volume label.
public const int ERROR_NO_VOLUME_LABEL = 125 

//   The specified module could not be found.
public const int ERROR_MOD_NOT_FOUND = 126 

//   The specified procedure could not be found.
public const int ERROR_PROC_NOT_FOUND = 127 

//   There are no child processes to wait for.
public const int ERROR_WAIT_NO_CHILDREN = 128 

//   The %1 application cannot be run in Windows NT mode.
public const int ERROR_CHILD_NOT_COMPLETE = 129 

//   Attempt to use a file handle to an open disk partition for an
//   operation other than raw disk I/O.
public const int ERROR_DIRECT_ACCESS_HANDLE = 130 

//   An attempt was made to move the file pointer before the beginning of the file.
public const int ERROR_NEGATIVE_SEEK = 131 

//   The file pointer cannot be set on the specified device or file.
public const int ERROR_SEEK_ON_DEVICE = 132 

//   A JOIN or SUBST command
//   cannot be used for a drive that
//   contains previously joined drives.
public const int ERROR_IS_JOIN_TARGET = 133 

//   An attempt was made to use a
//   JOIN or SUBST command on a drive that has
//   already been joined.
public const int ERROR_IS_JOINED = 134 

//   An attempt was made to use a
//   JOIN or SUBST command on a drive that has
//   already been substituted.
public const int ERROR_IS_SUBSTED = 135 

//   The system tried to delete
//   the JOIN of a drive that is not joined.
public const int ERROR_NOT_JOINED = 136 

//   The system tried to delete the
//   substitution of a drive that is not substituted.
public const int ERROR_NOT_SUBSTED = 137 

//   The system tried to join a drive
//   to a directory on a joined drive.
public const int ERROR_JOIN_TO_JOIN = 138 

//   The system tried to substitute a
//   drive to a directory on a substituted drive.
public const int ERROR_SUBST_TO_SUBST = 139 

//   The system tried to join a drive to
//   a directory on a substituted drive.
public const int ERROR_JOIN_TO_SUBST = 140 

//   The system tried to SUBST a drive
//   to a directory on a joined drive.
public const int ERROR_SUBST_TO_JOIN = 141 

//   The system cannot perform a JOIN or SUBST at this time.
public const int ERROR_BUSY_DRIVE = 142 

//   The system cannot join or substitute a
//   drive to or for a directory on the same drive.
public const int ERROR_SAME_DRIVE = 143 

//   The directory is not a subdirectory of the root directory.
public const int ERROR_DIR_NOT_ROOT = 144 

//   The directory is not empty.
public const int ERROR_DIR_NOT_EMPTY = 145 

//   The path specified is being used in
//   a substitute.
public const int ERROR_IS_SUBST_PATH = 146 

//   Not enough resources are available to
//   process this command.
public const int ERROR_IS_JOIN_PATH = 147 

//   The path specified cannot be used at this time.
public const int ERROR_PATH_BUSY = 148 

//   An attempt was made to join
//   or substitute a drive for which a directory
//   on the drive is the target of a previous
//   substitute.
public const int ERROR_IS_SUBST_TARGET = 149 

//   System trace information was not specified in your
//   CONFIG.SYS file, or tracing is disallowed.
public const int ERROR_SYSTEM_TRACE = 150 

//   The number of specified semaphore events for
//   DosMuxSemWait is not correct.
public const int ERROR_INVALID_EVENT_COUNT = 151 

//   DosMuxSemWait did not execute; too many semaphores
//   are already set.
public const int ERROR_TOO_MANY_MUXWAITERS = 152 

//   The DosMuxSemWait list is not correct.
public const int ERROR_INVALID_LIST_FORMAT = 153 

//   The volume label you entered exceeds the
//   11 character limit.  The first 11 characters were written
//   to disk.  Any characters that exceeded the 11 character limit
//   were automatically deleted.
public const int ERROR_LABEL_TOO_LONG = 154 

//   Cannot create another thread.
public const int ERROR_TOO_MANY_TCBS = 155 

//   The recipient process has refused the signal.
public const int ERROR_SIGNAL_REFUSED = 156 

//   The segment is already discarded and cannot be locked.
public const int ERROR_DISCARDED = 157 

//   The segment is already unlocked.
public const int ERROR_NOT_LOCKED = 158 

//   The address for the thread ID is not correct.
public const int ERROR_BAD_THREADID_ADDR = 159 

//   The argument string passed to DosExecPgm is not correct.
public const int ERROR_BAD_ARGUMENTS = 160 

//   The specified path is invalid.
public const int ERROR_BAD_PATHNAME = 161 

//   A signal is already pending.
public const int ERROR_SIGNAL_PENDING = 162 

//   No more threads can be created in the system.
public const int ERROR_MAX_THRDS_REACHED = 164 

//   Unable to lock a region of a file.
public const int ERROR_LOCK_FAILED = 167 

//   The requested resource is in use.
public const int ERROR_BUSY = 170 

//   A lock request was not outstanding for the supplied cancel region.
public const int ERROR_CANCEL_VIOLATION = 173 

//   The file system does not support atomic changes to the lock type.
public const int ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 174 

//   The system detected a segment number that was not correct.
public const int ERROR_INVALID_SEGMENT_NUMBER = 180 

//   The operating system cannot run %1.
public const int ERROR_INVALID_ORDINAL = 182 

//   Cannot create a file when that file already exists.
public const int ERROR_ALREADY_EXISTS = 183 

//   The flag passed is not correct.
public const int ERROR_INVALID_FLAG_NUMBER = 186 

//   The specified system semaphore name was not found.
public const int ERROR_SEM_NOT_FOUND = 187 

//   The operating system cannot run %1.
public const int ERROR_INVALID_STARTING_CODESEG = 188 

//   The operating system cannot run %1.
public const int ERROR_INVALID_STACKSEG = 189 

//   The operating system cannot run %1.
public const int ERROR_INVALID_MODULETYPE = 190 

//   Cannot run %1 in Windows NT mode.
public const int ERROR_INVALID_EXE_SIGNATURE = 191 

//   The operating system cannot run %1.
public const int ERROR_EXE_MARKED_INVALID = 192 

//   %1 is not a valid Windows NT application.
public const int ERROR_BAD_EXE_FORMAT = 193 

//   The operating system cannot run %1.
public const int ERROR_ITERATED_DATA_EXCEEDS_64k = 194 

//   The operating system cannot run %1.
public const int ERROR_INVALID_MINALLOCSIZE = 195 

//   The operating system cannot run this
//   application program.
public const int ERROR_DYNLINK_FROM_INVALID_RING = 196 

//   The operating system is not presently
//   configured to run this application.
public const int ERROR_IOPL_NOT_ENABLED = 197 

//   The operating system cannot run %1.
public const int ERROR_INVALID_SEGDPL = 198 

//   The operating system cannot run this
//   application program.
public const int ERROR_AUTODATASEG_EXCEEDS_64k = 199 

//   The code segment cannot be greater than or equal to 64KB.
public const int ERROR_RING2SEG_MUST_BE_MOVABLE = 200 

//   The operating system cannot run %1.
public const int ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 201 

//   The operating system cannot run %1.
public const int ERROR_INFLOOP_IN_RELOC_CHAIN = 202 

//   The system could not find the environment
//   option that was entered.
public const int ERROR_ENVVAR_NOT_FOUND = 203 

//   No process in the command subtree has a
//   signal handler.
public const int ERROR_NO_SIGNAL_SENT = 205 

//   The filename or extension is too long.
public const int ERROR_FILENAME_EXCED_RANGE = 206 

//   The ring 2 stack is in use.
public const int ERROR_RING2_STACK_IN_USE = 207 

//   The Global filename characters,  or ?, are entered
//   incorrectly or too many Global filename characters are specified.
public const int ERROR_META_EXPANSION_TOO_LONG = 208 

//   The signal being posted is not correct.
public const int ERROR_INVALID_SIGNAL_NUMBER = 209 

//   The signal handler cannot be set.
public const int ERROR_THREAD_1_INACTIVE = 210 

//   The segment is locked and cannot be reallocated.
public const int ERROR_LOCKED = 212 

//   Too many dynamic link modules are attached to this
//   program or dynamic link module.
public const int ERROR_TOO_MANY_MODULES = 214 

//   Can//t nest calls to LoadModule.
public const int ERROR_NESTING_NOT_ALLOWED = 215 

//   The pipe state is invalid.
public const int ERROR_BAD_PIPE = 230 

//   All pipe instances are busy.
public const int ERROR_PIPE_BUSY = 231 

//   The pipe is being closed.
public const int ERROR_NO_DATA = 232 

//   No process is on the other end of the pipe.
public const int ERROR_PIPE_NOT_CONNECTED = 233 

//   More data is available.
public const int ERROR_MORE_DATA = 234 //  dderror

//   The session was cancelled.
public const int ERROR_VC_DISCONNECTED = 240 

//   The specified extended attribute name was invalid.
public const int ERROR_INVALID_EA_NAME = 254 

//   The extended attributes are inconsistent.
public const int ERROR_EA_LIST_INCONSISTENT = 255 

//   No more data is available.
public const int ERROR_NO_MORE_ITEMS = 259 

//   The Copy API cannot be used.
public const int ERROR_CANNOT_COPY = 266 

//   The directory name is invalid.
public const int ERROR_DIRECTORY = 267 

//   The extended attributes did not fit in the buffer.
public const int ERROR_EAS_DIDNT_FIT = 275 

//   The extended attribute file on the mounted file system is corrupt.
public const int ERROR_EA_FILE_CORRUPT = 276 

//   The extended attribute table file is full.
public const int ERROR_EA_TABLE_FULL = 277 

//   The specified extended attribute handle is invalid.
public const int ERROR_INVALID_EA_HANDLE = 278 

//   The mounted file system does not support extended attributes.
public const int ERROR_EAS_NOT_SUPPORTED = 282 

//   Attempt to release mutex not owned by caller.
public const int ERROR_NOT_OWNER = 288 

//   Too many posts were made to a semaphore.
public const int ERROR_TOO_MANY_POSTS = 298 

//   The system cannot find message for message number 0x%1
//   in message file for %2.
public const int ERROR_MR_MID_NOT_FOUND = 317 

//   Attempt to access invalid address.
public const int ERROR_INVALID_ADDRESS = 487 

//   Arithmetic result exceeded 32 bits.
public const int ERROR_ARITHMETIC_OVERFLOW = 534 

//   There is a process on other end of the pipe.
public const int ERROR_PIPE_CONNECTED = 535 

//   Waiting for a process to open the other end of the pipe.
public const int ERROR_PIPE_LISTENING = 536 

//   Access to the extended attribute was denied.
public const int ERROR_EA_ACCESS_DENIED = 994 

//   The I/O operation has been aborted because of either a thread exit
//   or an application request.
public const int ERROR_OPERATION_ABORTED = 995 

//   Overlapped I/O event is not in a signalled state.
public const int ERROR_IO_INCOMPLETE = 996 

//   Overlapped I/O operation is in progress.
public const int ERROR_IO_PENDING = 997 //  dderror

//   Invalid access to memory location.
public const int ERROR_NOACCESS = 998 

//   Error performing inpage operation.
public const int ERROR_SWAPERROR = 999 

//   Recursion too deep, stack overflowed.
public const int ERROR_STACK_OVERFLOW = 1001 

//   The window cannot act on the sent message.
public const int ERROR_INVALID_MESSAGE = 1002 

//   Cannot complete this function.
public const int ERROR_CAN_NOT_COMPLETE = 1003 

//   Invalid flags.
public const int ERROR_INVALID_FLAGS = 1004 

//   The volume does not contain a recognized file system.
//   Please make sure that all required file system drivers are loaded and that the
//   volume is not corrupt.
public const int ERROR_UNRECOGNIZED_VOLUME = 1005 

//   The volume for a file has been externally altered such that the
//   opened file is no longer valid.
public const int ERROR_FILE_INVALID = 1006 

//   The requested operation cannot be performed in full-screen mode.
public const int ERROR_FULLSCREEN_MODE = 1007 

//   An attempt was made to reference a token that does not exist.
public const int ERROR_NO_TOKEN = 1008 

//   The configuration registry database is corrupt.
public const int ERROR_BADDB = 1009 

//   The configuration registry key is invalid.
public const int ERROR_BADKEY = 1010 

//   The configuration registry key could not be opened.
public const int ERROR_CANTOPEN = 1011 

//   The configuration registry key could not be read.
public const int ERROR_CANTREAD = 1012 

//   The configuration registry key could not be written.
public const int ERROR_CANTWRITE = 1013 

//   One of the files in the Registry database had to be recovered
//   by use of a log or alternate copy.  The recovery was successful.
public const int ERROR_REGISTRY_RECOVERED = 1014 

//   The Registry is corrupt. The structure of one of the files that contains
//   Registry data is corrupt, or the system//s image of the file in memory
//   is corrupt, or the file could not be recovered because the alternate
//   copy or log was absent or corrupt.
public const int ERROR_REGISTRY_CORRUPT = 1015 

//   An I/O operation initiated by the Registry failed unrecoverably.
//   The Registry could not read in, or write out, or flush, one of the files
//   that contain the system//s image of the Registry.
public const int ERROR_REGISTRY_IO_FAILED = 1016 

//   The system has attempted to load or restore a file into the Registry, but the
//   specified file is not in a Registry file format.
public const int ERROR_NOT_REGISTRY_FILE = 1017 

//   Illegal operation attempted on a Registry key which has been marked for deletion.
public const int ERROR_KEY_DELETED = 1018 

//   System could not allocate the required space in a Registry log.
public const int ERROR_NO_LOG_SPACE = 1019 

//   Cannot create a symbolic link in a Registry key that already
//   has subkeys or values.
public const int ERROR_KEY_HAS_CHILDREN = 1020 

//   Cannot create a stable subkey under a volatile parent key.
public const int ERROR_CHILD_MUST_BE_VOLATILE = 1021 

//   A notify change request is being completed and the information
//   is not being returned in the caller//s buffer. The caller now
//   needs to enumerate the files to find the changes.
public const int ERROR_NOTIFY_ENUM_DIR = 1022 

//   A stop control has been sent to a service which other running services
//   are dependent on.
public const int ERROR_DEPENDENT_SERVICES_RUNNING = 1051 

//   The requested control is not valid for this service
public const int ERROR_INVALID_SERVICE_CONTROL = 1052 

//   The service did not respond to the start or control request in a timely
//   fashion.
public const int ERROR_SERVICE_REQUEST_TIMEOUT = 1053 

//   A thread could not be created for the service.
public const int ERROR_SERVICE_NO_THREAD = 1054 

//   The service database is locked.
public const int ERROR_SERVICE_DATABASE_LOCKED = 1055 

//   An instance of the service is already running.
public const int ERROR_SERVICE_ALREADY_RUNNING = 1056 

//   The account name is invalid or does not exist.
public const int ERROR_INVALID_SERVICE_ACCOUNT = 1057 

//   The specified service is disabled and cannot be started.
public const int ERROR_SERVICE_DISABLED = 1058 

//   Circular service dependency was specified.
public const int ERROR_CIRCULAR_DEPENDENCY = 1059 

//   The specified service does not exist as an installed service.
public const int ERROR_SERVICE_DOES_NOT_EXIST = 1060 

//   The service cannot accept control messages at this time.
public const int ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 1061 

//   The service has not been started.
public const int ERROR_SERVICE_NOT_ACTIVE = 1062 

//   The service process could not connect to the service controller.
public const int ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 1063 

//   An exception occurred in the service when handling the control request.
public const int ERROR_EXCEPTION_IN_SERVICE = 1064 

//   The database specified does not exist.
public const int ERROR_DATABASE_DOES_NOT_EXIST = 1065 

//   The service has returned a service-specific error code.
public const int ERROR_SERVICE_SPECIFIC_ERROR = 1066 

//   The process terminated unexpectedly.
public const int ERROR_PROCESS_ABORTED = 1067 

//   The dependency service or group failed to start.
public const int ERROR_SERVICE_DEPENDENCY_FAIL = 1068 

//   The service did not start due to a logon failure.
public const int ERROR_SERVICE_LOGON_FAILED = 1069 

//   After starting, the service hung in a start-pending state.
public const int ERROR_SERVICE_START_HANG = 1070 

//   The specified service database lock is invalid.
public const int ERROR_INVALID_SERVICE_LOCK = 1071 

//   The specified service has been marked for deletion.
public const int ERROR_SERVICE_MARKED_FOR_DELETE = 1072 

//   The specified service already exists.
public const int ERROR_SERVICE_EXISTS = 1073 

//   The system is currently running with the last-known-good configuration.
public const int ERROR_ALREADY_RUNNING_LKG = 1074 

//   The dependency service does not exist or has been marked for
//   deletion.
public const int ERROR_SERVICE_DEPENDENCY_DELETED = 1075 

//   The current boot has already been accepted for use as the
//   last-known-good control set.
public const int ERROR_BOOT_ALREADY_ACCEPTED = 1076 

//   No attempts to start the service have been made since the last boot.
public const int ERROR_SERVICE_NEVER_STARTED = 1077 

//   The name is already in use as either a service name or a service display
//   name.
public const int ERROR_DUPLICATE_SERVICE_NAME = 1078 

//   The physical end of the tape has been reached.
public const int ERROR_END_OF_MEDIA = 1100 

//   A tape access reached a filemark.
public const int ERROR_FILEMARK_DETECTED = 1101 

//   Beginning of tape or partition was encountered.
public const int ERROR_BEGINNING_OF_MEDIA = 1102 

//   A tape access reached the end of a set of files.
public const int ERROR_SETMARK_DETECTED = 1103 

//   No more data is on the tape.
public const int ERROR_NO_DATA_DETECTED = 1104 

//   Tape could not be partitioned.
public const int ERROR_PARTITION_FAILURE = 1105 

//   When accessing a new tape of a multivolume partition, the current
//   blocksize is incorrect.
public const int ERROR_INVALID_BLOCK_LENGTH = 1106 

//   Tape partition information could not be found when loading a tape.
public const int ERROR_DEVICE_NOT_PARTITIONED = 1107 

//   Unable to lock the media eject mechanism.
public const int ERROR_UNABLE_TO_LOCK_MEDIA = 1108 

//   Unable to unload the media.
public const int ERROR_UNABLE_TO_UNLOAD_MEDIA = 1109 

//   Media in drive may have changed.
public const int ERROR_MEDIA_CHANGED = 1110 

//   The I/O bus was reset.
public const int ERROR_BUS_RESET = 1111 

//   No media in drive.
public const int ERROR_NO_MEDIA_IN_DRIVE = 1112 

//   No mapping for the Unicode character exists in the target multi-byte code page.
public const int ERROR_NO_UNICODE_TRANSLATION = 1113 

//   A dynamic link library (DLL) initialization routine failed.
public const int ERROR_DLL_INIT_FAILED = 1114 

//   A system shutdown is in progress.
public const int ERROR_SHUTDOWN_IN_PROGRESS = 1115 

//   Unable to abort the system shutdown because no shutdown was in progress.
public const int ERROR_NO_SHUTDOWN_IN_PROGRESS = 1116 

//   The request could not be performed because of an I/O device error.
public const int ERROR_IO_DEVICE = 1117 

//   No serial device was successfully initialized.  The serial driver will unload.
public const int ERROR_SERIAL_NO_DEVICE = 1118 

//   Unable to open a device that was sharing an interrupt request (IRQ)
//   with other devices. At least one other device that uses that IRQ
//   was already opened.
public const int ERROR_IRQ_BUSY = 1119 

//   A serial I/O operation was completed by another write to the serial port.
//   (The IOCTL_SERIAL_XOFF_COUNTER reached zero.)
public const int ERROR_MORE_WRITES = 1120 

//   A serial I/O operation completed because the time-out period expired.
//   (The IOCTL_SERIAL_XOFF_COUNTER did not reach zero.)
public const int ERROR_COUNTER_TIMEOUT = 1121 

//   No ID address mark was found on the floppy disk.
public const int ERROR_FLOPPY_ID_MARK_NOT_FOUND = 1122 

//   Mismatch between the floppy disk sector ID field and the floppy disk
//   controller track address.
public const int ERROR_FLOPPY_WRONG_CYLINDER = 1123 

//   The floppy disk controller reported an error that is not recognized
//   by the floppy disk driver.
public const int ERROR_FLOPPY_UNKNOWN_ERROR = 1124 

//   The floppy disk controller returned inconsistent results in its registers.
public const int ERROR_FLOPPY_BAD_REGISTERS = 1125 

//   While accessing the hard disk, a recalibrate operation failed, even after retries.
public const int ERROR_DISK_RECALIBRATE_FAILED = 1126 

//   While accessing the hard disk, a disk operation failed even after retries.
public const int ERROR_DISK_OPERATION_FAILED = 1127 

//   While accessing the hard disk, a disk controller reset was needed, but
//   even that failed.
public const int ERROR_DISK_RESET_FAILED = 1128 

//   Physical end of tape encountered.
public const int ERROR_EOM_OVERFLOW = 1129 

//   Not enough server storage is available to process this command.
public const int ERROR_NOT_ENOUGH_SERVER_MEMORY = 1130 

//   A potential deadlock condition has been detected.
public const int ERROR_POSSIBLE_DEADLOCK = 1131 

//   The base address or the file offset specified does not have the proper
//   alignment.
public const int ERROR_MAPPED_ALIGNMENT = 1132 

// NEW for Win32
public const int ERROR_INVALID_PIXEL_FORMAT = 2000
public const int ERROR_BAD_DRIVER = 2001
public const int ERROR_INVALID_WINDOW_STYLE = 2002
public const int ERROR_METAFILE_NOT_SUPPORTED = 2003
public const int ERROR_TRANSFORM_NOT_SUPPORTED = 2004
public const int ERROR_CLIPPING_NOT_SUPPORTED = 2005
public const int ERROR_UNKNOWN_PRINT_MONITOR = 3000
public const int ERROR_PRINTER_DRIVER_IN_USE = 3001
public const int ERROR_SPOOL_FILE_NOT_FOUND = 3002
public const int ERROR_SPL_NO_STARTDOC = 3003
public const int ERROR_SPL_NO_ADDJOB = 3004
public const int ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 3005
public const int ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 3006
public const int ERROR_WINS_INTERNAL = 4000
public const int ERROR_CAN_NOT_DEL_LOCAL_WINS = 4001
public const int ERROR_STATIC_INIT = 4002
public const int ERROR_INC_BACKUP = 4003
public const int ERROR_FULL_BACKUP = 4004
public const int ERROR_REC_NON_EXISTENT = 4005
public const int ERROR_RPL_NOT_ALLOWED = 4006
public const int SEVERITY_SUCCESS = 0
public const int SEVERITY_ERROR = 1
public const int FACILITY_NT_BIT =  H10000000
public const int NOERROR = 0
public const int E_UNEXPECTED =  H8000FFFF
public const int E_NOTIMPL =  H80004001
public const int E_OUTOFMEMORY =  H8007000E
public const int E_INVALIDARG =  H80070057
public const int E_NOINTERFACE =  H80004002
public const int E_POINTER =  H80004003
public const int E_HANDLE =  H80070006
public const int E_ABORT =  H80004004
public const int E_FAIL =  H80004005
public const int E_ACCESSDENIED =  H80070005
public const int CO_E_INIT_TLS =  H80004006
public const int CO_E_INIT_SHARED_ALLOCATOR =  H80004007
public const int CO_E_INIT_MEMORY_ALLOCATOR =  H80004008
public const int CO_E_INIT_CLASS_CACHE =  H80004009
public const int CO_E_INIT_RPC_CHANNEL =  H8000400A
public const int CO_E_INIT_TLS_SET_CHANNEL_CONTROL =  H8000400B
public const int CO_E_INIT_TLS_CHANNEL_CONTROL =  H8000400C
public const int CO_E_INIT_UNACCEPTED_USER_ALLOCATOR =  H8000400D
public const int CO_E_INIT_SCM_MUTEX_EXISTS =  H8000400E
public const int CO_E_INIT_SCM_FILE_MAPPING_EXISTS =  H8000400F
public const int CO_E_INIT_SCM_MAP_VIEW_OF_FILE =  H80004010
public const int CO_E_INIT_SCM_EXEC_FAILURE =  H80004011
public const int CO_E_INIT_ONLY_SINGLE_THREADED =  H80004012
public const int S_OK =  H0
public const int S_FALSE =  H1
public const int OLE_E_FIRST =  H80040000
public const int OLE_E_LAST =  H800400FF
public const int OLE_S_FIRST =  H40000
public const int OLE_S_LAST =  H400FF
public const int OLE_E_OLEVERB =  H80040000
public const int OLE_E_ADVF =  H80040001
public const int OLE_E_ENUM_NOMORE =  H80040002
public const int OLE_E_ADVISENOTSUPPORTED =  H80040003
public const int OLE_E_NOCONNECTION =  H80040004
public const int OLE_E_NOTRUNNING =  H80040005
public const int OLE_E_NOCACHE =  H80040006
public const int OLE_E_BLANK =  H80040007
public const int OLE_E_CLASSDIFF =  H80040008
public const int OLE_E_CANT_GETMONIKER =  H80040009
public const int OLE_E_CANT_BINDTOSOURCE =  H8004000A
public const int OLE_E_STATIC =  H8004000B
public const int OLE_E_PROMPTSAVECANCELLED =  H8004000C
public const int OLE_E_INVALIDRECT =  H8004000D
public const int OLE_E_WRONGCOMPOBJ =  H8004000E
public const int OLE_E_INVALIDHWND =  H8004000F
public const int OLE_E_NOT_INPLACEACTIVE =  H80040010
public const int OLE_E_CANTCONVERT =  H80040011
public const int OLE_E_NOSTORAGE =  H80040012
public const int DV_E_FORMATETC =  H80040064
public const int DV_E_DVTARGETDEVICE =  H80040065
public const int DV_E_STGMEDIUM =  H80040066
public const int DV_E_STATDATA =  H80040067
public const int DV_E_LINDEX =  H80040068
public const int DV_E_TYMED =  H80040069
public const int DV_E_CLIPFORMAT =  H8004006A
public const int DV_E_DVASPECT =  H8004006B
public const int DV_E_DVTARGETDEVICE_SIZE =  H8004006C
public const int DV_E_NOIVIEWOBJECT =  H8004006D
public const int DRAGDROP_E_FIRST =  H80040100
public const int DRAGDROP_E_LAST =  H8004010F
public const int DRAGDROP_S_FIRST =  H40100
public const int DRAGDROP_S_LAST =  H4010F
public const int DRAGDROP_E_NOTREGISTERED =  H80040100
public const int DRAGDROP_E_ALREADYREGISTERED =  H80040101
public const int DRAGDROP_E_INVALIDHWND =  H80040102
public const int CLASSFACTORY_E_FIRST =  H80040110
public const int CLASSFACTORY_E_LAST =  H8004011F
public const int CLASSFACTORY_S_FIRST =  H40110
public const int CLASSFACTORY_S_LAST =  H4011F
public const int CLASS_E_NOAGGREGATION =  H80040110
public const int CLASS_E_CLASSNOTAVAILABLE =  H80040111
public const int MARSHAL_E_FIRST =  H80040120
public const int MARSHAL_E_LAST =  H8004012F
public const int MARSHAL_S_FIRST =  H40120
public const int MARSHAL_S_LAST =  H4012F
public const int DATA_E_FIRST =  H80040130
public const int DATA_E_LAST =  H8004013F
public const int DATA_S_FIRST =  H40130
public const int DATA_S_LAST =  H4013F
public const int VIEW_E_FIRST =  H80040140
public const int VIEW_E_LAST =  H8004014F
public const int VIEW_S_FIRST =  H40140
public const int VIEW_S_LAST =  H4014F
public const int VIEW_E_DRAW =  H80040140
public const int REGDB_E_FIRST =  H80040150
public const int REGDB_E_LAST =  H8004015F
public const int REGDB_S_FIRST =  H40150
public const int REGDB_S_LAST =  H4015F
public const int REGDB_E_READREGDB =  H80040150
public const int REGDB_E_WRITEREGDB =  H80040151
public const int REGDB_E_KEYMISSING =  H80040152
public const int REGDB_E_INVALIDVALUE =  H80040153
public const int REGDB_E_CLASSNOTREG =  H80040154
public const int REGDB_E_IIDNOTREG =  H80040155
public const int CACHE_E_FIRST =  H80040170
public const int CACHE_E_LAST =  H8004017F
public const int CACHE_S_FIRST =  H40170
public const int CACHE_S_LAST =  H4017F
public const int CACHE_E_NOCACHE_UPDATED =  H80040170
public const int OLEOBJ_E_FIRST =  H80040180
public const int OLEOBJ_E_LAST =  H8004018F
public const int OLEOBJ_S_FIRST =  H40180
public const int OLEOBJ_S_LAST =  H4018F
public const int OLEOBJ_E_NOVERBS =  H80040180
public const int OLEOBJ_E_INVALIDVERB =  H80040181
public const int CLIENTSITE_E_FIRST =  H80040190
public const int CLIENTSITE_E_LAST =  H8004019F
public const int CLIENTSITE_S_FIRST =  H40190
public const int CLIENTSITE_S_LAST =  H4019F
public const int INPLACE_E_NOTUNDOABLE =  H800401A0
public const int INPLACE_E_NOTOOLSPACE =  H800401A1
public const int INPLACE_E_FIRST =  H800401A0
public const int INPLACE_E_LAST =  H800401AF
public const int INPLACE_S_FIRST =  H401A0
public const int INPLACE_S_LAST =  H401AF
public const int ENUM_E_FIRST =  H800401B0
public const int ENUM_E_LAST =  H800401BF
public const int ENUM_S_FIRST =  H401B0
public const int ENUM_S_LAST =  H401BF
public const int CONVERT10_E_FIRST =  H800401C0
public const int CONVERT10_E_LAST =  H800401CF
public const int CONVERT10_S_FIRST =  H401C0
public const int CONVERT10_S_LAST =  H401CF
public const int CONVERT10_E_OLESTREAM_GET =  H800401C0
public const int CONVERT10_E_OLESTREAM_PUT =  H800401C1
public const int CONVERT10_E_OLESTREAM_FMT =  H800401C2
public const int CONVERT10_E_OLESTREAM_BITMAP_TO_DIB =  H800401C3
public const int CONVERT10_E_STG_FMT =  H800401C4
public const int CONVERT10_E_STG_NO_STD_STREAM =  H800401C5
public const int CONVERT10_E_STG_DIB_TO_BITMAP =  H800401C6
public const int CLIPBRD_E_FIRST =  H800401D0
public const int CLIPBRD_E_LAST =  H800401DF
public const int CLIPBRD_S_FIRST =  H401D0
public const int CLIPBRD_S_LAST =  H401DF
public const int CLIPBRD_E_CANT_OPEN =  H800401D0
public const int CLIPBRD_E_CANT_EMPTY =  H800401D1
public const int CLIPBRD_E_CANT_SET =  H800401D2
public const int CLIPBRD_E_BAD_DATA =  H800401D3
public const int CLIPBRD_E_CANT_CLOSE =  H800401D4
public const int MK_E_FIRST =  H800401E0
public const int MK_E_LAST =  H800401EF
public const int MK_S_FIRST =  H401E0
public const int MK_S_LAST =  H401EF
public const int MK_E_CONNECTMANUALLY =  H800401E0
public const int MK_E_EXCEEDEDDEADLINE =  H800401E1
public const int MK_E_NEEDGENERIC =  H800401E2
public const int MK_E_UNAVAILABLE =  H800401E3
public const int MK_E_SYNTAX =  H800401E4
public const int MK_E_NOOBJECT =  H800401E5
public const int MK_E_INVALIDEXTENSION =  H800401E6
public const int MK_E_INTERMEDIATEINTERFACENOTSUPPORTED =  H800401E7
public const int MK_E_NOTBINDABLE =  H800401E8
public const int MK_E_NOTBOUND =  H800401E9
public const int MK_E_CANTOPENFILE =  H800401EA
public const int MK_E_MUSTBOTHERUSER =  H800401EB
public const int MK_E_NOINVERSE =  H800401EC
public const int MK_E_NOSTORAGE =  H800401ED
public const int MK_E_NOPREFIX =  H800401EE
public const int MK_E_ENUMERATION_FAILED =  H800401EF
public const int CO_E_FIRST =  H800401F0
public const int CO_E_LAST =  H800401FF
public const int CO_S_FIRST =  H401F0
public const int CO_S_LAST =  H401FF
public const int CO_E_NOTINITIALIZED =  H800401F0
public const int CO_E_ALREADYINITIALIZED =  H800401F1
public const int CO_E_CANTDETERMINECLASS =  H800401F2
public const int CO_E_CLASSSTRING =  H800401F3
public const int CO_E_IIDSTRING =  H800401F4
public const int CO_E_APPNOTFOUND =  H800401F5
public const int CO_E_APPSINGLEUSE =  H800401F6
public const int CO_E_ERRORINAPP =  H800401F7
public const int CO_E_DLLNOTFOUND =  H800401F8
public const int CO_E_ERRORINDLL =  H800401F9
public const int CO_E_WRONGOSFORAPP =  H800401FA
public const int CO_E_OBJNOTREG =  H800401FB
public const int CO_E_OBJISREG =  H800401FC
public const int CO_E_OBJNOTCONNECTED =  H800401FD
public const int CO_E_APPDIDNTREG =  H800401FE
public const int CO_E_RELEASED =  H800401FF
public const int OLE_S_USEREG =  H40000
public const int OLE_S_STATIC =  H40001
public const int OLE_S_MAC_CLIPFORMAT =  H40002
public const int DRAGDROP_S_DROP =  H40100
public const int DRAGDROP_S_CANCEL =  H40101
public const int DRAGDROP_S_USEDEFAULTCURSORS =  H40102
public const int DATA_S_SAMEFORMATETC =  H40130
public const int VIEW_S_ALREADY_FROZEN =  H40140
public const int CACHE_S_FORMATETC_NOTSUPPORTED =  H40170
public const int CACHE_S_SAMECACHE =  H40171
public const int CACHE_S_SOMECACHES_NOTUPDATED =  H40172
public const int OLEOBJ_S_INVALIDVERB =  H40180
public const int OLEOBJ_S_CANNOT_DOVERB_NOW =  H40181
public const int OLEOBJ_S_INVALIDHWND =  H40182
public const int INPLACE_S_TRUNCATED =  H401A0
public const int CONVERT10_S_NO_PRESENTATION =  H401C0
public const int MK_S_REDUCED_TO_SELF =  H401E2
public const int MK_S_ME =  H401E4
public const int MK_S_HIM =  H401E5
public const int MK_S_US =  H401E6
public const int MK_S_MONIKERALREADYREGISTERED =  H401E7
public const int CO_E_CLASS_CREATE_FAILED =  H80080001
public const int CO_E_SCM_ERROR =  H80080002
public const int CO_E_SCM_RPC_FAILURE =  H80080003
public const int CO_E_BAD_PATH =  H80080004
public const int CO_E_SERVER_EXEC_FAILURE =  H80080005
public const int CO_E_OBJSRV_RPC_FAILURE =  H80080006
public const int MK_E_NO_NORMALIZED =  H80080007
public const int CO_E_SERVER_STOPPING =  H80080008
public const int MEM_E_INVALID_ROOT =  H80080009
public const int MEM_E_INVALID_LINK =  H80080010
public const int MEM_E_INVALID_SIZE =  H80080011
public const int DISP_E_UNKNOWNINTERFACE =  H80020001
public const int DISP_E_MEMBERNOTFOUND =  H80020003
public const int DISP_E_PARAMNOTFOUND =  H80020004
public const int DISP_E_TYPEMISMATCH =  H80020005
public const int DISP_E_UNKNOWNNAME =  H80020006
public const int DISP_E_NONAMEDARGS =  H80020007
public const int DISP_E_BADVARTYPE =  H80020008
public const int DISP_E_EXCEPTION =  H80020009
public const int DISP_E_OVERFLOW =  H8002000A
public const int DISP_E_BADINDEX =  H8002000B
public const int DISP_E_UNKNOWNLCID =  H8002000C
public const int DISP_E_ARRAYISLOCKED =  H8002000D
public const int DISP_E_BADPARAMCOUNT =  H8002000E
public const int DISP_E_PARAMNOTOPTIONAL =  H8002000F
public const int DISP_E_BADCALLEE =  H80020010
public const int DISP_E_NOTACOLLECTION =  H80020011
public const int TYPE_E_BUFFERTOOSMALL =  H80028016
public const int TYPE_E_INVDATAREAD =  H80028018
public const int TYPE_E_UNSUPFORMAT =  H80028019
public const int TYPE_E_REGISTRYACCESS =  H8002801C
public const int TYPE_E_LIBNOTREGISTERED =  H8002801D
public const int TYPE_E_UNDEFINEDTYPE =  H80028027
public const int TYPE_E_QUALIFIEDNAMEDISALLOWED =  H80028028
public const int TYPE_E_INVALIDSTATE =  H80028029
public const int TYPE_E_WRONGTYPEKIND =  H8002802A
public const int TYPE_E_ELEMENTNOTFOUND =  H8002802B
public const int TYPE_E_AMBIGUOUSNAME =  H8002802C
public const int TYPE_E_NAMECONFLICT =  H8002802D
public const int TYPE_E_UNKNOWNLCID =  H8002802E
public const int TYPE_E_DLLFUNCTIONNOTFOUND =  H8002802F
public const int TYPE_E_BADMODULEKIND =  H800288BD
public const int TYPE_E_SIZETOOBIG =  H800288C5
public const int TYPE_E_DUPLICATEID =  H800288C6
public const int TYPE_E_INVALIDID =  H800288CF
public const int TYPE_E_TYPEMISMATCH =  H80028CA0
public const int TYPE_E_OUTOFBOUNDS =  H80028CA1
public const int TYPE_E_IOERROR =  H80028CA2
public const int TYPE_E_CANTCREATETMPFILE =  H80028CA3
public const int TYPE_E_CANTLOADLIBRARY =  H80029C4A
public const int TYPE_E_INCONSISTENTPROPFUNCS =  H80029C83
public const int TYPE_E_CIRCULARTYPE =  H80029C84
public const int STG_E_INVALIDFUNCTION =  H80030001
public const int STG_E_FILENOTFOUND =  H80030002
public const int STG_E_PATHNOTFOUND =  H80030003
public const int STG_E_TOOMANYOPENFILES =  H80030004
public const int STG_E_ACCESSDENIED =  H80030005
public const int STG_E_INVALIDHANDLE =  H80030006
public const int STG_E_INSUFFICIENTMEMORY =  H80030008
public const int STG_E_INVALIDPOINTER =  H80030009
public const int STG_E_NOMOREFILES =  H80030012
public const int STG_E_DISKISWRITEPROTECTED =  H80030013
public const int STG_E_SEEKERROR =  H80030019
public const int STG_E_WRITEFAULT =  H8003001D
public const int STG_E_READFAULT =  H8003001E
public const int STG_E_SHAREVIOLATION =  H80030020
public const int STG_E_LOCKVIOLATION =  H80030021
public const int STG_E_FILEALREADYEXISTS =  H80030050
public const int STG_E_INVALIDPARAMETER =  H80030057
public const int STG_E_MEDIUMFULL =  H80030070
public const int STG_E_ABNORMALAPIEXIT =  H800300FA
public const int STG_E_INVALIDHEADER =  H800300FB
public const int STG_E_INVALIDNAME =  H800300FC
public const int STG_E_UNKNOWN =  H800300FD
public const int STG_E_UNIMPLEMENTEDFUNCTION =  H800300FE
public const int STG_E_INVALIDFLAG =  H800300FF
public const int STG_E_INUSE =  H80030100
public const int STG_E_NOTCURRENT =  H80030101
public const int STG_E_REVERTED =  H80030102
public const int STG_E_CANTSAVE =  H80030103
public const int STG_E_OLDFORMAT =  H80030104
public const int STG_E_OLDDLL =  H80030105
public const int STG_E_SHAREREQUIRED =  H80030106
public const int STG_E_NOTFILEBASEDSTORAGE =  H80030107
public const int STG_E_EXTANTMARSHALLINGS =  H80030108
public const int STG_S_CONVERTED =  H30200
public const int RPC_E_CALL_REJECTED =  H80010001
public const int RPC_E_CALL_CANCELED =  H80010002
public const int RPC_E_CANTPOST_INSENDCALL =  H80010003
public const int RPC_E_CANTCALLOUT_INASYNCCALL =  H80010004
public const int RPC_E_CANTCALLOUT_INEXTERNALCALL =  H80010005
public const int RPC_E_CONNECTION_TERMINATED =  H80010006
public const int RPC_E_SERVER_DIED =  H80010007
public const int RPC_E_CLIENT_DIED =  H80010008
public const int RPC_E_INVALID_DATAPACKET =  H80010009
public const int RPC_E_CANTTRANSMIT_CALL =  H8001000A
public const int RPC_E_CLIENT_CANTMARSHAL_DATA =  H8001000B
public const int RPC_E_CLIENT_CANTUNMARSHAL_DATA =  H8001000C
public const int RPC_E_SERVER_CANTMARSHAL_DATA =  H8001000D
public const int RPC_E_SERVER_CANTUNMARSHAL_DATA =  H8001000E
public const int RPC_E_INVALID_DATA =  H8001000F
public const int RPC_E_INVALID_PARAMETER =  H80010010
public const int RPC_E_CANTCALLOUT_AGAIN =  H80010011
public const int RPC_E_SERVER_DIED_DNE =  H80010012
public const int RPC_E_SYS_CALL_FAILED =  H80010100
public const int RPC_E_OUT_OF_RESOURCES =  H80010101
public const int RPC_E_ATTEMPTED_MULTITHREAD =  H80010102
public const int RPC_E_NOT_REGISTERED =  H80010103
public const int RPC_E_FAULT =  H80010104
public const int RPC_E_SERVERFAULT =  H80010105
public const int RPC_E_CHANGED_MODE =  H80010106
public const int RPC_E_INVALIDMETHOD =  H80010107
public const int RPC_E_DISCONNECTED =  H80010108
public const int RPC_E_RETRY =  H80010109
public const int RPC_E_SERVERCALL_RETRYLATER =  H8001010A
public const int RPC_E_SERVERCALL_REJECTED =  H8001010B
public const int RPC_E_INVALID_CALLDATA =  H8001010C
public const int RPC_E_CANTCALLOUT_ININPUTSYNCCALL =  H8001010D
public const int RPC_E_WRONG_THREAD =  H8001010E
public const int RPC_E_THREAD_NOT_INIT =  H8001010F
public const int RPC_E_UNEXPECTED =  H8001FFFF


// /////////////////////////
//                        //
//  Winnet32 Status Codes //
//                        //
// /////////////////////////

//   The specified username is invalid.
public const int ERROR_BAD_USERNAME = 2202 

//   This network connection does not exist.
public const int ERROR_NOT_CONNECTED = 2250 

//   This network connection has files open or requests pending.
public const int ERROR_OPEN_FILES = 2401 

//   The device is in use by an active process and cannot be disconnected.
public const int ERROR_DEVICE_IN_USE = 2404 

//   The specified device name is invalid.
public const int ERROR_BAD_DEVICE = 1200 

//   The device is not currently connected but it is a remembered connection.
public const int ERROR_CONNECTION_UNAVAIL = 1201 

//   An attempt was made to remember a device that had previously been remembered.
public const int ERROR_DEVICE_ALREADY_REMEMBERED = 1202 

//   No network provider accepted the given network path.
public const int ERROR_NO_NET_OR_BAD_PATH = 1203 

//   The specified network provider name is invalid.
public const int ERROR_BAD_PROVIDER = 1204 

//   Unable to open the network connection profile.
public const int ERROR_CANNOT_OPEN_PROFILE = 1205 

//   The network connection profile is corrupt.
public const int ERROR_BAD_PROFILE = 1206 

//   Cannot enumerate a non-container.
public const int ERROR_NOT_CONTAINER = 1207 

//   An extended error has occurred.
public const int ERROR_EXTENDED_ERROR = 1208 

//   The format of the specified group name is invalid.
public const int ERROR_INVALID_GROUPNAME = 1209 

//   The format of the specified computer name is invalid.
public const int ERROR_INVALID_COMPUTERNAME = 1210 

//   The format of the specified event name is invalid.
public const int ERROR_INVALID_EVENTNAME = 1211 

//   The format of the specified domain name is invalid.
public const int ERROR_INVALID_DOMAINNAME = 1212 

//   The format of the specified service name is invalid.
public const int ERROR_INVALID_SERVICENAME = 1213 

//   The format of the specified network name is invalid.
public const int ERROR_INVALID_NETNAME = 1214 

//   The format of the specified share name is invalid.
public const int ERROR_INVALID_SHARENAME = 1215 

//   The format of the specified password is invalid.
public const int ERROR_INVALID_PASSWORDNAME = 1216 

//   The format of the specified message name is invalid.
public const int ERROR_INVALID_MESSAGENAME = 1217 

//   The format of the specified message destination is invalid.
public const int ERROR_INVALID_MESSAGEDEST = 1218 

//   The credentials supplied conflict with an existing set of credentials.
public const int ERROR_SESSION_CREDENTIAL_CONFLICT = 1219 

//   An attempt was made to establish a session to a Lan Manager server, but there
//   are already too many sessions established to that server.
public const int ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 1220 

//   The workgroup or domain name is already in use by another computer on the
//   network.
public const int ERROR_DUP_DOMAINNAME = 1221 

//   The network is not present or not started.
public const int ERROR_NO_NETWORK = 1222 


// /////////////////////////
//                        //
//  Security Status Codes //
//                        //
// /////////////////////////

//   Not all privileges referenced are assigned to the caller.
public const int ERROR_NOT_ALL_ASSIGNED = 1300 

//   Some mapping between account names and security IDs was not done.
public const int ERROR_SOME_NOT_MAPPED = 1301 

//   No system quota limits are specifically set for this account.
public const int ERROR_NO_QUOTAS_FOR_ACCOUNT = 1302 

//   No encryption key is available.  A well-known encryption key was returned.
public const int ERROR_LOCAL_USER_SESSION_KEY = 1303 

//   The NT password is too complex to be converted to a LAN Manager
//   password.  The LAN Manager password returned is a NULL string.
public const int ERROR_NULL_LM_PASSWORD = 1304 

//   The revision level is unknown.
public const int ERROR_UNKNOWN_REVISION = 1305 

//   Indicates two revision levels are incompatible.
public const int ERROR_REVISION_MISMATCH = 1306 

//   This security ID may not be assigned as the owner of this object.
public const int ERROR_INVALID_OWNER = 1307 

//   This security ID may not be assigned as the primary group of an object.
public const int ERROR_INVALID_PRIMARY_GROUP = 1308 

//   An attempt has been made to operate on an impersonation token
//   by a thread that is not currently impersonating a client.
public const int ERROR_NO_IMPERSONATION_TOKEN = 1309 

//   The group may not be disabled.
public const int ERROR_CANT_DISABLE_MANDATORY = 1310 

//   There are currently no logon servers available to service the logon
//   request.
public const int ERROR_NO_LOGON_SERVERS = 1311 

//    A specified logon session does not exist.  It may already have
//    been terminated.
public const int ERROR_NO_SUCH_LOGON_SESSION = 1312 

//    A specified privilege does not exist.
public const int ERROR_NO_SUCH_PRIVILEGE = 1313 

//    A required privilege is not held by the client.
public const int ERROR_PRIVILEGE_NOT_HELD = 1314 

//   The name provided is not a properly formed account name.
public const int ERROR_INVALID_ACCOUNT_NAME = 1315 

//   The specified user already exists.
public const int ERROR_USER_EXISTS = 1316 

//   The specified user does not exist.
public const int ERROR_NO_SUCH_USER = 1317 

//   The specified group already exists.
public const int ERROR_GROUP_EXISTS = 1318 

//   The specified group does not exist.
public const int ERROR_NO_SUCH_GROUP = 1319 

//   Either the specified user account is already a member of the specified
//   group, or the specified group cannot be deleted because it contains
//   a member.
public const int ERROR_MEMBER_IN_GROUP = 1320 

//   The specified user account is not a member of the specified group account.
public const int ERROR_MEMBER_NOT_IN_GROUP = 1321 

//   The last remaining administration account cannot be disabled
//   or deleted.
public const int ERROR_LAST_ADMIN = 1322 

//   Unable to update the password.  The value provided as the current
//   password is incorrect.
public const int ERROR_WRONG_PASSWORD = 1323 

//   Unable to update the password.  The value provided for the new password
//   contains values that are not allowed in passwords.
public const int ERROR_ILL_FORMED_PASSWORD = 1324 

//   Unable to update the password because a password update rule has been
//   violated.
public const int ERROR_PASSWORD_RESTRICTION = 1325 

//   Logon failure: unknown user name or bad password.
public const int ERROR_LOGON_FAILURE = 1326 

//   Logon failure: user account restriction.
public const int ERROR_ACCOUNT_RESTRICTION = 1327 

//   Logon failure: account logon time restriction violation.
public const int ERROR_INVALID_LOGON_HOURS = 1328 

//   Logon failure: user not allowed to log on to this computer.
public const int ERROR_INVALID_WORKSTATION = 1329 

//   Logon failure: the specified account password has expired.
public const int ERROR_PASSWORD_EXPIRED = 1330 

//   Logon failure: account currently disabled.
public const int ERROR_ACCOUNT_DISABLED = 1331 

//   No mapping between account names and security IDs was done.
public const int ERROR_NONE_MAPPED = 1332 

//   Too many local user identifiers (LUIDs) were requested at one time.
public const int ERROR_TOO_MANY_LUIDS_REQUESTED = 1333 

//   No more local user identifiers (LUIDs) are available.
public const int ERROR_LUIDS_EXHAUSTED = 1334 

//   The subauthority part of a security ID is invalid for this particular use.
public const int ERROR_INVALID_SUB_AUTHORITY = 1335 

//   The access control list (ACL) structure is invalid.
public const int ERROR_INVALID_ACL = 1336 

//   The security ID structure is invalid.
public const int ERROR_INVALID_SID = 1337 

//   The security descriptor structure is invalid.
public const int ERROR_INVALID_SECURITY_DESCR = 1338 

//   The inherited access control list (ACL) or access control entry (ACE)
//   could not be built.
public const int ERROR_BAD_INHERITANCE_ACL = 1340 

//   The server is currently disabled.
public const int ERROR_SERVER_DISABLED = 1341 

//   The server is currently enabled.
public const int ERROR_SERVER_NOT_DISABLED = 1342 

//   The value provided was an invalid value for an identifier authority.
public const int ERROR_INVALID_ID_AUTHORITY = 1343 

//   No more memory is available for security information updates.
public const int ERROR_ALLOTTED_SPACE_EXCEEDED = 1344 

//   The specified attributes are invalid, or incompatible with the
//   attributes for the group as a whole.
public const int ERROR_INVALID_GROUP_ATTRIBUTES = 1345 

//   Either a required impersonation level was not provided, or the
//   provided impersonation level is invalid.
public const int ERROR_BAD_IMPERSONATION_LEVEL = 1346 

//   Cannot open an anonymous level security token.
public const int ERROR_CANT_OPEN_ANONYMOUS = 1347 

//   The validation information class requested was invalid.
public const int ERROR_BAD_VALIDATION_CLASS = 1348 

//   The type of the token is inappropriate for its attempted use.
public const int ERROR_BAD_TOKEN_TYPE = 1349 

//   Unable to perform a security operation on an object
//   which has no associated security.
public const int ERROR_NO_SECURITY_ON_OBJECT = 1350 

//   Indicates a Windows NT Advanced Server could not be contacted or that
//   objects within the domain are protected such that necessary
//   information could not be retrieved.
public const int ERROR_CANT_ACCESS_DOMAIN_INFO = 1351 

//   The security account manager (SAM) or local security
//   authority (LSA) server was in the wrong state to perform
//   the security operation.
public const int ERROR_INVALID_SERVER_STATE = 1352 

//   The domain was in the wrong state to perform the security operation.
public const int ERROR_INVALID_DOMAIN_STATE = 1353 

//   This operation is only allowed for the Primary Domain Controller of the domain.
public const int ERROR_INVALID_DOMAIN_ROLE = 1354 

//   The specified domain did not exist.
public const int ERROR_NO_SUCH_DOMAIN = 1355 

//   The specified domain already exists.
public const int ERROR_DOMAIN_EXISTS = 1356 

//   An attempt was made to exceed the limit on the number of domains per server.
public const int ERROR_DOMAIN_LIMIT_EXCEEDED = 1357 

//   Unable to complete the requested operation because of either a
//   catastrophic media failure or a data structure corruption on the disk.
public const int ERROR_INTERNAL_DB_CORRUPTION = 1358 

//   The security account database contains an internal inconsistency.
public const int ERROR_INTERNAL_ERROR = 1359 

//   Generic access types were contained in an access mask which should
//   already be mapped to non-generic types.
public const int ERROR_GENERIC_NOT_MAPPED = 1360 

//   A security descriptor is not in the right format (absolute or self-relative).
public const int ERROR_BAD_DESCRIPTOR_FORMAT = 1361 

//   The requested action is restricted for use by logon processes
//   only.  The calling process has not registered as a logon process.
public const int ERROR_NOT_LOGON_PROCESS = 1362 

//   Cannot start a new logon session with an ID that is already in use.
public const int ERROR_LOGON_SESSION_EXISTS = 1363 

//   A specified authentication package is unknown.
public const int ERROR_NO_SUCH_PACKAGE = 1364 

//   The logon session is not in a state that is consistent with the
//   requested operation.
public const int ERROR_BAD_LOGON_SESSION_STATE = 1365 

//   The logon session ID is already in use.
public const int ERROR_LOGON_SESSION_COLLISION = 1366 

//   A logon request contained an invalid logon type value.
public const int ERROR_INVALID_LOGON_TYPE = 1367 

//   Unable to impersonate via a named pipe until data has been read
//   from that pipe.
public const int ERROR_CANNOT_IMPERSONATE = 1368 

//   The transaction state of a Registry subtree is incompatible with the
//   requested operation.
public const int ERROR_RXACT_INVALID_STATE = 1369 

//   An internal security database corruption has been encountered.
public const int ERROR_RXACT_COMMIT_FAILURE = 1370 

//   Cannot perform this operation on built-in accounts.
public const int ERROR_SPECIAL_ACCOUNT = 1371 

//   Cannot perform this operation on this built-in special group.
public const int ERROR_SPECIAL_GROUP = 1372 

//   Cannot perform this operation on this built-in special user.
public const int ERROR_SPECIAL_USER = 1373 

//   The user cannot be removed from a group because the group
//   is currently the user//s primary group.
public const int ERROR_MEMBERS_PRIMARY_GROUP = 1374 

//   The token is already in use as a primary token.
public const int ERROR_TOKEN_ALREADY_IN_USE = 1375 

//   The specified local group does not exist.
public const int ERROR_NO_SUCH_ALIAS = 1376 

//   The specified account name is not a member of the local group.
public const int ERROR_MEMBER_NOT_IN_ALIAS = 1377 

//   The specified account name is already a member of the local group.
public const int ERROR_MEMBER_IN_ALIAS = 1378 

//   The specified local group already exists.
public const int ERROR_ALIAS_EXISTS = 1379 

//   Logon failure: the user has not been granted the requested
//   logon type at this computer.
public const int ERROR_LOGON_NOT_GRANTED = 1380 

//   The maximum number of secrets that may be stored in a single system has been
//   exceeded.
public const int ERROR_TOO_MANY_SECRETS = 1381 

//   The length of a secret exceeds the maximum length allowed.
public const int ERROR_SECRET_TOO_LONG = 1382 

//   The local security authority database contains an internal inconsistency.
public const int ERROR_INTERNAL_DB_ERROR = 1383 

//   During a logon attempt, the user//s security context accumulated too many
//   security IDs.
public const int ERROR_TOO_MANY_CONTEXT_IDS = 1384 

//   Logon failure: the user has not been granted the requested logon type
//   at this computer.
public const int ERROR_LOGON_TYPE_NOT_GRANTED = 1385 

//   A cross-encrypted password is necessary to change a user password.
public const int ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 1386 

//   A new member could not be added to a local group because the member does
//   not exist.
public const int ERROR_NO_SUCH_MEMBER = 1387 

//   A new member could not be added to a local group because the member has the
//   wrong account type.
public const int ERROR_INVALID_MEMBER = 1388 

//   Too many security IDs have been specified.
public const int ERROR_TOO_MANY_SIDS = 1389 

//   A cross-encrypted password is necessary to change this user password.
public const int ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 1390 

//   Indicates an ACL contains no inheritable components
public const int ERROR_NO_INHERITANCE = 1391 

//   The file or directory is corrupt and non-readable.
public const int ERROR_FILE_CORRUPT = 1392 

//   The disk structure is corrupt and non-readable.
public const int ERROR_DISK_CORRUPT = 1393 

//   There is no user session key for the specified logon session.
public const int ERROR_NO_USER_SESSION_KEY = 1394 

//  End of security error codes


// /////////////////////////
//                        //
//  WinUser Error Codes   //
//                        //
// /////////////////////////

//   Invalid window handle.
public const int ERROR_INVALID_WINDOW_HANDLE = 1400 

//   Invalid menu handle.
public const int ERROR_INVALID_MENU_HANDLE = 1401 

//   Invalid cursor handle.
public const int ERROR_INVALID_CURSOR_HANDLE = 1402 

//   Invalid accelerator table handle.
public const int ERROR_INVALID_ACCEL_HANDLE = 1403 

//   Invalid hook handle.
public const int ERROR_INVALID_HOOK_HANDLE = 1404 

//   Invalid handle to a multiple-window position structure.
public const int ERROR_INVALID_DWP_HANDLE = 1405 

//   Cannot create a top-level child window.
public const int ERROR_TLW_WITH_WSCHILD = 1406 

//   Cannot find window class.
public const int ERROR_CANNOT_FIND_WND_CLASS = 1407 

//   Invalid window, belongs to other thread.
public const int ERROR_WINDOW_OF_OTHER_THREAD = 1408 

//   Hot key is already registered.
public const int ERROR_HOTKEY_ALREADY_REGISTERED = 1409 

//   Class already exists.
public const int ERROR_CLASS_ALREADY_EXISTS = 1410 

//   Class does not exist.
public const int ERROR_CLASS_DOES_NOT_EXIST = 1411 

//   Class still has open windows.
public const int ERROR_CLASS_HAS_WINDOWS = 1412 

//   Invalid index.
public const int ERROR_INVALID_INDEX = 1413 

//   Invalid icon handle.
public const int ERROR_INVALID_ICON_HANDLE = 1414 

//   Using private DIALOG window words.
public const int ERROR_PRIVATE_DIALOG_INDEX = 1415 

//   The listbox identifier was not found.
public const int ERROR_LISTBOX_ID_NOT_FOUND = 1416 

//   No wildcards were found.
public const int ERROR_NO_WILDCARD_CHARACTERS = 1417 

//   Thread does not have a clipboard open.
public const int ERROR_CLIPBOARD_NOT_OPEN = 1418 

//   Hot key is not registered.
public const int ERROR_HOTKEY_NOT_REGISTERED = 1419 

//   The window is not a valid dialog window.
public const int ERROR_WINDOW_NOT_DIALOG = 1420 

//   Control ID not found.
public const int ERROR_CONTROL_ID_NOT_FOUND = 1421 

//   Invalid message for a combo box because it does not have an edit control.
public const int ERROR_INVALID_COMBOBOX_MESSAGE = 1422 

//   The window is not a combo box.
public const int ERROR_WINDOW_NOT_COMBOBOX = 1423 

//   Height must be less than 256.
public const int ERROR_INVALID_EDIT_HEIGHT = 1424 

//   Invalid device context (DC) handle.
public const int ERROR_DC_NOT_FOUND = 1425 

//   Invalid hook procedure type.
public const int ERROR_INVALID_HOOK_FILTER = 1426 

//   Invalid hook procedure.
public const int ERROR_INVALID_FILTER_PROC = 1427 

//   Cannot set non-local hook without a module handle.
public const int ERROR_HOOK_NEEDS_HMOD = 1428 

//   This hook procedure can only be set Globally.
//
public const int ERROR_PUBLIC_ONLY_HOOK = 1429 

//   The journal hook procedure is already installed.
public const int ERROR_JOURNAL_HOOK_SET = 1430 

//   The hook procedure is not installed.
public const int ERROR_HOOK_NOT_INSTALLED = 1431 

//   Invalid message for single-selection listbox.
public const int ERROR_INVALID_LB_MESSAGE = 1432 

//   LB_SETCOUNT sent to non-lazy listbox.
public const int ERROR_SETCOUNT_ON_BAD_LB = 1433 

//   This list box does not support tab stops.
public const int ERROR_LB_WITHOUT_TABSTOPS = 1434 

//   Cannot destroy object created by another thread.
public const int ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 1435 

//   Child windows cannot have menus.
public const int ERROR_CHILD_WINDOW_MENU = 1436 

//   The window does not have a system menu.
public const int ERROR_NO_SYSTEM_MENU = 1437 

//   Invalid message box style.
public const int ERROR_INVALID_MSGBOX_STYLE = 1438 

//   Invalid system-wide (SPI_) parameter.
public const int ERROR_INVALID_SPI_VALUE = 1439 

//   Screen already locked.
public const int ERROR_SCREEN_ALREADY_LOCKED = 1440 

//   All handles to windows in a multiple-window position structure must
//   have the same parent.
public const int ERROR_HWNDS_HAVE_DIFF_PARENT = 1441 

//   The window is not a child window.
public const int ERROR_NOT_CHILD_WINDOW = 1442 

//   Invalid GW_ command.
public const int ERROR_INVALID_GW_COMMAND = 1443 

//   Invalid thread identifier.
public const int ERROR_INVALID_THREAD_ID = 1444 

//   Cannot process a message from a window that is not a multiple document
//   interface (MDI) window.
public const int ERROR_NON_MDICHILD_WINDOW = 1445 

//   Popup menu already active.
public const int ERROR_POPUP_ALREADY_ACTIVE = 1446 

//   The window does not have scroll bars.
public const int ERROR_NO_SCROLLBARS = 1447 

//   Scroll bar range cannot be greater than 0x7FFF.
public const int ERROR_INVALID_SCROLLBAR_RANGE = 1448 

//   Cannot show or remove the window in the way specified.
public const int ERROR_INVALID_SHOWWIN_COMMAND = 1449 

//  End of WinUser error codes


// /////////////////////////
//                        //
//  Eventlog Status Codes //
//                        //
// /////////////////////////

//   The event log file is corrupt.
public const int ERROR_EVENTLOG_FILE_CORRUPT = 1500 

//   No event log file could be opened, so the event logging service did not start.
public const int ERROR_EVENTLOG_CANT_START = 1501 

//   The event log file is full.
public const int ERROR_LOG_FILE_FULL = 1502 

//   The event log file has changed between reads.
public const int ERROR_EVENTLOG_FILE_CHANGED = 1503 

//  End of eventlog error codes


// /////////////////////////
//                        //
//    RPC Status Codes    //
//                        //
// /////////////////////////

//   The string binding is invalid.
public const int RPC_S_INVALID_STRING_BINDING = 1700 

//   The binding handle is not the correct type.
public const int RPC_S_WRONG_KIND_OF_BINDING = 1701 

//   The binding handle is invalid.
public const int RPC_S_INVALID_BINDING = 1702 

//   The RPC protocol sequence is not supported.
public const int RPC_S_PROTSEQ_NOT_SUPPORTED = 1703 

//   The RPC protocol sequence is invalid.
public const int RPC_S_INVALID_RPC_PROTSEQ = 1704 

//   The string universal unique identifier (UUID) is invalid.
public const int RPC_S_INVALID_STRING_UUID = 1705 

//   The endpoint format is invalid.
public const int RPC_S_INVALID_ENDPOINT_FORMAT = 1706 

//   The network address is invalid.
public const int RPC_S_INVALID_NET_ADDR = 1707 

//   No endpoint was found.
public const int RPC_S_NO_ENDPOINT_FOUND = 1708 

//   The timeout value is invalid.
public const int RPC_S_INVALID_TIMEOUT = 1709 

//   The object universal unique identifier (UUID) was not found.
public const int RPC_S_OBJECT_NOT_FOUND = 1710 

//   The object universal unique identifier (UUID) has already been registered.
public const int RPC_S_ALREADY_REGISTERED = 1711 

//   The type universal unique identifier (UUID) has already been registered.
public const int RPC_S_TYPE_ALREADY_REGISTERED = 1712 

//   The RPC server is already listening.
public const int RPC_S_ALREADY_LISTENING = 1713 

//   No protocol sequences have been registered.
public const int RPC_S_NO_PROTSEQS_REGISTERED = 1714 

//   The RPC server is not listening.
public const int RPC_S_NOT_LISTENING = 1715 

//   The manager type is unknown.
public const int RPC_S_UNKNOWN_MGR_TYPE = 1716 

//   The interface is unknown.
public const int RPC_S_UNKNOWN_IF = 1717 

//   There are no bindings.
public const int RPC_S_NO_BINDINGS = 1718 

//   There are no protocol sequences.
public const int RPC_S_NO_PROTSEQS = 1719 

//   The endpoint cannot be created.
public const int RPC_S_CANT_CREATE_ENDPOINT = 1720 

//   Not enough resources are available to complete this operation.
public const int RPC_S_OUT_OF_RESOURCES = 1721 

//   The RPC server is unavailable.
public const int RPC_S_SERVER_UNAVAILABLE = 1722 

//   The RPC server is too busy to complete this operation.
public const int RPC_S_SERVER_TOO_BUSY = 1723 

//   The network options are invalid.
public const int RPC_S_INVALID_NETWORK_OPTIONS = 1724 

//   There is not a remote procedure call active in this thread.
public const int RPC_S_NO_CALL_ACTIVE = 1725 

//   The remote procedure call failed.
public const int RPC_S_CALL_FAILED = 1726 

//   The remote procedure call failed and did not execute.
public const int RPC_S_CALL_FAILED_DNE = 1727 

//   A remote procedure call (RPC) protocol error occurred.
public const int RPC_S_PROTOCOL_ERROR = 1728 

//   The transfer syntax is not supported by the RPC server.
public const int RPC_S_UNSUPPORTED_TRANS_SYN = 1730 

//   The universal unique identifier (UUID) type is not supported.
public const int RPC_S_UNSUPPORTED_TYPE = 1732 

//   The tag is invalid.
public const int RPC_S_INVALID_TAG = 1733 

//   The array bounds are invalid.
public const int RPC_S_INVALID_BOUND = 1734 

//   The binding does not contain an entry name.
public const int RPC_S_NO_ENTRY_NAME = 1735 

//   The name syntax is invalid.
public const int RPC_S_INVALID_NAME_SYNTAX = 1736 

//   The name syntax is not supported.
public const int RPC_S_UNSUPPORTED_NAME_SYNTAX = 1737 

//   No network address is available to use to public const intruct a universal
//   unique identifier (UUID).
public const int RPC_S_UUID_NO_ADDRESS = 1739 

//   The endpoint is a duplicate.
public const int RPC_S_DUPLICATE_ENDPOINT = 1740 

//   The authentication type is unknown.
public const int RPC_S_UNKNOWN_AUTHN_TYPE = 1741 

//   The maximum number of calls is too small.
public const int RPC_S_MAX_CALLS_TOO_SMALL = 1742 

//   The string is too long.
public const int RPC_S_STRING_TOO_LONG = 1743 

//   The RPC protocol sequence was not found.
public const int RPC_S_PROTSEQ_NOT_FOUND = 1744 

//   The procedure number is out of range.
public const int RPC_S_PROCNUM_OUT_OF_RANGE = 1745 

//   The binding does not contain any authentication information.
public const int RPC_S_BINDING_HAS_NO_AUTH = 1746 

//   The authentication service is unknown.
public const int RPC_S_UNKNOWN_AUTHN_SERVICE = 1747 

//   The authentication level is unknown.
public const int RPC_S_UNKNOWN_AUTHN_LEVEL = 1748 

//   The security context is invalid.
public const int RPC_S_INVALID_AUTH_IDENTITY = 1749 

//   The authorization service is unknown.
public const int RPC_S_UNKNOWN_AUTHZ_SERVICE = 1750 

//   The entry is invalid.
public const int EPT_S_INVALID_ENTRY = 1751 

//   The server endpoint cannot perform the operation.
public const int EPT_S_CANT_PERFORM_OP = 1752 

//   There are no more endpoints available from the endpoint mapper.
public const int EPT_S_NOT_REGISTERED = 1753 

//   No interfaces have been exported.
public const int RPC_S_NOTHING_TO_EXPORT = 1754 

//   The entry name is incomplete.
public const int RPC_S_INCOMPLETE_NAME = 1755 

//   The version option is invalid.
public const int RPC_S_INVALID_VERS_OPTION = 1756 

//   There are no more members.
public const int RPC_S_NO_MORE_MEMBERS = 1757 

//   There is nothing to unexport.
public const int RPC_S_NOT_ALL_OBJS_UNEXPORTED = 1758 

//   The interface was not found.
public const int RPC_S_INTERFACE_NOT_FOUND = 1759 

//   The entry already exists.
public const int RPC_S_ENTRY_ALREADY_EXISTS = 1760 

//   The entry is not found.
public const int RPC_S_ENTRY_NOT_FOUND = 1761 

//   The name service is unavailable.
public const int RPC_S_NAME_SERVICE_UNAVAILABLE = 1762 

//   The network address family is invalid.
public const int RPC_S_INVALID_NAF_ID = 1763 

//   The requested operation is not supported.
public const int RPC_S_CANNOT_SUPPORT = 1764 

//   No security context is available to allow impersonation.
public const int RPC_S_NO_CONTEXT_AVAILABLE = 1765 

//   An internal error occurred in a remote procedure call (RPC).
public const int RPC_S_INTERNAL_ERROR = 1766 

//   The RPC server attempted an integer division by zero.//
public const int RPC_S_ZERO_DIVIDE = 1767 

//   An addressing error occurred in the RPC server.
public const int RPC_S_ADDRESS_ERROR = 1768 

//   A floating-point operation at the RPC server caused a division by zero.
public const int RPC_S_FP_DIV_ZERO = 1769 

//   A floating-point underflow occurred at the RPC server.
public const int RPC_S_FP_UNDERFLOW = 1770 

//   A floating-point overflow occurred at the RPC server.
public const int RPC_S_FP_OVERFLOW = 1771 

//   The list of RPC servers available for the binding of auto handles
//   has been exhausted.
public const int RPC_X_NO_MORE_ENTRIES = 1772 

//   Unable to open the character translation table file.
public const int RPC_X_SS_CHAR_TRANS_OPEN_FAIL = 1773 

//   The file containing the character translation table has fewer than
//   512 bytes.
public const int RPC_X_SS_CHAR_TRANS_SHORT_FILE = 1774 

//   A null context handle was passed from the client to the host during
//   a remote procedure call.
public const int RPC_X_SS_IN_NULL_CONTEXT = 1775 

//   The context handle changed during a remote procedure call.
public const int RPC_X_SS_CONTEXT_DAMAGED = 1777 

//   The binding handles passed to a remote procedure call do not match.
public const int RPC_X_SS_HANDLES_MISMATCH = 1778 

//   The stub is unable to get the remote procedure call handle.
public const int RPC_X_SS_CANNOT_GET_CALL_HANDLE = 1779 

//   A null reference pointer was passed to the stub.
public const int RPC_X_NULL_REF_POINTER = 1780 

//   The enumeration value is out of range.
public const int RPC_X_ENUM_VALUE_OUT_OF_RANGE = 1781 

//   The byte count is too small.
public const int RPC_X_BYTE_COUNT_TOO_SMALL = 1782 

//   The stub received bad data.
public const int RPC_X_BAD_STUB_DATA = 1783 

//   The supplied user buffer is not valid for the requested operation.
public const int ERROR_INVALID_USER_BUFFER = 1784 

//   The disk media is not recognized.  It may not be formatted.
public const int ERROR_UNRECOGNIZED_MEDIA = 1785 

//   The workstation does not have a trust secret.
public const int ERROR_NO_TRUST_LSA_SECRET = 1786 

//   The SAM database on the Windows NT Advanced Server does not have a computer
//   account for this workstation trust relationship.
public const int ERROR_NO_TRUST_SAM_ACCOUNT = 1787 

//   The trust relationship between the primary domain and the trusted
//   domain failed.
public const int ERROR_TRUSTED_DOMAIN_FAILURE = 1788 

//   The trust relationship between this workstation and the primary
//   domain failed.
public const int ERROR_TRUSTED_RELATIONSHIP_FAILURE = 1789 

//   The network logon failed.
public const int ERROR_TRUST_FAILURE = 1790 

//   A remote procedure call is already in progress for this thread.
public const int RPC_S_CALL_IN_PROGRESS = 1791 

//   An attempt was made to logon, but the network logon service was not started.
public const int ERROR_NETLOGON_NOT_STARTED = 1792 

//   The user//s account has expired.
public const int ERROR_ACCOUNT_EXPIRED = 1793 

//   The redirector is in use and cannot be unloaded.
public const int ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 1794 

//   The specified printer driver is already installed.
public const int ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 1795 

//   The specified port is unknown.
public const int ERROR_UNKNOWN_PORT = 1796 

//   The printer driver is unknown.
public const int ERROR_UNKNOWN_PRINTER_DRIVER = 1797 

//   The print processor is unknown.
//
public const int ERROR_UNKNOWN_PRINTPROCESSOR = 1798 

//   The specified separator file is invalid.
public const int ERROR_INVALID_SEPARATOR_FILE = 1799 

//   The specified priority is invalid.
public const int ERROR_INVALID_PRIORITY = 1800 

//   The printer name is invalid.
public const int ERROR_INVALID_PRINTER_NAME = 1801 

//   The printer already exists.
public const int ERROR_PRINTER_ALREADY_EXISTS = 1802 

//   The printer command is invalid.
public const int ERROR_INVALID_PRINTER_COMMAND = 1803 

//   The specified datatype is invalid.
public const int ERROR_INVALID_DATATYPE = 1804 

//   The Environment specified is invalid.
public const int ERROR_INVALID_ENVIRONMENT = 1805 

//   There are no more bindings.
public const int RPC_S_NO_MORE_BINDINGS = 1806 

//   The account used is an interdomain trust account.  Use your Global user account or local user account to access this server.
public const int ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 1807 

//   The account used is a Computer Account.  Use your Global user account or local user account to access this server.
public const int ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 1808 

//   The account used is an server trust account.  Use your Global user account or local user account to access this server.
public const int ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 1809 

//   The name or security ID (SID) of the domain specified is inconsistent
//   with the trust information for that domain.
public const int ERROR_DOMAIN_TRUST_INCONSISTENT = 1810 

//   The server is in use and cannot be unloaded.
public const int ERROR_SERVER_HAS_OPEN_HANDLES = 1811 

//   The specified image file did not contain a resource section.
public const int ERROR_RESOURCE_DATA_NOT_FOUND = 1812 

//   The specified resource type can not be found in the image file.
public const int ERROR_RESOURCE_TYPE_NOT_FOUND = 1813 

//   The specified resource name can not be found in the image file.
public const int ERROR_RESOURCE_NAME_NOT_FOUND = 1814 

//   The specified resource language ID cannot be found in the image file.
public const int ERROR_RESOURCE_LANG_NOT_FOUND = 1815 

//   Not enough quota is available to process this command.
public const int ERROR_NOT_ENOUGH_QUOTA = 1816 

//   The group member was not found.
public const int RPC_S_GROUP_MEMBER_NOT_FOUND = 1898 

//   The endpoint mapper database could not be created.
public const int EPT_S_CANT_CREATE = 1899 

//   The object universal unique identifier (UUID) is the nil UUID.
public const int RPC_S_INVALID_OBJECT = 1900 

//   The specified time is invalid.
public const int ERROR_INVALID_TIME = 1901 

//   The specified Form name is invalid.
public const int ERROR_INVALID_FORM_NAME = 1902 

//   The specified Form size is invalid
public const int ERROR_INVALID_FORM_SIZE = 1903 

//   The specified Printer handle is already being waited on
public const int ERROR_ALREADY_WAITING = 1904 

//   The specified Printer has been deleted
public const int ERROR_PRINTER_DELETED = 1905 

//   The state of the Printer is invalid
public const int ERROR_INVALID_PRINTER_STATE = 1906 

//   The list of servers for this workgroup is not currently available
public const int ERROR_NO_BROWSER_SERVERS_FOUND = 6118 


// -------------------------
//  MMSystem Section
// -------------------------

// This section defines all the support for Multimedia applications

//  general public const intants
public const int MAXPNAMELEN = 32  //  max product name length (including NULL)
public const int MAXERRORLENGTH = 128  //  max error text length (including final NULL)

Type smpte
        hour As Byte
        min As Byte
        sec As Byte
        frame As Byte
        fps As Byte
        dummy As Byte
        pad(2) As Byte
End Type

Type midi
        songptrpos As Long
End Type

Type MMTIME
        wType As Long
        u As Long
End Type

//  values for wType field in MMTIME struct
public const int TIME_MS =  H1     //  time in Milliseconds
public const int TIME_SAMPLES =  H2     //  number of wave samples
public const int TIME_BYTES =  H4     //  current byte offset
public const int TIME_SMPTE =  H8     //  SMPTE time
public const int TIME_MIDI =  H10    //  MIDI time

//  Multimedia Window Messages
public const int MM_JOY1MOVE =  H3A0  //  joystick
public const int MM_JOY2MOVE =  H3A1
public const int MM_JOY1ZMOVE =  H3A2
public const int MM_JOY2ZMOVE =  H3A3
public const int MM_JOY1BUTTONDOWN =  H3B5
public const int MM_JOY2BUTTONDOWN =  H3B6
public const int MM_JOY1BUTTONUP =  H3B7
public const int MM_JOY2BUTTONUP =  H3B8

public const int MM_MCINOTIFY =  H3B9  //  MCI
public const int MM_MCISYSTEM_STRING =  H3CA

public const int MM_WOM_OPEN =  H3BB  //  waveform output
public const int MM_WOM_CLOSE =  H3BC
public const int MM_WOM_DONE =  H3BD

public const int MM_WIM_OPEN =  H3BE  //  waveform input
public const int MM_WIM_CLOSE =  H3BF
public const int MM_WIM_DATA =  H3C0

public const int MM_MIM_OPEN =  H3C1  //  MIDI input
public const int MM_MIM_CLOSE =  H3C2
public const int MM_MIM_DATA =  H3C3
public const int MM_MIM_LONGDATA =  H3C4
public const int MM_MIM_ERROR =  H3C5
public const int MM_MIM_LONGERROR =  H3C6

public const int MM_MOM_OPEN =  H3C7  //  MIDI output
public const int MM_MOM_CLOSE =  H3C8
public const int MM_MOM_DONE =  H3C9

// String resource number bases (internal use)

public const int MMSYSERR_BASE = 0
public const int WAVERR_BASE = 32
public const int MIDIERR_BASE = 64
public const int TIMERR_BASE = 96   //  was 128, changed to match Win 31 Sonic
public const int JOYERR_BASE = 160
public const int MCIERR_BASE = 256

public const int MCI_STRING_OFFSET = 512  //  if this number is changed you MUST
                                    //  alter the MCI_DEVTYPE_... list below
public const int MCI_VD_OFFSET = 1024
public const int MCI_CD_OFFSET = 1088
public const int MCI_WAVE_OFFSET = 1152
public const int MCI_SEQ_OFFSET = 1216

// General error return values
public const int MMSYSERR_NOERROR = 0  //  no error
public const int MMSYSERR_ERROR = (MMSYSERR_BASE + 1)  //  unspecified error
public const int MMSYSERR_BADDEVICEID = (MMSYSERR_BASE + 2)  //  device ID out of range
public const int MMSYSERR_NOTENABLED = (MMSYSERR_BASE + 3)  //  driver failed enable
public const int MMSYSERR_ALLOCATED = (MMSYSERR_BASE + 4)  //  device already allocated
public const int MMSYSERR_INVALHANDLE = (MMSYSERR_BASE + 5)  //  device handle is invalid
public const int MMSYSERR_NODRIVER = (MMSYSERR_BASE + 6)  //  no device driver present
public const int MMSYSERR_NOMEM = (MMSYSERR_BASE + 7)  //  memory allocation error
public const int MMSYSERR_NOTSUPPORTED = (MMSYSERR_BASE + 8)  //  function isn//t supported
public const int MMSYSERR_BADERRNUM = (MMSYSERR_BASE + 9)  //  error value out of range
public const int MMSYSERR_INVALFLAG = (MMSYSERR_BASE + 10) //  invalid flag passed
public const int MMSYSERR_INVALPARAM = (MMSYSERR_BASE + 11) //  invalid parameter passed
public const int MMSYSERR_HANDLEBUSY = (MMSYSERR_BASE + 12) //  handle being used
                                                   //  simultaneously on another
                                                   //  thread (eg callback)
public const int MMSYSERR_INVALIDALIAS = (MMSYSERR_BASE + 13) //  "Specified alias not found in WIN.INI
public const int MMSYSERR_LASTERROR = (MMSYSERR_BASE + 13) //  last error in range
public const int MM_MOM_POSITIONCB =  H3CA              //  Callback for MEVT_POSITIONCB
public const int MM_MCISIGNAL =  H3CB
public const int MM_MIM_MOREDATA =  H3CC                //  MIM_DONE w/ pending events
public const int MIDICAPS_STREAM =  H8               //  driver supports midiStreamOut directly
 

Type MIDIEVENT
        dwDeltaTime          //  Ticks since last event
        dwStreamID           //  Reserved; must be zero
        dwEvent              //  Event type and parameters
        dwParms(1)           //  Parameters if this is a long event
End Type

Type MIDISTRMBUFFVER
        dwVersion                  //  Stream buffer format version
        dwMid                      //  Manufacturer ID as defined in MMREG.H
        dwOEMVersion               //  Manufacturer version for custom ext
End Type

//  Type codes which go in the high byte of the event DWORD of a stream buffer

//  Type codes 00-7F contain parameters within the low 24 bits
//  Type codes 80-FF contain a length of their parameter in the low 24
//  bits, followed by their parameter data in the buffer. The event
//  DWORD contains the exact byte length; the parm data itself must be
//  padded to be an even multiple of 4 Byte long.
//

public const int MEVT_F_SHORT =  H0 
public const int MEVT_F_LONG =  H80000000
public const int MEVT_F_CALLBACK =  H40000000
public const int MIDISTRM_ERROR = -2

//
//  Structures and defines for midiStreamProperty
//
public const int MIDIPROP_SET =  H80000000
public const int MIDIPROP_GET =  H40000000

//  These are intentionally both non-zero so the app cannot accidentally
//  leave the operation off and happen to appear to work due to default
//  action.

public const int MIDIPROP_TIMEDIV =  H1 
public const int MIDIPROP_TEMPO =  H2 

Type MIDIPROPTIMEDIV
        cbStruct As Long
        dwTimeDiv As Long
End Type

Type MIDIPROPTEMPO
        cbStruct As Long
        dwTempo As Long
End Type


//  MIDI function prototypes *

// ***************************************************************************

//                             Mixer Support

// **************************************************************************

public const int MIXER_SHORT_NAME_CHARS = 16
public const int MIXER_LONG_NAME_CHARS = 64

//
//   MMRESULT error return values specific to the mixer API
//
//
public const int MIXERR_BASE = 1024
public const int MIXERR_INVALLINE = (MIXERR_BASE + 0)
public const int MIXERR_INVALCONTROL = (MIXERR_BASE + 1)
public const int MIXERR_INVALVALUE = (MIXERR_BASE + 2)
public const int MIXERR_LASTERROR = (MIXERR_BASE + 2)


public const int MIXER_OBJECTF_HANDLE =  H80000000
public const int MIXER_OBJECTF_MIXER =  H0 
public const int MIXER_OBJECTF_HMIXER = (MIXER_OBJECTF_HANDLE Or MIXER_OBJECTF_MIXER)
public const int MIXER_OBJECTF_WAVEOUT =  H10000000
public const int MIXER_OBJECTF_HWAVEOUT = (MIXER_OBJECTF_HANDLE Or MIXER_OBJECTF_WAVEOUT)
public const int MIXER_OBJECTF_WAVEIN =  H20000000
public const int MIXER_OBJECTF_HWAVEIN = (MIXER_OBJECTF_HANDLE Or MIXER_OBJECTF_WAVEIN)
public const int MIXER_OBJECTF_MIDIOUT =  H30000000
public const int MIXER_OBJECTF_HMIDIOUT = (MIXER_OBJECTF_HANDLE Or MIXER_OBJECTF_MIDIOUT)
public const int MIXER_OBJECTF_MIDIIN =  H40000000
public const int MIXER_OBJECTF_HMIDIIN = (MIXER_OBJECTF_HANDLE Or MIXER_OBJECTF_MIDIIN)
public const int MIXER_OBJECTF_AUX =  H50000000

Declare Function mixerGetNumDevs Lib "winmm.dll" Alias "mixerGetNumDevs" () As Long

Type MIXERCAPS
        wMid As Integer                   //  manufacturer id
        wPid As Integer                   //  product id
        vDriverVersion            //  version of the driver
        szPname As String * MAXPNAMELEN   //  product name
        fdwSupport             //  misc. support bits
        cDestinations          //  count of destinations
End Type

Declare Function mixerGetDevCaps Lib "winmm.dll" Alias "mixerGetDevCapsA" (ByVal uMxId As Long, ByVal pmxcaps As MIXERCAPS, ByVal cbmxcaps As Long) As Long
Declare Function mixerOpen Lib "winmm.dll" Alias "mixerOpen" (phmx As Long, ByVal uMxId As Long, ByVal dwCallback As Long, ByVal dwInstance As Long, ByVal fdwOpen As Long) As Long
Declare Function mixerClose Lib "winmm.dll" Alias "mixerClose" (ByVal hmx As Long) As Long
Declare Function mixerMessage Lib "winmm.dll" Alias "mixerMessage" (ByVal hmx As Long, ByVal uMsg As Long, ByVal dwParam1 As Long, ByVal dwParam2 As Long) As Long

Type Target    // for use in MIXERLINE and others (embedded structure)
        
        dwType                 //  MIXERLINE_TARGETTYPE_xxxx
        dwDeviceID             //  target device ID of device type
        wMid As Integer                   //  of target device
        wPid As Integer                   //       "
        vDriverVersion            //       "
        szPname As String * MAXPNAMELEN
End Type

Type MIXERLINE
        cbStruct               //  size of MIXERLINE structure
        dwDestination          //  zero based destination index
        dwSource               //  zero based source index (if source)
        dwLineID               //  unique line id for mixer device
        fdwLine                //  state/information about line
        dwUser                 //  driver specific information
        dwComponentType        //  component type line connects to
        cChannels              //  number of channels line supports
        cConnections           //  number of connections (possible)
        cControls              //  number of controls at this line
        szShortName As String * MIXER_SHORT_NAME_CHARS
        szName As String * MIXER_LONG_NAME_CHARS
        tTarget As Target
End Type

//   MIXERLINE.fdwLine

public const int MIXERLINE_LINEF_ACTIVE =  H1 
public const int MIXERLINE_LINEF_DISCONNECTED =  H8000 
public const int MIXERLINE_LINEF_SOURCE =  H80000000

//   MIXERLINE.dwComponentType

//   component types for destinations and sources

public const int MIXERLINE_COMPONENTTYPE_DST_FIRST =  H0 
public const int MIXERLINE_COMPONENTTYPE_DST_UNDEFINED = (MIXERLINE_COMPONENTTYPE_DST_FIRST + 0)
public const int MIXERLINE_COMPONENTTYPE_DST_DIGITAL = (MIXERLINE_COMPONENTTYPE_DST_FIRST + 1)
public const int MIXERLINE_COMPONENTTYPE_DST_LINE = (MIXERLINE_COMPONENTTYPE_DST_FIRST + 2)
public const int MIXERLINE_COMPONENTTYPE_DST_MONITOR = (MIXERLINE_COMPONENTTYPE_DST_FIRST + 3)
public const int MIXERLINE_COMPONENTTYPE_DST_SPEAKERS = (MIXERLINE_COMPONENTTYPE_DST_FIRST + 4)
public const int MIXERLINE_COMPONENTTYPE_DST_HEADPHONES = (MIXERLINE_COMPONENTTYPE_DST_FIRST + 5)
public const int MIXERLINE_COMPONENTTYPE_DST_TELEPHONE = (MIXERLINE_COMPONENTTYPE_DST_FIRST + 6)
public const int MIXERLINE_COMPONENTTYPE_DST_WAVEIN = (MIXERLINE_COMPONENTTYPE_DST_FIRST + 7)
public const int MIXERLINE_COMPONENTTYPE_DST_VOICEIN = (MIXERLINE_COMPONENTTYPE_DST_FIRST + 8)
public const int MIXERLINE_COMPONENTTYPE_DST_LAST = (MIXERLINE_COMPONENTTYPE_DST_FIRST + 8)

public const int MIXERLINE_COMPONENTTYPE_SRC_FIRST =  H1000 
public const int MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED = (MIXERLINE_COMPONENTTYPE_SRC_FIRST + 0)
public const int MIXERLINE_COMPONENTTYPE_SRC_DIGITAL = (MIXERLINE_COMPONENTTYPE_SRC_FIRST + 1)
public const int MIXERLINE_COMPONENTTYPE_SRC_LINE = (MIXERLINE_COMPONENTTYPE_SRC_FIRST + 2)
public const int MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE = (MIXERLINE_COMPONENTTYPE_SRC_FIRST + 3)
public const int MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER = (MIXERLINE_COMPONENTTYPE_SRC_FIRST + 4)
public const int MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC = (MIXERLINE_COMPONENTTYPE_SRC_FIRST + 5)
public const int MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE = (MIXERLINE_COMPONENTTYPE_SRC_FIRST + 6)
public const int MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER = (MIXERLINE_COMPONENTTYPE_SRC_FIRST + 7)
public const int MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT = (MIXERLINE_COMPONENTTYPE_SRC_FIRST + 8)
public const int MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY = (MIXERLINE_COMPONENTTYPE_SRC_FIRST + 9)
public const int MIXERLINE_COMPONENTTYPE_SRC_ANALOG = (MIXERLINE_COMPONENTTYPE_SRC_FIRST + 10)
public const int MIXERLINE_COMPONENTTYPE_SRC_LAST = (MIXERLINE_COMPONENTTYPE_SRC_FIRST + 10)


//
//   MIXERLINE.Target.dwType
//
//
public const int MIXERLINE_TARGETTYPE_UNDEFINED = 0
public const int MIXERLINE_TARGETTYPE_WAVEOUT = 1
public const int MIXERLINE_TARGETTYPE_WAVEIN = 2
public const int MIXERLINE_TARGETTYPE_MIDIOUT = 3
public const int MIXERLINE_TARGETTYPE_MIDIIN = 4
public const int MIXERLINE_TARGETTYPE_AUX = 5

Declare Function mixerGetLineInfo Lib "winmm.dll" Alias "mixerGetLineInfoA" (ByVal hmxobj As Long, pmxl As MIXERLINE, ByVal fdwInfo As Long) As Long
public const int MIXER_GETLINEINFOF_DESTINATION =  H0 
public const int MIXER_GETLINEINFOF_SOURCE =  H1 
public const int MIXER_GETLINEINFOF_LINEID =  H2 
public const int MIXER_GETLINEINFOF_COMPONENTTYPE =  H3 
public const int MIXER_GETLINEINFOF_TARGETTYPE =  H4 
public const int MIXER_GETLINEINFOF_QUERYMASK =  HF 

Declare Function mixerGetID Lib "winmm.dll" Alias "mixerGetID" (ByVal hmxobj As Long, pumxID As Long, ByVal fdwId As Long) As Long

//   MIXERCONTROL


Type MIXERCONTROL
        cbStruct           //  size in Byte of MIXERCONTROL
        dwControlID        //  unique control id for mixer device
        dwControlType      //  MIXERCONTROL_CONTROLTYPE_xxx
        fdwControl         //  MIXERCONTROL_CONTROLF_xxx
        cMultipleItems     //  if MIXERCONTROL_CONTROLF_MULTIPLE set
        szShortName As String * MIXER_SHORT_NAME_CHARS
        szName As String * MIXER_LONG_NAME_CHARS
        Bounds(1 To 6)     //  Longest member of the Bounds union
        Metrics(1 To 6)    //  Longest member of the Metrics union
End Type

//
//   MIXERCONTROL.fdwControl

public const int MIXERCONTROL_CONTROLF_UNIFORM =  H1 
public const int MIXERCONTROL_CONTROLF_MULTIPLE =  H2 
public const int MIXERCONTROL_CONTROLF_DISABLED =  H80000000

//   MIXERCONTROL_CONTROLTYPE_xxx building block defines

public const int MIXERCONTROL_CT_CLASS_MASK =  HF0000000
public const int MIXERCONTROL_CT_CLASS_CUSTOM =  H0 
public const int MIXERCONTROL_CT_CLASS_METER =  H10000000
public const int MIXERCONTROL_CT_CLASS_SWITCH =  H20000000
public const int MIXERCONTROL_CT_CLASS_NUMBER =  H30000000
public const int MIXERCONTROL_CT_CLASS_SLIDER =  H40000000
public const int MIXERCONTROL_CT_CLASS_FADER =  H50000000
public const int MIXERCONTROL_CT_CLASS_TIME =  H60000000
public const int MIXERCONTROL_CT_CLASS_LIST =  H70000000
public const int MIXERCONTROL_CT_SUBCLASS_MASK =  HF000000
public const int MIXERCONTROL_CT_SC_SWITCH_BOOLEAN =  H0 
public const int MIXERCONTROL_CT_SC_SWITCH_BUTTON =  H1000000
public const int MIXERCONTROL_CT_SC_METER_POLLED =  H0 
public const int MIXERCONTROL_CT_SC_TIME_MICROSECS =  H0 
public const int MIXERCONTROL_CT_SC_TIME_MILLISECS =  H1000000
public const int MIXERCONTROL_CT_SC_LIST_SINGLE =  H0 
public const int MIXERCONTROL_CT_SC_LIST_MULTIPLE =  H1000000
public const int MIXERCONTROL_CT_UNITS_MASK =  HFF0000
public const int MIXERCONTROL_CT_UNITS_CUSTOM =  H0 
public const int MIXERCONTROL_CT_UNITS_BOOLEAN =  H10000
public const int MIXERCONTROL_CT_UNITS_SIGNED =  H20000
public const int MIXERCONTROL_CT_UNITS_UNSIGNED =  H30000
public const int MIXERCONTROL_CT_UNITS_DECIBELS =  H40000 //  in 10ths
public const int MIXERCONTROL_CT_UNITS_PERCENT =  H50000 //  in 10ths
//
//   Commonly used control types for specifying MIXERCONTROL.dwControlType
//
public const int MIXERCONTROL_CONTROLTYPE_CUSTOM = (MIXERCONTROL_CT_CLASS_CUSTOM Or MIXERCONTROL_CT_UNITS_CUSTOM)
public const int MIXERCONTROL_CONTROLTYPE_BOOLEANMETER = (MIXERCONTROL_CT_CLASS_METER Or MIXERCONTROL_CT_SC_METER_POLLED Or MIXERCONTROL_CT_UNITS_BOOLEAN)
public const int MIXERCONTROL_CONTROLTYPE_SIGNEDMETER = (MIXERCONTROL_CT_CLASS_METER Or MIXERCONTROL_CT_SC_METER_POLLED Or MIXERCONTROL_CT_UNITS_SIGNED)
public const int MIXERCONTROL_CONTROLTYPE_PEAKMETER = (MIXERCONTROL_CONTROLTYPE_SIGNEDMETER + 1)
public const int MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER = (MIXERCONTROL_CT_CLASS_METER Or MIXERCONTROL_CT_SC_METER_POLLED Or MIXERCONTROL_CT_UNITS_UNSIGNED)
public const int MIXERCONTROL_CONTROLTYPE_BOOLEAN = (MIXERCONTROL_CT_CLASS_SWITCH Or MIXERCONTROL_CT_SC_SWITCH_BOOLEAN Or MIXERCONTROL_CT_UNITS_BOOLEAN)
public const int MIXERCONTROL_CONTROLTYPE_ONOFF = (MIXERCONTROL_CONTROLTYPE_BOOLEAN + 1)
public const int MIXERCONTROL_CONTROLTYPE_MUTE = (MIXERCONTROL_CONTROLTYPE_BOOLEAN + 2)
public const int MIXERCONTROL_CONTROLTYPE_MONO = (MIXERCONTROL_CONTROLTYPE_BOOLEAN + 3)
public const int MIXERCONTROL_CONTROLTYPE_LOUDNESS = (MIXERCONTROL_CONTROLTYPE_BOOLEAN + 4)
public const int MIXERCONTROL_CONTROLTYPE_STEREOENH = (MIXERCONTROL_CONTROLTYPE_BOOLEAN + 5)
public const int MIXERCONTROL_CONTROLTYPE_BUTTON = (MIXERCONTROL_CT_CLASS_SWITCH Or MIXERCONTROL_CT_SC_SWITCH_BUTTON Or MIXERCONTROL_CT_UNITS_BOOLEAN)
public const int MIXERCONTROL_CONTROLTYPE_DECIBELS = (MIXERCONTROL_CT_CLASS_NUMBER Or MIXERCONTROL_CT_UNITS_DECIBELS)
public const int MIXERCONTROL_CONTROLTYPE_SIGNED = (MIXERCONTROL_CT_CLASS_NUMBER Or MIXERCONTROL_CT_UNITS_SIGNED)
public const int MIXERCONTROL_CONTROLTYPE_UNSIGNED = (MIXERCONTROL_CT_CLASS_NUMBER Or MIXERCONTROL_CT_UNITS_UNSIGNED)
public const int MIXERCONTROL_CONTROLTYPE_PERCENT = (MIXERCONTROL_CT_CLASS_NUMBER Or MIXERCONTROL_CT_UNITS_PERCENT)
public const int MIXERCONTROL_CONTROLTYPE_SLIDER = (MIXERCONTROL_CT_CLASS_SLIDER Or MIXERCONTROL_CT_UNITS_SIGNED)
public const int MIXERCONTROL_CONTROLTYPE_PAN = (MIXERCONTROL_CONTROLTYPE_SLIDER + 1)
public const int MIXERCONTROL_CONTROLTYPE_QSOUNDPAN = (MIXERCONTROL_CONTROLTYPE_SLIDER + 2)
public const int MIXERCONTROL_CONTROLTYPE_FADER = (MIXERCONTROL_CT_CLASS_FADER Or MIXERCONTROL_CT_UNITS_UNSIGNED)
public const int MIXERCONTROL_CONTROLTYPE_VOLUME = (MIXERCONTROL_CONTROLTYPE_FADER + 1)
public const int MIXERCONTROL_CONTROLTYPE_BASS = (MIXERCONTROL_CONTROLTYPE_FADER + 2)
public const int MIXERCONTROL_CONTROLTYPE_TREBLE = (MIXERCONTROL_CONTROLTYPE_FADER + 3)
public const int MIXERCONTROL_CONTROLTYPE_EQUALIZER = (MIXERCONTROL_CONTROLTYPE_FADER + 4)
public const int MIXERCONTROL_CONTROLTYPE_SINGLESELECT = (MIXERCONTROL_CT_CLASS_LIST Or MIXERCONTROL_CT_SC_LIST_SINGLE Or MIXERCONTROL_CT_UNITS_BOOLEAN)
public const int MIXERCONTROL_CONTROLTYPE_MUX = (MIXERCONTROL_CONTROLTYPE_SINGLESELECT + 1)
public const int MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT = (MIXERCONTROL_CT_CLASS_LIST Or MIXERCONTROL_CT_SC_LIST_MULTIPLE Or MIXERCONTROL_CT_UNITS_BOOLEAN)
public const int MIXERCONTROL_CONTROLTYPE_MIXER = (MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT + 1)
public const int MIXERCONTROL_CONTROLTYPE_MICROTIME = (MIXERCONTROL_CT_CLASS_TIME Or MIXERCONTROL_CT_SC_TIME_MICROSECS Or MIXERCONTROL_CT_UNITS_UNSIGNED)
public const int MIXERCONTROL_CONTROLTYPE_MILLITIME = (MIXERCONTROL_CT_CLASS_TIME Or MIXERCONTROL_CT_SC_TIME_MILLISECS Or MIXERCONTROL_CT_UNITS_UNSIGNED)
//
//   MIXERLINECONTROLS
//
Type MIXERLINECONTROLS
        cbStruct       //  size in Byte of MIXERLINECONTROLS
        dwLineID       //  line id (from MIXERLINE.dwLineID)
                                             //  MIXER_GETLINECONTROLSF_ONEBYID or
        dwControl  //  MIXER_GETLINECONTROLSF_ONEBYTYPE
        cControls      //  count of controls pmxctrl points to
        cbmxctrl       //  size in Byte of _one_ MIXERCONTROL
        pamxctrl As MIXERCONTROL       //  pointer to first MIXERCONTROL array
End Type

Declare Function mixerGetLineControls Lib "winmm.dll" Alias "mixerGetLineControlsA" (ByVal hmxobj As Long, pmxlc As MIXERLINECONTROLS, ByVal fdwControls As Long) As Long

public const int MIXER_GETLINECONTROLSF_ALL =  H0 
public const int MIXER_GETLINECONTROLSF_ONEBYID =  H1 
public const int MIXER_GETLINECONTROLSF_ONEBYTYPE =  H2 
public const int MIXER_GETLINECONTROLSF_QUERYMASK =  HF 

Type MIXERCONTROLDETAILS
        cbStruct       //  size in Byte of MIXERCONTROLDETAILS
        dwControlID    //  control id to get/set details on
        cChannels      //  number of channels in paDetails array
        item                           // hwndOwner or cMultipleItems
        cbDetails      //  size of _one_ details_XX struct
        paDetails      //  pointer to array of details_XX structs
End Type

//   MIXER_GETCONTROLDETAILSF_LISTTEXT

Type MIXERCONTROLDETAILS_LISTTEXT
        dwParam1 As Long
        dwParam2 As Long
        szName As String * MIXER_LONG_NAME_CHARS
End Type

//   MIXER_GETCONTROLDETAILSF_VALUE

Type MIXERCONTROLDETAILS_BOOLEAN
        fValue As Long
End Type

Type MIXERCONTROLDETAILS_SIGNED
        lValue As Long
End Type

Type MIXERCONTROLDETAILS_UNSIGNED
        dwValue As Long
End Type

Declare Function mixerGetControlDetails Lib "winmm.dll" Alias "mixerGetControlDetailsA" (ByVal hmxobj As Long, pmxcd As MIXERCONTROLDETAILS, ByVal fdwDetails As Long) As Long

public const int MIXER_GETCONTROLDETAILSF_VALUE =  H0 
public const int MIXER_GETCONTROLDETAILSF_LISTTEXT =  H1 
public const int MIXER_GETCONTROLDETAILSF_QUERYMASK =  HF 

Declare Function mixerSetControlDetails Lib "winmm.dll" Alias "mixerSetControlDetails" (ByVal hmxobj As Long, pmxcd As MIXERCONTROLDETAILS, ByVal fdwDetails As Long) As Long

public const int MIXER_SETCONTROLDETAILSF_VALUE =  H0 
public const int MIXER_SETCONTROLDETAILSF_CUSTOM =  H1 
public const int MIXER_SETCONTROLDETAILSF_QUERYMASK =  HF 

//  public const intants used with JOYINFOEX
public const int JOY_BUTTON5 =  H10 
public const int JOY_BUTTON6 =  H20 
public const int JOY_BUTTON7 =  H40 
public const int JOY_BUTTON8 =  H80 
public const int JOY_BUTTON9 =  H100 
public const int JOY_BUTTON10 =  H200 
public const int JOY_BUTTON11 =  H400 
public const int JOY_BUTTON12 =  H800 
public const int JOY_BUTTON13 =  H1000 
public const int JOY_BUTTON14 =  H2000 
public const int JOY_BUTTON15 =  H4000 
public const int JOY_BUTTON16 =  H8000 
public const int JOY_BUTTON17 =  H10000
public const int JOY_BUTTON18 =  H20000
public const int JOY_BUTTON19 =  H40000
public const int JOY_BUTTON20 =  H80000
public const int JOY_BUTTON21 =  H100000
public const int JOY_BUTTON22 =  H200000
public const int JOY_BUTTON23 =  H400000
public const int JOY_BUTTON24 =  H800000
public const int JOY_BUTTON25 =  H1000000
public const int JOY_BUTTON26 =  H2000000
public const int JOY_BUTTON27 =  H4000000
public const int JOY_BUTTON28 =  H8000000
public const int JOY_BUTTON29 =  H10000000
public const int JOY_BUTTON30 =  H20000000
public const int JOY_BUTTON31 =  H40000000
public const int JOY_BUTTON32 =  H80000000

//  public const intants used with JOYINFOEX structure
public const int JOY_POVCENTERED = -1
public const int JOY_POVFORWARD = 0
public const int JOY_POVRIGHT = 9000
public const int JOY_POVBACKWARD = 18000
public const int JOY_POVLEFT = 27000
public const int JOY_RETURNX =  H1 
public const int JOY_RETURNY =  H2 
public const int JOY_RETURNZ =  H4 
public const int JOY_RETURNR =  H8 
public const int JOY_RETURNU =  H10                             //  axis 5
public const int JOY_RETURNV =  H20                             //  axis 6
public const int JOY_RETURNPOV =  H40 
public const int JOY_RETURNBUTTONS =  H80 
public const int JOY_RETURNRAWDATA =  H100 
public const int JOY_RETURNPOVCTS =  H200 
public const int JOY_RETURNCENTERED =  H400 
public const int JOY_USEDEADZONE =  H800 
public const int JOY_RETURNALL = (JOY_RETURNX Or JOY_RETURNY Or JOY_RETURNZ Or JOY_RETURNR Or JOY_RETURNU Or JOY_RETURNV Or JOY_RETURNPOV Or JOY_RETURNBUTTONS)
public const int JOY_CAL_READALWAYS =  H10000
public const int JOY_CAL_READXYONLY =  H20000
public const int JOY_CAL_READ3 =  H40000
public const int JOY_CAL_READ4 =  H80000
public const int JOY_CAL_READXONLY =  H100000
public const int JOY_CAL_READYONLY =  H200000
public const int JOY_CAL_READ5 =  H400000
public const int JOY_CAL_READ6 =  H800000
public const int JOY_CAL_READZONLY =  H1000000
public const int JOY_CAL_READRONLY =  H2000000
public const int JOY_CAL_READUONLY =  H4000000
public const int JOY_CAL_READVONLY =  H8000000

Declare Function joyGetPos Lib "winmm.dll" Alias "joyGetPos" (ByVal uJoyID As Long, pji As JOYINFO) As Long
Declare Function joyGetPosEx Lib "winmm.dll" Alias "joyGetPosEx" (ByVal uJoyID As Long, pji As JOYINFOEX) As Long
public const int WAVE_FORMAT_QUERY =  H1
public const int SND_PURGE =  H40               //  purge non-static events for task
public const int SND_APPLICATION =  H80         //  look for application specific association
public const int WAVE_MAPPED =  H4
public const int WAVE_FORMAT_DIRECT =  H8
public const int WAVE_FORMAT_DIRECT_QUERY = (WAVE_FORMAT_QUERY Or WAVE_FORMAT_DIRECT)
public const int MIM_MOREDATA = MM_MIM_MOREDATA
public const int MOM_POSITIONCB = MM_MOM_POSITIONCB

//  flags for dwFlags parm of midiInOpen()
public const int MIDI_IO_STATUS =  H20 

Declare Function midiStreamOpen Lib "winmm.dll" Alias "midiStreamOpen" (phms As Long, puDeviceID As Long, ByVal cMidi As Long, ByVal dwCallback As Long, ByVal dwInstance As Long, ByVal fdwOpen As Long) As Long
Declare Function midiStreamClose Lib "winmm.dll" Alias "midiStreamClose" (ByVal hms As Long) As Long

Declare Function midiStreamProperty Lib "winmm.dll" Alias "midiStreamProperty" (ByVal hms As Long, lppropdata As Byte, ByVal dwProperty As Long) As Long
Declare Function midiStreamPosition Lib "winmm.dll" Alias "midiStreamPosition" (ByVal hms As Long, lpmmt As MMTIME, ByVal cbmmt As Long) As Long
Declare Function midiStreamOut Lib "winmm.dll" Alias "midiStreamOut" (ByVal hms As Long, pmh As MIDIHDR, ByVal cbmh As Long) As Long
Declare Function midiStreamPause Lib "winmm.dll" Alias "midiStreamPause" (ByVal hms As Long) As Long
Declare Function midiStreamRestart Lib "winmm.dll" Alias "midiStreamRestart" (ByVal hms As Long) As Long
Declare Function midiStreamStop Lib "winmm.dll" Alias "midiStreamStop" (ByVal hms As Long) As Long
Declare Function midiConnect Lib "winmm.dll" Alias "midiConnect" (ByVal hmi As Long, ByVal hmo As Long, pReserved As Any) As Long
Declare Function midiDisconnect Lib "winmm.dll" Alias "midiDisconnect" (ByVal hmi As Long, ByVal hmo As Long, pReserved As Any) As Long

Type JOYINFOEX
        dwSize                 //  size of structure
        dwFlags                 //  flags to indicate what to return
        dwXpos                //  x position
        dwYpos                //  y position
        dwZpos                //  z position
        dwRpos                 //  rudder/4th axis position
        dwUpos                 //  5th axis position
        dwVpos                 //  6th axis position
        dwButtons             //  button states
        dwButtonNumber        //  current button number pressed
        dwPOV                 //  point of view state
        dwReserved1                 //  reserved for communication between winmm driver
        dwReserved2                 //  reserved for future expansion
End Type
// Installable driver support

// Driver messages
public const int DRV_LOAD =  H1
public const int DRV_ENABLE =  H2
public const int DRV_OPEN =  H3
public const int DRV_CLOSE =  H4
public const int DRV_DISABLE =  H5
public const int DRV_FREE =  H6
public const int DRV_CONFIGURE =  H7
public const int DRV_QUERYCONFIGURE =  H8
public const int DRV_INSTALL =  H9
public const int DRV_REMOVE =  HA
public const int DRV_EXITSESSION =  HB
public const int DRV_POWER =  HF
public const int DRV_RESERVED =  H800
public const int DRV_USER =  H4000

Type DRVCONFIGINFO
        dwDCISize As Long
        lpszDCISectionName As String
        lpszDCIAliasName As String
        dnDevNode As Long
End Type

// Supported return values for DRV_CONFIGURE message
public const int DRVCNF_CANCEL =  H0
public const int DRVCNF_OK =  H1
public const int DRVCNF_RESTART =  H2

//  return values from DriverProc() function
public const int DRV_CANCEL = DRVCNF_CANCEL
public const int DRV_OK = DRVCNF_OK
public const int DRV_RESTART = DRVCNF_RESTART

Declare Function CloseDriver Lib "winmm.dll" Alias "CloseDriver" (ByVal hDriver As Long, ByVal lParam1 As Long, ByVal lParam2 As Long) As Long
Declare Function OpenDriver Lib "winmm.dll" Alias "OpenDriver" (ByVal szDriverName As String, ByVal szSectionName As String, ByVal lParam2 As Long) As Long
Declare Function SendDriverMessage Lib "winmm.dll" Alias "SendDriverMessage" (ByVal hDriver As Long, ByVal message As Long, ByVal lParam1 As Long, ByVal lParam2 As Long) As Long
Declare Function DrvGetModuleHandle Lib "winmm.dll" Alias "DrvGetModuleHandle" (ByVal hDriver As Long) As Long
Declare Function GetDriverModuleHandle Lib "winmm.dll" Alias "GetDriverModuleHandle" (ByVal hDriver As Long) As Long
Declare Function DefDriverProc Lib "winmm.dll" Alias "DefDriverProc" (ByVal dwDriverIdentifier As Long, ByVal hdrvr As Long, ByVal uMsg As Long, ByVal lParam1 As Long, ByVal lParam2 As Long) As Long

public const int DRV_MCI_FIRST = DRV_RESERVED
public const int DRV_MCI_LAST = DRV_RESERVED +  HFFF

// Driver callback support

//  flags used with waveOutOpen(), waveInOpen(), midiInOpen(), and
//  midiOutOpen() to specify the type of the dwCallback parameter.
public const int CALLBACK_TYPEMASK =  H70000      //  callback type mask
public const int CALLBACK_NULL =  H0        //  no callback
public const int CALLBACK_WINDOW =  H10000      //  dwCallback is a HWND
public const int CALLBACK_TASK =  H20000      //  dwCallback is a HTASK
public const int CALLBACK_FUNCTION =  H30000      //  dwCallback is a FARPROC

//  manufacturer IDs
public const int MM_MICROSOFT = 1  //  Microsoft Corp.

//  product IDs
public const int MM_MIDI_MAPPER = 1  //  MIDI Mapper
public const int MM_WAVE_MAPPER = 2  //  Wave Mapper

public const int MM_SNDBLST_MIDIOUT = 3  //  Sound Blaster MIDI output port
public const int MM_SNDBLST_MIDIIN = 4  //  Sound Blaster MIDI input port
public const int MM_SNDBLST_SYNTH = 5  //  Sound Blaster internal synthesizer
public const int MM_SNDBLST_WAVEOUT = 6  //  Sound Blaster waveform output
public const int MM_SNDBLST_WAVEIN = 7  //  Sound Blaster waveform input

public const int MM_ADLIB = 9  //  Ad Lib-compatible synthesizer

public const int MM_MPU401_MIDIOUT = 10  //  MPU401-compatible MIDI output port
public const int MM_MPU401_MIDIIN = 11  //  MPU401-compatible MIDI input port

public const int MM_PC_JOYSTICK = 12  //  Joystick adapter

Declare Function mmsystemGetVersion Lib "winmm.dll" Alias "mmsystemGetVersion" () As Long
Declare Sub OutputDebugStr Lib "winmm.dll" Alias "OutputDebugStr" (ByVal lpszOutputString As String)

Declare Function sndPlaySound Lib "winmm.dll" Alias "sndPlaySoundA" (ByVal lpszSoundName As String, ByVal uFlags As Long) As Long

//  flag values for uFlags parameter
public const int SND_SYNC =  H0         //  play synchronously (default)
public const int SND_ASYNC =  H1         //  play asynchronously

public const int SND_NODEFAULT =  H2         //  silence not default, if sound not found

public const int SND_MEMORY =  H4         //  lpszSoundName points to a memory file
public const int SND_ALIAS =  H10000     //  name is a WIN.INI [sounds] entry
public const int SND_FILENAME =  H20000     //  name is a file name
public const int SND_RESOURCE =  H40004     //  name is a resource name or atom
public const int SND_ALIAS_ID =  H110000    //  name is a WIN.INI [sounds] entry identifier

public const int SND_ALIAS_START = 0  //  must be > 4096 to keep strings in same section of resource file

public const int SND_LOOP =  H8         //  loop the sound until next sndPlaySound
public const int SND_NOSTOP =  H10        //  don//t stop any currently playing sound
public const int SND_VALID =  H1F        //  valid flags          / ;Internal /

public const int SND_NOWAIT =  H2000      //  don//t wait if the driver is busy

public const int SND_VALIDFLAGS =  H17201F    //  Set of valid flag bits.  Anything outside
                                    //  this range will raise an error
public const int SND_RESERVED =  HFF000000  //  In particular these flags are reserved

public const int SND_TYPE_MASK =  H170007

Declare Function PlaySound Lib "winmm.dll" Alias "PlaySoundA" (ByVal lpszName As String, ByVal hModule As Long, ByVal dwFlags As Long) As Long

//  waveform audio error return values
public const int WAVERR_BADFORMAT = (WAVERR_BASE + 0)    //  unsupported wave format
public const int WAVERR_STILLPLAYING = (WAVERR_BASE + 1)    //  still something playing
public const int WAVERR_UNPREPARED = (WAVERR_BASE + 2)    //  header not prepared
public const int WAVERR_SYNC = (WAVERR_BASE + 3)    //  device is synchronous
public const int WAVERR_LASTERROR = (WAVERR_BASE + 3)    //  last error in range

//  wave callback messages
public const int WOM_OPEN = MM_WOM_OPEN
public const int WOM_CLOSE = MM_WOM_CLOSE
public const int WOM_DONE = MM_WOM_DONE
public const int WIM_OPEN = MM_WIM_OPEN
public const int WIM_CLOSE = MM_WIM_CLOSE
public const int WIM_DATA = MM_WIM_DATA

//  device ID for wave device mapper
public const int WAVE_MAPPER = -1 

//  flags for dwFlags parameter in waveOutOpen() and waveInOpen()

public const int WAVE_ALLOWSYNC =  H2
public const int WAVE_VALID =  H3         //  ;Internal

Type WAVEHDR
        lpData As String
        dwBufferLength As Long
        dwBytesRecorded As Long
        dwUser As Long
        dwFlags As Long
        dwLoops As Long
        lpNext As Long
        Reserved As Long
End Type

//  flags for dwFlags field of WAVEHDR
public const int WHDR_DONE =  H1         //  done bit
public const int WHDR_PREPARED =  H2         //  set if this header has been prepared
public const int WHDR_BEGINLOOP =  H4         //  loop start block
public const int WHDR_ENDLOOP =  H8         //  loop end block
public const int WHDR_INQUEUE =  H10        //  reserved for driver
public const int WHDR_VALID =  H1F        //  valid flags      / ;Internal /

Type WAVEOUTCAPS
        wMid As Integer
        wPid As Integer
        vDriverVersion As Long
        szPname As String * MAXPNAMELEN
        dwFormats As Long
        wChannels As Integer
        dwSupport As Long
End Type

//  flags for dwSupport field of WAVEOUTCAPS
public const int WAVECAPS_PITCH =  H1         //  supports pitch control
public const int WAVECAPS_PLAYBACKRATE =  H2         //  supports playback rate control
public const int WAVECAPS_VOLUME =  H4         //  supports volume control
public const int WAVECAPS_LRVOLUME =  H8         //  separate left-right volume control
public const int WAVECAPS_SYNC =  H10

Type WAVEINCAPS
        wMid As Integer
        wPid As Integer
        vDriverVersion As Long
        szPname As String * MAXPNAMELEN
        dwFormats As Long
        wChannels As Integer
End Type

//  defines for dwFormat field of WAVEINCAPS and WAVEOUTCAPS
public const int WAVE_INVALIDFORMAT =  H0              //  invalid format
public const int WAVE_FORMAT_1M08 =  H1              //  11.025 kHz, Mono,   8-bit
public const int WAVE_FORMAT_1S08 =  H2              //  11.025 kHz, Stereo, 8-bit
public const int WAVE_FORMAT_1M16 =  H4              //  11.025 kHz, Mono,   16-bit
public const int WAVE_FORMAT_1S16 =  H8              //  11.025 kHz, Stereo, 16-bit
public const int WAVE_FORMAT_2M08 =  H10             //  22.05  kHz, Mono,   8-bit
public const int WAVE_FORMAT_2S08 =  H20             //  22.05  kHz, Stereo, 8-bit
public const int WAVE_FORMAT_2M16 =  H40             //  22.05  kHz, Mono,   16-bit
public const int WAVE_FORMAT_2S16 =  H80             //  22.05  kHz, Stereo, 16-bit
public const int WAVE_FORMAT_4M08 =  H100            //  44.1   kHz, Mono,   8-bit
public const int WAVE_FORMAT_4S08 =  H200            //  44.1   kHz, Stereo, 8-bit
public const int WAVE_FORMAT_4M16 =  H400            //  44.1   kHz, Mono,   16-bit
public const int WAVE_FORMAT_4S16 =  H800            //  44.1   kHz, Stereo, 16-bit

//  flags for wFormatTag field of WAVEFORMAT
public const int WAVE_FORMAT_PCM = 1  //  Needed in resource files so outside #ifndef RC_INVOKED

Type WAVEFORMAT
        wFormatTag As Integer
        nChannels As Integer
        nSamplesPerSec As Long
        nAvgBytesPerSec As Long
        nBlockAlign As Integer
End Type

Type PCMWAVEFORMAT
        wf As WAVEFORMAT
        wBitsPerSample As Integer
End Type

Declare Function waveOutGetNumDevs Lib "winmm.dll" Alias "waveOutGetNumDevs" () As Long
Declare Function waveOutGetDevCaps Lib "winmm.dll" Alias "waveOutGetDevCapsA" (ByVal uDeviceID As Long, lpCaps As WAVEOUTCAPS, ByVal uSize As Long) As Long

Declare Function waveOutGetVolume Lib "winmm.dll" Alias "waveOutGetVolume" (ByVal uDeviceID As Long, lpdwVolume As Long) As Long
Declare Function waveOutSetVolume Lib "winmm.dll" Alias "waveOutSetVolume" (ByVal uDeviceID As Long, ByVal dwVolume As Long) As Long

Declare Function waveOutGetErrorText Lib "winmm.dll" Alias "waveOutGetErrorTextA" (ByVal err As Long, ByVal lpText As String, ByVal uSize As Long) As Long

Declare Function waveOutOpen Lib "winmm.dll" Alias "waveOutOpen" (lphWaveOut As Long, ByVal uDeviceID As Long, lpFormat As WAVEFORMAT, ByVal dwCallback As Long, ByVal dwInstance As Long, ByVal dwFlags As Long) As Long
Declare Function waveOutClose Lib "winmm.dll" Alias "waveOutClose" (ByVal hWaveOut As Long) As Long
Declare Function waveOutPrepareHeader Lib "winmm.dll" Alias "waveOutPrepareHeader" (ByVal hWaveOut As Long, lpWaveOutHdr As WAVEHDR, ByVal uSize As Long) As Long
Declare Function waveOutUnprepareHeader Lib "winmm.dll" Alias "waveOutUnprepareHeader" (ByVal hWaveOut As Long, lpWaveOutHdr As WAVEHDR, ByVal uSize As Long) As Long
Declare Function waveOutWrite Lib "winmm.dll" Alias "waveOutWrite" (ByVal hWaveOut As Long, lpWaveOutHdr As WAVEHDR, ByVal uSize As Long) As Long
Declare Function waveOutPause Lib "winmm.dll" Alias "waveOutPause" (ByVal hWaveOut As Long) As Long
Declare Function waveOutRestart Lib "winmm.dll" Alias "waveOutRestart" (ByVal hWaveOut As Long) As Long
Declare Function waveOutReset Lib "winmm.dll" Alias "waveOutReset" (ByVal hWaveOut As Long) As Long
Declare Function waveOutBreakLoop Lib "winmm.dll" Alias "waveOutBreakLoop" (ByVal hWaveOut As Long) As Long
Declare Function waveOutGetPosition Lib "winmm.dll" Alias "waveOutGetPosition" (ByVal hWaveOut As Long, lpInfo As MMTIME, ByVal uSize As Long) As Long
Declare Function waveOutGetPitch Lib "winmm.dll" Alias "waveOutGetPitch" (ByVal hWaveOut As Long, lpdwPitch As Long) As Long
Declare Function waveOutSetPitch Lib "winmm.dll" Alias "waveOutSetPitch" (ByVal hWaveOut As Long, ByVal dwPitch As Long) As Long
Declare Function waveOutGetPlaybackRate Lib "winmm.dll" Alias "waveOutGetPlaybackRate" (ByVal hWaveOut As Long, lpdwRate As Long) As Long
Declare Function waveOutSetPlaybackRate Lib "winmm.dll" Alias "waveOutSetPlaybackRate" (ByVal hWaveOut As Long, ByVal dwRate As Long) As Long
Declare Function waveOutGetID Lib "winmm.dll" Alias "waveOutGetID" (ByVal hWaveOut As Long, lpuDeviceID As Long) As Long
Declare Function waveOutMessage Lib "winmm.dll" Alias "waveOutMessage" (ByVal hWaveOut As Long, ByVal msg As Long, ByVal dw1 As Long, ByVal dw2 As Long) As Long
Declare Function waveInGetNumDevs Lib "winmm.dll" Alias "waveInGetNumDevs" () As Long

Declare Function waveInGetDevCaps Lib "winmm.dll" Alias "waveInGetDevCapsA" (ByVal uDeviceID As Long, lpCaps As WAVEINCAPS, ByVal uSize As Long) As Long

Declare Function waveInGetErrorText Lib "winmm.dll" Alias "waveInGetErrorTextA" (ByVal err As Long, ByVal lpText As String, ByVal uSize As Long) As Long

Declare Function waveInOpen Lib "winmm.dll" Alias "waveInOpen" (lphWaveIn As Long, ByVal uDeviceID As Long, lpFormat As WAVEFORMAT, ByVal dwCallback As Long, ByVal dwInstance As Long, ByVal dwFlags As Long) As Long
Declare Function waveInClose Lib "winmm.dll" Alias "waveInClose" (ByVal hWaveIn As Long) As Long
Declare Function waveInPrepareHeader Lib "winmm.dll" Alias "waveInPrepareHeader" (ByVal hWaveIn As Long, lpWaveInHdr As WAVEHDR, ByVal uSize As Long) As Long
Declare Function waveInUnprepareHeader Lib "winmm.dll" Alias "waveInUnprepareHeader" (ByVal hWaveIn As Long, lpWaveInHdr As WAVEHDR, ByVal uSize As Long) As Long
Declare Function waveInAddBuffer Lib "winmm.dll" Alias "waveInAddBuffer" (ByVal hWaveIn As Long, lpWaveInHdr As WAVEHDR, ByVal uSize As Long) As Long
Declare Function waveInStart Lib "winmm.dll" Alias "waveInStart" (ByVal hWaveIn As Long) As Long
Declare Function waveInStop Lib "winmm.dll" Alias "waveInStop" (ByVal hWaveIn As Long) As Long
Declare Function waveInReset Lib "winmm.dll" Alias "waveInReset" (ByVal hWaveIn As Long) As Long
Declare Function waveInGetPosition Lib "winmm.dll" Alias "waveInGetPosition" (ByVal hWaveIn As Long, lpInfo As MMTIME, ByVal uSize As Long) As Long
Declare Function waveInGetID Lib "winmm.dll" Alias "waveInGetID" (ByVal hWaveIn As Long, lpuDeviceID As Long) As Long
Declare Function waveInMessage Lib "winmm.dll" Alias "waveInMessage" (ByVal hWaveIn As Long, ByVal msg As Long, ByVal dw1 As Long, ByVal dw2 As Long) As Long

//  MIDI error return values
public const int MIDIERR_UNPREPARED = (MIDIERR_BASE + 0)   //  header not prepared
public const int MIDIERR_STILLPLAYING = (MIDIERR_BASE + 1)   //  still something playing
public const int MIDIERR_NOMAP = (MIDIERR_BASE + 2)   //  no current map
public const int MIDIERR_NOTREADY = (MIDIERR_BASE + 3)   //  hardware is still busy
public const int MIDIERR_NODEVICE = (MIDIERR_BASE + 4)   //  port no longer connected
public const int MIDIERR_INVALIDSETUP = (MIDIERR_BASE + 5)   //  invalid setup
public const int MIDIERR_LASTERROR = (MIDIERR_BASE + 5)   //  last error in range

//  MIDI callback messages
public const int MIM_OPEN = MM_MIM_OPEN
public const int MIM_CLOSE = MM_MIM_CLOSE
public const int MIM_DATA = MM_MIM_DATA
public const int MIM_LONGDATA = MM_MIM_LONGDATA
public const int MIM_ERROR = MM_MIM_ERROR
public const int MIM_LONGERROR = MM_MIM_LONGERROR
public const int MOM_OPEN = MM_MOM_OPEN
public const int MOM_CLOSE = MM_MOM_CLOSE
public const int MOM_DONE = MM_MOM_DONE

//  device ID for MIDI mapper
public const int MIDIMAPPER = (-1)  //  Cannot be cast to DWORD as RC complains
public const int MIDI_MAPPER = -1 

//  flags for wFlags parm of midiOutCachePatches(), midiOutCacheDrumPatches()
public const int MIDI_CACHE_ALL = 1
public const int MIDI_CACHE_BESTFIT = 2
public const int MIDI_CACHE_QUERY = 3
public const int MIDI_UNCACHE = 4
public const int MIDI_CACHE_VALID = (MIDI_CACHE_ALL Or MIDI_CACHE_BESTFIT Or MIDI_CACHE_QUERY Or MIDI_UNCACHE)  //  ;Internal

Type MIDIOUTCAPS
        wMid As Integer
        wPid As Integer
        vDriverVersion As Long
        szPname As String * MAXPNAMELEN
        wTechnology As Integer
        wVoices As Integer
        wNotes As Integer
        wChannelMask As Integer
        dwSupport As Long
End Type

//  flags for wTechnology field of MIDIOUTCAPS structure
public const int MOD_MIDIPORT = 1  //  output port
public const int MOD_SYNTH = 2  //  generic internal synth
public const int MOD_SQSYNTH = 3  //  square wave internal synth
public const int MOD_FMSYNTH = 4  //  FM internal synth
public const int MOD_MAPPER = 5  //  MIDI mapper

//  flags for dwSupport field of MIDIOUTCAPS
public const int MIDICAPS_VOLUME =  H1         //  supports volume control
public const int MIDICAPS_LRVOLUME =  H2         //  separate left-right volume control
public const int MIDICAPS_CACHE =  H4

Type MIDIINCAPS
        wMid As Integer
        wPid As Integer
        vDriverVersion As Long
        szPname As String * MAXPNAMELEN
End Type

Type MIDIHDR
        lpData As String
        dwBufferLength As Long
        dwBytesRecorded As Long
        dwUser As Long
        dwFlags As Long
        lpNext As Long
        Reserved As Long
End Type

//  flags for dwFlags field of MIDIHDR structure
public const int MHDR_DONE =  H1         //  done bit
public const int MHDR_PREPARED =  H2         //  set if header prepared
public const int MHDR_INQUEUE =  H4         //  reserved for driver
public const int MHDR_VALID =  H7         //  valid flags / ;Internal /

Declare Function midiOutGetDevCaps Lib "winmm.dll" Alias "midiOutGetDevCapsA" (ByVal uDeviceID As Long, lpCaps As MIDIOUTCAPS, ByVal uSize As Long) As Long

Declare Function midiOutGetVolume Lib "winmm.dll" Alias "midiOutGetVolume" (ByVal uDeviceID As Long, lpdwVolume As Long) As Long
Declare Function midiOutSetVolume Lib "winmm.dll" Alias "midiOutSetVolume" (ByVal uDeviceID As Long, ByVal dwVolume As Long) As Long

Declare Function midiOutGetErrorText Lib "winmm.dll" Alias "midiOutGetErrorTextA" (ByVal err As Long, ByVal lpText As String, ByVal uSize As Long) As Long

Declare Function midiOutOpen Lib "winmm.dll" Alias "midiOutOpen" (lphMidiOut As Long, ByVal uDeviceID As Long, ByVal dwCallback As Long, ByVal dwInstance As Long, ByVal dwFlags As Long) As Long
Declare Function midiOutClose Lib "winmm.dll" Alias "midiOutClose" (ByVal hMidiOut As Long) As Long
Declare Function midiOutPrepareHeader Lib "winmm.dll" Alias "midiOutPrepareHeader" (ByVal hMidiOut As Long, lpMidiOutHdr As MIDIHDR, ByVal uSize As Long) As Long
Declare Function midiOutUnprepareHeader Lib "winmm.dll" Alias "midiOutUnprepareHeader" (ByVal hMidiOut As Long, lpMidiOutHdr As MIDIHDR, ByVal uSize As Long) As Long
Declare Function midiOutShortMsg Lib "winmm.dll" Alias "midiOutShortMsg" (ByVal hMidiOut As Long, ByVal dwMsg As Long) As Long
Declare Function midiOutLongMsg Lib "winmm.dll" Alias "midiOutLongMsg" (ByVal hMidiOut As Long, lpMidiOutHdr As MIDIHDR, ByVal uSize As Long) As Long
Declare Function midiOutReset Lib "winmm.dll" Alias "midiOutReset" (ByVal hMidiOut As Long) As Long
Declare Function midiOutCachePatches Lib "winmm.dll" Alias "midiOutCachePatches" (ByVal hMidiOut As Long, ByVal uBank As Long, lpPatchArray As Long, ByVal uFlags As Long) As Long
Declare Function midiOutCacheDrumPatches Lib "winmm.dll" Alias "midiOutCacheDrumPatches" (ByVal hMidiOut As Long, ByVal uPatch As Long, lpKeyArray As Long, ByVal uFlags As Long) As Long
Declare Function midiOutGetID Lib "winmm.dll" Alias "midiOutGetID" (ByVal hMidiOut As Long, lpuDeviceID As Long) As Long
Declare Function midiOutMessage Lib "winmm.dll" Alias "midiOutMessage" (ByVal hMidiOut As Long, ByVal msg As Long, ByVal dw1 As Long, ByVal dw2 As Long) As Long
Declare Function midiInGetNumDevs Lib "winmm.dll" Alias "midiInGetNumDevs" () As Long

Declare Function midiInGetDevCaps Lib "winmm.dll" Alias "midiInGetDevCapsA" (ByVal uDeviceID As Long, lpCaps As MIDIINCAPS, ByVal uSize As Long) As Long

Declare Function midiInGetErrorText Lib "winmm.dll" Alias "midiInGetErrorTextA" (ByVal err As Long, ByVal lpText As String, ByVal uSize As Long) As Long

Declare Function midiInOpen Lib "winmm.dll" Alias "midiInOpen" (lphMidiIn As Long, ByVal uDeviceID As Long, ByVal dwCallback As Long, ByVal dwInstance As Long, ByVal dwFlags As Long) As Long
Declare Function midiInClose Lib "winmm.dll" Alias "midiInClose" (ByVal hMidiIn As Long) As Long
Declare Function midiInPrepareHeader Lib "winmm.dll" Alias "midiInPrepareHeader" (ByVal hMidiIn As Long, lpMidiInHdr As MIDIHDR, ByVal uSize As Long) As Long
Declare Function midiInUnprepareHeader Lib "winmm.dll" Alias "midiInUnprepareHeader" (ByVal hMidiIn As Long, lpMidiInHdr As MIDIHDR, ByVal uSize As Long) As Long
Declare Function midiInAddBuffer Lib "winmm.dll" Alias "midiInAddBuffer" (ByVal hMidiIn As Long, lpMidiInHdr As MIDIHDR, ByVal uSize As Long) As Long
Declare Function midiInStart Lib "winmm.dll" Alias "midiInStart" (ByVal hMidiIn As Long) As Long
Declare Function midiInStop Lib "winmm.dll" Alias "midiInStop" (ByVal hMidiIn As Long) As Long
Declare Function midiInReset Lib "winmm.dll" Alias "midiInReset" (ByVal hMidiIn As Long) As Long
Declare Function midiInGetID Lib "winmm.dll" Alias "midiInGetID" (ByVal hMidiIn As Long, lpuDeviceID As Long) As Long
Declare Function midiInMessage Lib "winmm.dll" Alias "midiInMessage" (ByVal hMidiIn As Long, ByVal msg As Long, ByVal dw1 As Long, ByVal dw2 As Long) As Long

//  device ID for aux device mapper
public const int AUX_MAPPER = -1 

Type AUXCAPS
        wMid As Integer
        wPid As Integer
        vDriverVersion As Long
        szPname As String * MAXPNAMELEN
        wTechnology As Integer
        dwSupport As Long
End Type

//  flags for wTechnology field in AUXCAPS structure
public const int AUXCAPS_CDAUDIO = 1  //  audio from internal CD-ROM drive
public const int AUXCAPS_AUXIN = 2  //  audio from auxiliary input jacks

//  flags for dwSupport field in AUXCAPS structure
public const int AUXCAPS_VOLUME =  H1         //  supports volume control
public const int AUXCAPS_LRVOLUME =  H2         //  separate left-right volume control

Declare Function auxGetNumDevs Lib "winmm.dll" Alias "auxGetNumDevs" () As Long
Declare Function auxGetDevCaps Lib "winmm.dll" Alias "auxGetDevCapsA" (ByVal uDeviceID As Long, lpCaps As AUXCAPS, ByVal uSize As Long) As Long

Declare Function auxSetVolume Lib "winmm.dll" Alias "auxSetVolume" (ByVal uDeviceID As Long, ByVal dwVolume As Long) As Long
Declare Function auxGetVolume Lib "winmm.dll" Alias "auxGetVolume" (ByVal uDeviceID As Long, lpdwVolume As Long) As Long
Declare Function auxOutMessage Lib "winmm.dll" Alias "auxOutMessage" (ByVal uDeviceID As Long, ByVal msg As Long, ByVal dw1 As Long, ByVal dw2 As Long) As Long

//  timer error return values
public const int TIMERR_NOERROR = (0)  //  no error
public const int TIMERR_NOCANDO = (TIMERR_BASE + 1) //  request not completed
public const int TIMERR_STRUCT = (TIMERR_BASE + 33) //  time struct size

//  flags for wFlags parameter of timeSetEvent() function
public const int TIME_ONESHOT = 0  //  program timer for single event
public const int TIME_PERIODIC = 1  //  program for continuous periodic event

Type TIMECAPS
        wPeriodMin As Long
        wPeriodMax As Long
End Type

Declare Function timeGetSystemTime Lib "winmm.dll" Alias "timeGetSystemTime" (lpTime As MMTIME, ByVal uSize As Long) As Long
Declare Function timeGetTime Lib "winmm.dll" Alias "timeGetTime" () As Long
Declare Function timeSetEvent Lib "winmm.dll" Alias "timeSetEvent" (ByVal uDelay As Long, ByVal uResolution As Long, ByVal lpFunction As Long, ByVal dwUser As Long, ByVal uFlags As Long) As Long
Declare Function timeKillEvent Lib "winmm.dll" Alias "timeKillEvent" (ByVal uID As Long) As Long
Declare Function timeGetDevCaps Lib "winmm.dll" Alias "timeGetDevCaps" (lpTimeCaps As TIMECAPS, ByVal uSize As Long) As Long
Declare Function timeBeginPeriod Lib "winmm.dll" Alias "timeBeginPeriod" (ByVal uPeriod As Long) As Long
Declare Function timeEndPeriod Lib "winmm.dll" Alias "timeEndPeriod" (ByVal uPeriod As Long) As Long

//  joystick error return values
public const int JOYERR_NOERROR = (0)  //  no error
public const int JOYERR_PARMS = (JOYERR_BASE + 5) //  bad parameters
public const int JOYERR_NOCANDO = (JOYERR_BASE + 6) //  request not completed
public const int JOYERR_UNPLUGGED = (JOYERR_BASE + 7) //  joystick is unplugged

//  public const intants used with JOYINFO structure and MM_JOY messages
public const int JOY_BUTTON1 =  H1
public const int JOY_BUTTON2 =  H2
public const int JOY_BUTTON3 =  H4
public const int JOY_BUTTON4 =  H8
public const int JOY_BUTTON1CHG =  H100
public const int JOY_BUTTON2CHG =  H200
public const int JOY_BUTTON3CHG =  H400
public const int JOY_BUTTON4CHG =  H800

//  joystick ID public const intants
public const int JOYSTICKID1 = 0
public const int JOYSTICKID2 = 1

Type JOYCAPS
        wMid As Integer
        wPid As Integer
        szPname As String * MAXPNAMELEN
        wXmin As Integer
        wXmax As Integer
        wYmin As Integer
        wYmax As Integer
        wZmin As Integer
        wZmax As Integer
        wNumButtons As Integer
        wPeriodMin As Integer
        wPeriodMax As Integer
End Type

Type JOYINFO
        wXpos As Long
        wYpos As Long
        wZpos As Long
        wButtons As Long
End Type

Declare Function joyGetDevCaps Lib "winmm.dll" Alias "joyGetDevCapsA" (ByVal id As Long, lpCaps As JOYCAPS, ByVal uSize As Long) As Long

Declare Function joyGetNumDevs Lib "winmm.dll" Alias "joyGetNumDev" () As Long
Declare Function joyGetThreshold Lib "winmm.dll" Alias "joyGetThreshold" (ByVal id As Long, lpuThreshold As Long) As Long
Declare Function joyReleaseCapture Lib "winmm.dll" Alias "joyReleaseCapture" (ByVal id As Long) As Long
Declare Function joySetCapture Lib "winmm.dll" Alias "joySetCapture" (ByVal hwnd As Long, ByVal uID As Long, ByVal uPeriod As Long, ByVal bChanged As Long) As Long
Declare Function joySetThreshold Lib "winmm.dll" Alias "joySetThreshold" (ByVal id As Long, ByVal uThreshold As Long) As Long

//  MMIO error return values
public const int MMIOERR_BASE = 256
public const int MMIOERR_FILENOTFOUND = (MMIOERR_BASE + 1)  //  file not found
public const int MMIOERR_OUTOFMEMORY = (MMIOERR_BASE + 2)  //  out of memory
public const int MMIOERR_CANNOTOPEN = (MMIOERR_BASE + 3)  //  cannot open
public const int MMIOERR_CANNOTCLOSE = (MMIOERR_BASE + 4)  //  cannot close
public const int MMIOERR_CANNOTREAD = (MMIOERR_BASE + 5)  //  cannot read
public const int MMIOERR_CANNOTWRITE = (MMIOERR_BASE + 6) //  cannot write
public const int MMIOERR_CANNOTSEEK = (MMIOERR_BASE + 7)  //  cannot seek
public const int MMIOERR_CANNOTEXPAND = (MMIOERR_BASE + 8)  //  cannot expand file
public const int MMIOERR_CHUNKNOTFOUND = (MMIOERR_BASE + 9)  //  chunk not found
public const int MMIOERR_UNBUFFERED = (MMIOERR_BASE + 10) //  file is unbuffered

//  MMIO public const intants
public const int CFSEPCHAR = "+"  //  compound file name separator char.

Type MMIOINFO
        dwFlags As Long
        fccIOProc As Long
        pIOProc As Long
        wErrorRet As Long
        htask As Long
        cchBuffer As Long
        pchBuffer As String
        pchNext As String
        pchEndRead As String
        pchEndWrite As String
        lBufOffset As Long
        lDiskOffset As Long
        adwInfo(4) As Long
        dwReserved1 As Long
        dwReserved2 As Long
        hmmio As Long
End Type

public const int MMIO_RWMODE =  H3         //  mask to get bits used for opening
                                        //  file for reading/writing/both
public const int MMIO_SHAREMODE =  H70        //  file sharing mode number

//  public const intants for dwFlags field of MMIOINFO
public const int MMIO_CREATE =  H1000      //  create new file (or truncate file)
public const int MMIO_PARSE =  H100       //  parse new file returning path
public const int MMIO_DELETE =  H200       //  create new file (or truncate file)
public const int MMIO_EXIST =  H4000      //  checks for existence of file
public const int MMIO_ALLOCBUF =  H10000     //  mmioOpen() should allocate a buffer
public const int MMIO_GETTEMP =  H20000     //  mmioOpen() should retrieve temp name

public const int MMIO_DIRTY =  H10000000  //  I/O buffer is dirty
//  MMIO_DIRTY is also used in the <dwFlags> field of MMCKINFO structure

public const int MMIO_OPEN_VALID =  H3FFFF     //  valid flags for mmioOpen / ;Internal /

//  read/write mode numbers (bit field MMIO_RWMODE)
public const int MMIO_READ =  H0         //  open file for reading only
public const int MMIO_WRITE =  H1         //  open file for writing only
public const int MMIO_READWRITE =  H2         //  open file for reading and writing

//  share mode numbers (bit field MMIO_SHAREMODE)
public const int MMIO_COMPAT =  H0         //  compatibility mode
public const int MMIO_EXCLUSIVE =  H10        //  exclusive-access mode
public const int MMIO_DENYWRITE =  H20        //  deny writing to other processes
public const int MMIO_DENYREAD =  H30        //  deny reading to other processes
public const int MMIO_DENYNONE =  H40        //  deny nothing to other processes

//  flags for other functions
public const int MMIO_FHOPEN =  H10    //  mmioClose(): keep file handle open
public const int MMIO_EMPTYBUF =  H10    //  mmioFlush(): empty the I/O buffer
public const int MMIO_TOUPPER =  H10    //  mmioStringToFOURCC(): cvt. to u-case
public const int MMIO_INSTALLPROC =  H10000     //  mmioInstallIOProc(): install MMIOProc
public const int MMIO_PUBLICPROC =  H10000000  //  mmioInstallIOProc: install Globally
public const int MMIO_UNICODEPROC =  H1000000   //  mmioInstallIOProc(): Unicode MMIOProc
public const int MMIO_REMOVEPROC =  H20000     //  mmioInstallIOProc(): remove MMIOProc
public const int MMIO_FINDPROC =  H40000     //  mmioInstallIOProc(): find an MMIOProc
public const int MMIO_FINDCHUNK =  H10    //  mmioDescend(): find a chunk by ID
public const int MMIO_FINDRIFF =  H20    //  mmioDescend(): find a LIST chunk
public const int MMIO_FINDLIST =  H40    //  mmioDescend(): find a RIFF chunk
public const int MMIO_CREATERIFF =  H20    //  mmioCreateChunk(): make a LIST chunk
public const int MMIO_CREATELIST =  H40    //  mmioCreateChunk(): make a RIFF chunk

public const int MMIO_VALIDPROC =  H11070000  //  valid for mmioInstallIOProc / ;Internal /

//  message numbers for MMIOPROC I/O procedure functions
public const int MMIOM_READ = MMIO_READ  //  read (must equal MMIO_READ!)
public const int MMIOM_WRITE = MMIO_WRITE  //  write (must equal MMIO_WRITE!)
public const int MMIOM_SEEK = 2  //  seek to a new position in file
public const int MMIOM_OPEN = 3  //  open file
public const int MMIOM_CLOSE = 4  //  close file
public const int MMIOM_WRITEFLUSH = 5  //  write and flush
public const int MMIOM_RENAME = 6  //  rename specified file
public const int MMIOM_USER =  H8000  //  beginning of user-defined messages

//  flags for mmioSeek()
public const int SEEK_SET = 0  //  seek to an absolute position
public const int SEEK_CUR = 1  //  seek relative to current position
public const int SEEK_END = 2  //  seek relative to end of file

//  other public const intants
public const int MMIO_DEFAULTBUFFER = 8192  //  default buffer size

Type MMCKINFO
    ckid As Long
    ckSize As Long
    fccType As Long
    dwDataOffset As Long
    dwFlags As Long
End Type

Declare Function mmioStringToFOURCC Lib "winmm.dll" Alias "mmioStringToFOURCCA" (ByVal sz As String, ByVal uFlags As Long) As Long

Declare Function mmioOpen Lib "winmm.dll" Alias "mmioOpenA" (ByVal szFileName As String, lpmmioinfo As MMIOINFO, ByVal dwOpenFlags As Long) As Long

Declare Function mmioRename Lib "winmm.dll" Alias "mmioRenameA" (ByVal szFileName As String, ByVal SzNewFileName As String, lpmmioinfo As MMIOINFO, ByVal dwRenameFlags As Long) As Long

Declare Function mmioClose Lib "winmm.dll" Alias "mmioClose" (ByVal hmmio As Long, ByVal uFlags As Long) As Long
Declare Function mmioRead Lib "winmm.dll" Alias "mmioRead" (ByVal hmmio As Long, ByVal pch As String, ByVal cch As Long) As Long
Declare Function mmioWrite Lib "winmm.dll" Alias "mmioWrite" (ByVal hmmio As Long, ByVal pch As String, ByVal cch As Long) As Long
Declare Function mmioSeek Lib "winmm.dll" Alias "mmioSeek" (ByVal hmmio As Long, ByVal lOffset As Long, ByVal iOrigin As Long) As Long
Declare Function mmioGetInfo Lib "winmm.dll" Alias "mmioGetInfo" (ByVal hmmio As Long, lpmmioinfo As MMIOINFO, ByVal uFlags As Long) As Long
Declare Function mmioSetInfo Lib "winmm.dll" Alias "mmioSetInfo" (ByVal hmmio As Long, lpmmioinfo As MMIOINFO, ByVal uFlags As Long) As Long
Declare Function mmioSetBuffer Lib "winmm.dll" Alias "mmioSetBuffer" (ByVal hmmio As Long, ByVal pchBuffer As String, ByVal cchBuffer As Long, ByVal uFlags As Long) As Long
Declare Function mmioFlush Lib "winmm.dll" Alias "mmioFlush" (ByVal hmmio As Long, ByVal uFlags As Long) As Long
Declare Function mmioAdvance Lib "winmm.dll" Alias "mmioAdvance" (ByVal hmmio As Long, lpmmioinfo As MMIOINFO, ByVal uFlags As Long) As Long
Declare Function mmioSendMessage Lib "winmm.dll" Alias "mmioSendMessage" (ByVal hmmio As Long, ByVal uMsg As Long, ByVal lParam1 As Long, ByVal lParam2 As Long) As Long

Declare Function mmioDescend Lib "winmm.dll" Alias "mmioDescend" (ByVal hmmio As Long, lpck As MMCKINFO, lpckParent As MMCKINFO, ByVal uFlags As Long) As Long
Declare Function mmioAscend Lib "winmm.dll" Alias "mmioAscend" (ByVal hmmio As Long, lpck As MMCKINFO, ByVal uFlags As Long) As Long
Declare Function mmioCreateChunk Lib "winmm.dll" Alias "mmioCreateChunk" (ByVal hmmio As Long, lpck As MMCKINFO, ByVal uFlags As Long) As Long

// MCI functions

Declare Function mciSendCommand Lib "winmm.dll" Alias "mciSendCommandA" (ByVal wDeviceID As Long, ByVal uMessage As Long, ByVal dwParam1 As Long, ByVal dwParam2 As Any) As Long

Declare Function mciSendString Lib "winmm.dll" Alias "mciSendStringA" (ByVal lpstrCommand As String, ByVal lpstrReturnString As String, ByVal uReturnLength As Long, ByVal hwndCallback As Long) As Long

Declare Function mciGetCreatorTask Lib "winmm.dll" Alias "mciGetCreatorTask" (ByVal wDeviceID As Long) As Long

Declare Function mciGetDeviceID Lib "winmm.dll" Alias "mciGetDeviceIDA" (ByVal lpstrName As String) As Long

Declare Function mciGetDeviceIDFromElementID Lib "winmm.dll" Alias "mciGetDeviceIDFromElementIDA" (ByVal dwElementID As Long, ByVal lpstrType As String) As Long

Declare Function mciGetErrorString Lib "winmm.dll" Alias "mciGetErrorStringA" (ByVal dwError As Long, ByVal lpstrBuffer As String, ByVal uLength As Long) As Long

Declare Function mciExecute Lib "winmm.dll" Alias "mciExecute" (ByVal lpstrCommand As String) As Long

//   MCI error return values
public const int MCIERR_INVALID_DEVICE_ID = (MCIERR_BASE + 1)
public const int MCIERR_UNRECOGNIZED_KEYWORD = (MCIERR_BASE + 3)
public const int MCIERR_UNRECOGNIZED_COMMAND = (MCIERR_BASE + 5)
public const int MCIERR_HARDWARE = (MCIERR_BASE + 6)
public const int MCIERR_INVALID_DEVICE_NAME = (MCIERR_BASE + 7)
public const int MCIERR_OUT_OF_MEMORY = (MCIERR_BASE + 8)
public const int MCIERR_DEVICE_OPEN = (MCIERR_BASE + 9)
public const int MCIERR_CANNOT_LOAD_DRIVER = (MCIERR_BASE + 10)
public const int MCIERR_MISSING_COMMAND_STRING = (MCIERR_BASE + 11)
public const int MCIERR_PARAM_OVERFLOW = (MCIERR_BASE + 12)
public const int MCIERR_MISSING_STRING_ARGUMENT = (MCIERR_BASE + 13)
public const int MCIERR_BAD_INTEGER = (MCIERR_BASE + 14)
public const int MCIERR_PARSER_INTERNAL = (MCIERR_BASE + 15)
public const int MCIERR_DRIVER_INTERNAL = (MCIERR_BASE + 16)
public const int MCIERR_MISSING_PARAMETER = (MCIERR_BASE + 17)
public const int MCIERR_UNSUPPORTED_FUNCTION = (MCIERR_BASE + 18)
public const int MCIERR_FILE_NOT_FOUND = (MCIERR_BASE + 19)
public const int MCIERR_DEVICE_NOT_READY = (MCIERR_BASE + 20)
public const int MCIERR_INTERNAL = (MCIERR_BASE + 21)
public const int MCIERR_DRIVER = (MCIERR_BASE + 22)
public const int MCIERR_CANNOT_USE_ALL = (MCIERR_BASE + 23)
public const int MCIERR_MULTIPLE = (MCIERR_BASE + 24)
public const int MCIERR_EXTENSION_NOT_FOUND = (MCIERR_BASE + 25)
public const int MCIERR_OUTOFRANGE = (MCIERR_BASE + 26)
public const int MCIERR_FLAGS_NOT_COMPATIBLE = (MCIERR_BASE + 28)
public const int MCIERR_FILE_NOT_SAVED = (MCIERR_BASE + 30)
public const int MCIERR_DEVICE_TYPE_REQUIRED = (MCIERR_BASE + 31)
public const int MCIERR_DEVICE_LOCKED = (MCIERR_BASE + 32)
public const int MCIERR_DUPLICATE_ALIAS = (MCIERR_BASE + 33)
public const int MCIERR_BAD_public const intANT = (MCIERR_BASE + 34)
public const int MCIERR_MUST_USE_SHAREABLE = (MCIERR_BASE + 35)
public const int MCIERR_MISSING_DEVICE_NAME = (MCIERR_BASE + 36)
public const int MCIERR_BAD_TIME_FORMAT = (MCIERR_BASE + 37)
public const int MCIERR_NO_CLOSING_QUOTE = (MCIERR_BASE + 38)
public const int MCIERR_DUPLICATE_FLAGS = (MCIERR_BASE + 39)
public const int MCIERR_INVALID_FILE = (MCIERR_BASE + 40)
public const int MCIERR_NULL_PARAMETER_BLOCK = (MCIERR_BASE + 41)
public const int MCIERR_UNNAMED_RESOURCE = (MCIERR_BASE + 42)
public const int MCIERR_NEW_REQUIRES_ALIAS = (MCIERR_BASE + 43)
public const int MCIERR_NOTIFY_ON_AUTO_OPEN = (MCIERR_BASE + 44)
public const int MCIERR_NO_ELEMENT_ALLOWED = (MCIERR_BASE + 45)
public const int MCIERR_NONAPPLICABLE_FUNCTION = (MCIERR_BASE + 46)
public const int MCIERR_ILLEGAL_FOR_AUTO_OPEN = (MCIERR_BASE + 47)
public const int MCIERR_FILENAME_REQUIRED = (MCIERR_BASE + 48)
public const int MCIERR_EXTRA_CHARACTERS = (MCIERR_BASE + 49)
public const int MCIERR_DEVICE_NOT_INSTALLED = (MCIERR_BASE + 50)
public const int MCIERR_GET_CD = (MCIERR_BASE + 51)
public const int MCIERR_SET_CD = (MCIERR_BASE + 52)
public const int MCIERR_SET_DRIVE = (MCIERR_BASE + 53)
public const int MCIERR_DEVICE_LENGTH = (MCIERR_BASE + 54)
public const int MCIERR_DEVICE_ORD_LENGTH = (MCIERR_BASE + 55)
public const int MCIERR_NO_INTEGER = (MCIERR_BASE + 56)

public const int MCIERR_WAVE_OUTPUTSINUSE = (MCIERR_BASE + 64)
public const int MCIERR_WAVE_SETOUTPUTINUSE = (MCIERR_BASE + 65)
public const int MCIERR_WAVE_INPUTSINUSE = (MCIERR_BASE + 66)
public const int MCIERR_WAVE_SETINPUTINUSE = (MCIERR_BASE + 67)
public const int MCIERR_WAVE_OUTPUTUNSPECIFIED = (MCIERR_BASE + 68)
public const int MCIERR_WAVE_INPUTUNSPECIFIED = (MCIERR_BASE + 69)
public const int MCIERR_WAVE_OUTPUTSUNSUITABLE = (MCIERR_BASE + 70)
public const int MCIERR_WAVE_SETOUTPUTUNSUITABLE = (MCIERR_BASE + 71)
public const int MCIERR_WAVE_INPUTSUNSUITABLE = (MCIERR_BASE + 72)
public const int MCIERR_WAVE_SETINPUTUNSUITABLE = (MCIERR_BASE + 73)

public const int MCIERR_SEQ_DIV_INCOMPATIBLE = (MCIERR_BASE + 80)
public const int MCIERR_SEQ_PORT_INUSE = (MCIERR_BASE + 81)
public const int MCIERR_SEQ_PORT_NONEXISTENT = (MCIERR_BASE + 82)
public const int MCIERR_SEQ_PORT_MAPNODEVICE = (MCIERR_BASE + 83)
public const int MCIERR_SEQ_PORT_MISCERROR = (MCIERR_BASE + 84)
public const int MCIERR_SEQ_TIMER = (MCIERR_BASE + 85)
public const int MCIERR_SEQ_PORTUNSPECIFIED = (MCIERR_BASE + 86)
public const int MCIERR_SEQ_NOMIDIPRESENT = (MCIERR_BASE + 87)

public const int MCIERR_NO_WINDOW = (MCIERR_BASE + 90)
public const int MCIERR_CREATEWINDOW = (MCIERR_BASE + 91)
public const int MCIERR_FILE_READ = (MCIERR_BASE + 92)
public const int MCIERR_FILE_WRITE = (MCIERR_BASE + 93)

//  All custom device driver errors must be >= this value
public const int MCIERR_CUSTOM_DRIVER_BASE = (MCIERR_BASE + 256)

//  Message numbers must be in the range between MCI_FIRST and MCI_LAST

public const int MCI_FIRST =  H800
//  Messages 0x801 and 0x802 are reserved
public const int MCI_OPEN =  H803
public const int MCI_CLOSE =  H804
public const int MCI_ESCAPE =  H805
public const int MCI_PLAY =  H806
public const int MCI_SEEK =  H807
public const int MCI_STOP =  H808
public const int MCI_PAUSE =  H809
public const int MCI_INFO =  H80A
public const int MCI_GETDEVCAPS =  H80B
public const int MCI_SPIN =  H80C
public const int MCI_SET =  H80D
public const int MCI_STEP =  H80E
public const int MCI_RECORD =  H80F
public const int MCI_SYSINFO =  H810
public const int MCI_BREAK =  H811
public const int MCI_SOUND =  H812
public const int MCI_SAVE =  H813
public const int MCI_STATUS =  H814

public const int MCI_CUE =  H830

public const int MCI_REALIZE =  H840
public const int MCI_WINDOW =  H841
public const int MCI_PUT =  H842
public const int MCI_WHERE =  H843
public const int MCI_FREEZE =  H844
public const int MCI_UNFREEZE =  H845

public const int MCI_LOAD =  H850
public const int MCI_CUT =  H851
public const int MCI_COPY =  H852
public const int MCI_PASTE =  H853
public const int MCI_UPDATE =  H854
public const int MCI_RESUME =  H855
public const int MCI_DELETE =  H856

public const int MCI_LAST =  HFFF

//  the next 0x400 message ID//s are reserved for custom drivers
//  all custom MCI command messages must be >= than this value
public const int MCI_USER_MESSAGES = ( H400 + MCI_FIRST)
public const int MCI_ALL_DEVICE_ID =  - 1 //  Matches all MCI devices

//  public const intants for predefined MCI device types
public const int MCI_DEVTYPE_VCR = 513
public const int MCI_DEVTYPE_VIDEODISC = 514
public const int MCI_DEVTYPE_OVERLAY = 515
public const int MCI_DEVTYPE_CD_AUDIO = 516
public const int MCI_DEVTYPE_DAT = 517
public const int MCI_DEVTYPE_SCANNER = 518
public const int MCI_DEVTYPE_ANIMATION = 519
public const int MCI_DEVTYPE_DIGITAL_VIDEO = 520
public const int MCI_DEVTYPE_OTHER = 521
public const int MCI_DEVTYPE_WAVEFORM_AUDIO = 522
public const int MCI_DEVTYPE_SEQUENCER = 523

public const int MCI_DEVTYPE_FIRST = MCI_DEVTYPE_VCR
public const int MCI_DEVTYPE_LAST = MCI_DEVTYPE_SEQUENCER

public const int MCI_DEVTYPE_FIRST_USER =  H1000

//  return values for //status mode// command
public const int MCI_MODE_NOT_READY = (MCI_STRING_OFFSET + 12)
public const int MCI_MODE_STOP = (MCI_STRING_OFFSET + 13)
public const int MCI_MODE_PLAY = (MCI_STRING_OFFSET + 14)
public const int MCI_MODE_RECORD = (MCI_STRING_OFFSET + 15)
public const int MCI_MODE_SEEK = (MCI_STRING_OFFSET + 16)
public const int MCI_MODE_PAUSE = (MCI_STRING_OFFSET + 17)
public const int MCI_MODE_OPEN = (MCI_STRING_OFFSET + 18)

//  public const intants used in //set time format// and //status time format// commands
public const int MCI_FORMAT_MILLISECONDS = 0
public const int MCI_FORMAT_HMS = 1
public const int MCI_FORMAT_MSF = 2
public const int MCI_FORMAT_FRAMES = 3
public const int MCI_FORMAT_SMPTE_24 = 4
public const int MCI_FORMAT_SMPTE_25 = 5
public const int MCI_FORMAT_SMPTE_30 = 6
public const int MCI_FORMAT_SMPTE_30DROP = 7
public const int MCI_FORMAT_BYTES = 8
public const int MCI_FORMAT_SAMPLES = 9
public const int MCI_FORMAT_TMSF = 10

//  Flags for wParam of the MM_MCINOTIFY message
public const int MCI_NOTIFY_SUCCESSFUL =  H1
public const int MCI_NOTIFY_SUPERSEDED =  H2
public const int MCI_NOTIFY_ABORTED =  H4
public const int MCI_NOTIFY_FAILURE =  H8

//  common flags for dwFlags parameter of MCI command messages
public const int MCI_NOTIFY =  H1 
public const int MCI_WAIT =  H2 
public const int MCI_FROM =  H4 
public const int MCI_TO =  H8 
public const int MCI_TRACK =  H10 

//  flags for dwFlags parameter of MCI_OPEN command message
public const int MCI_OPEN_SHAREABLE =  H100 
public const int MCI_OPEN_ELEMENT =  H200 
public const int MCI_OPEN_ALIAS =  H400 
public const int MCI_OPEN_ELEMENT_ID =  H800 
public const int MCI_OPEN_TYPE_ID =  H1000 
public const int MCI_OPEN_TYPE =  H2000 

//  flags for dwFlags parameter of MCI_SEEK command message
public const int MCI_SEEK_TO_START =  H100 
public const int MCI_SEEK_TO_END =  H200 

//  flags for dwFlags parameter of MCI_STATUS command message
public const int MCI_STATUS_ITEM =  H100 
public const int MCI_STATUS_START =  H200 

//  flags for dwItem field of the MCI_STATUS_PARMS parameter block
public const int MCI_STATUS_LENGTH =  H1 
public const int MCI_STATUS_POSITION =  H2 
public const int MCI_STATUS_NUMBER_OF_TRACKS =  H3 
public const int MCI_STATUS_MODE =  H4 
public const int MCI_STATUS_MEDIA_PRESENT =  H5 
public const int MCI_STATUS_TIME_FORMAT =  H6 
public const int MCI_STATUS_READY =  H7 
public const int MCI_STATUS_CURRENT_TRACK =  H8 

//  flags for dwFlags parameter of MCI_INFO command message
public const int MCI_INFO_PRODUCT =  H100 
public const int MCI_INFO_FILE =  H200 

//  flags for dwFlags parameter of MCI_GETDEVCAPS command message
public const int MCI_GETDEVCAPS_ITEM =  H100 

//  flags for dwItem field of the MCI_GETDEVCAPS_PARMS parameter block
public const int MCI_GETDEVCAPS_CAN_RECORD =  H1 
public const int MCI_GETDEVCAPS_HAS_AUDIO =  H2 
public const int MCI_GETDEVCAPS_HAS_VIDEO =  H3 
public const int MCI_GETDEVCAPS_DEVICE_TYPE =  H4 
public const int MCI_GETDEVCAPS_USES_FILES =  H5 
public const int MCI_GETDEVCAPS_COMPOUND_DEVICE =  H6 
public const int MCI_GETDEVCAPS_CAN_EJECT =  H7 
public const int MCI_GETDEVCAPS_CAN_PLAY =  H8 
public const int MCI_GETDEVCAPS_CAN_SAVE =  H9 

//  flags for dwFlags parameter of MCI_SYSINFO command message
public const int MCI_SYSINFO_QUANTITY =  H100 
public const int MCI_SYSINFO_OPEN =  H200 
public const int MCI_SYSINFO_NAME =  H400 
public const int MCI_SYSINFO_INSTALLNAME =  H800 

//  flags for dwFlags parameter of MCI_SET command message
public const int MCI_SET_DOOR_OPEN =  H100 
public const int MCI_SET_DOOR_CLOSED =  H200 
public const int MCI_SET_TIME_FORMAT =  H400 
public const int MCI_SET_AUDIO =  H800 
public const int MCI_SET_VIDEO =  H1000 
public const int MCI_SET_ON =  H2000 
public const int MCI_SET_OFF =  H4000 

//  flags for dwAudio field of MCI_SET_PARMS or MCI_SEQ_SET_PARMS
public const int MCI_SET_AUDIO_ALL =  H4001 
public const int MCI_SET_AUDIO_LEFT =  H4002 
public const int MCI_SET_AUDIO_RIGHT =  H4003 

//  flags for dwFlags parameter of MCI_BREAK command message
public const int MCI_BREAK_KEY =  H100 
public const int MCI_BREAK_HWND =  H200 
public const int MCI_BREAK_OFF =  H400 

//  flags for dwFlags parameter of MCI_RECORD command message
public const int MCI_RECORD_INSERT =  H100 
public const int MCI_RECORD_OVERWRITE =  H200 

//  flags for dwFlags parameter of MCI_SOUND command message
public const int MCI_SOUND_NAME =  H100 

//  flags for dwFlags parameter of MCI_SAVE command message
public const int MCI_SAVE_FILE =  H100 

//  flags for dwFlags parameter of MCI_LOAD command message
public const int MCI_LOAD_FILE =  H100 

Type MCI_GENERIC_PARMS
        dwCallback As Long
End Type

Type MCI_OPEN_PARMS
        dwCallback As Long
        wDeviceID As Long
        lpstrDeviceType As String
        lpstrElementName As String
        lpstrAlias As String
End Type

Type MCI_PLAY_PARMS
        dwCallback As Long
        dwFrom As Long
        dwTo As Long
End Type

Type MCI_SEEK_PARMS
        dwCallback As Long
        dwTo As Long
End Type

Type MCI_STATUS_PARMS
        dwCallback As Long
        dwReturn As Long
        dwItem As Long
        dwTrack As Integer
End Type

Type MCI_INFO_PARMS
        dwCallback As Long
        lpstrReturn As String
        dwRetSize As Long
End Type

Type MCI_GETDEVCAPS_PARMS
        dwCallback As Long
        dwReturn As Long
        dwIten As Long
End Type

Type MCI_SYSINFO_PARMS
        dwCallback As Long
        lpstrReturn As String
        dwRetSize As Long
        dwNumber As Long
        wDeviceType As Long
End Type

Type MCI_SET_PARMS
        dwCallback As Long
        dwTimeFormat As Long
        dwAudio As Long
End Type

Type MCI_BREAK_PARMS
        dwCallback As Long
        nVirtKey As Long
        hwndBreak As Long
End Type

Type MCI_SOUND_PARMS
        dwCallback As Long
        lpstrSoundName As String
End Type

Type MCI_SAVE_PARMS
        dwCallback As Long
        lpFileName As String
End Type

Type MCI_LOAD_PARMS
        dwCallback As Long
        lpFileName As String
End Type

Type MCI_RECORD_PARMS
        dwCallback As Long
        dwFrom As Long
        dwTo As Long
End Type

public const int MCI_VD_MODE_PARK = (MCI_VD_OFFSET + 1)

//  return ID//s for videodisc MCI_GETDEVCAPS command

//  flag for dwReturn field of MCI_STATUS_PARMS
//  MCI_STATUS command, (dwItem == MCI_VD_STATUS_MEDIA_TYPE)
public const int MCI_VD_MEDIA_CLV = (MCI_VD_OFFSET + 2)
public const int MCI_VD_MEDIA_CAV = (MCI_VD_OFFSET + 3)
public const int MCI_VD_MEDIA_OTHER = (MCI_VD_OFFSET + 4)

public const int MCI_VD_FORMAT_TRACK =  H4001

//  flags for dwFlags parameter of MCI_PLAY command message
public const int MCI_VD_PLAY_REVERSE =  H10000
public const int MCI_VD_PLAY_FAST =  H20000
public const int MCI_VD_PLAY_SPEED =  H40000
public const int MCI_VD_PLAY_SCAN =  H80000
public const int MCI_VD_PLAY_SLOW =  H100000

//  flag for dwFlags parameter of MCI_SEEK command message
public const int MCI_VD_SEEK_REVERSE =  H10000

//  flags for dwItem field of MCI_STATUS_PARMS parameter block
public const int MCI_VD_STATUS_SPEED =  H4002 
public const int MCI_VD_STATUS_FORWARD =  H4003 
public const int MCI_VD_STATUS_MEDIA_TYPE =  H4004 
public const int MCI_VD_STATUS_SIDE =  H4005 
public const int MCI_VD_STATUS_DISC_SIZE =  H4006 

//  flags for dwFlags parameter of MCI_GETDEVCAPS command message
public const int MCI_VD_GETDEVCAPS_CLV =  H10000
public const int MCI_VD_GETDEVCAPS_CAV =  H20000

public const int MCI_VD_SPIN_UP =  H10000
public const int MCI_VD_SPIN_DOWN =  H20000

//  flags for dwItem field of MCI_GETDEVCAPS_PARMS parameter block
public const int MCI_VD_GETDEVCAPS_CAN_REVERSE =  H4002 
public const int MCI_VD_GETDEVCAPS_FAST_RATE =  H4003 
public const int MCI_VD_GETDEVCAPS_SLOW_RATE =  H4004 
public const int MCI_VD_GETDEVCAPS_NORMAL_RATE =  H4005 

//  flags for the dwFlags parameter of MCI_STEP command message
public const int MCI_VD_STEP_FRAMES =  H10000
public const int MCI_VD_STEP_REVERSE =  H20000

//  flag for the MCI_ESCAPE command message
public const int MCI_VD_ESCAPE_STRING =  H100 

Type MCI_VD_PLAY_PARMS
        dwCallback As Long
        dwFrom As Long
        dwTo As Long
        dwSpeed As Long
End Type

Type MCI_VD_STEP_PARMS
        dwCallback As Long
        dwFrames As Long
End Type

Type MCI_VD_ESCAPE_PARMS
        dwCallback As Long
        lpstrCommand As String
End Type

public const int MCI_WAVE_PCM = (MCI_WAVE_OFFSET + 0)
public const int MCI_WAVE_MAPPER = (MCI_WAVE_OFFSET + 1)

//  flags for the dwFlags parameter of MCI_OPEN command message
public const int MCI_WAVE_OPEN_BUFFER =  H10000

//  flags for the dwFlags parameter of MCI_SET command message
public const int MCI_WAVE_SET_FORMATTAG =  H10000
public const int MCI_WAVE_SET_CHANNELS =  H20000
public const int MCI_WAVE_SET_SAMPLESPERSEC =  H40000
public const int MCI_WAVE_SET_AVGBYTESPERSEC =  H80000
public const int MCI_WAVE_SET_BLOCKALIGN =  H100000
public const int MCI_WAVE_SET_BITSPERSAMPLE =  H200000

//  flags for the dwFlags parameter of MCI_STATUS, MCI_SET command messages
public const int MCI_WAVE_INPUT =  H400000
public const int MCI_WAVE_OUTPUT =  H800000

//  flags for the dwItem field of MCI_STATUS_PARMS parameter block
public const int MCI_WAVE_STATUS_FORMATTAG =  H4001 
public const int MCI_WAVE_STATUS_CHANNELS =  H4002 
public const int MCI_WAVE_STATUS_SAMPLESPERSEC =  H4003 
public const int MCI_WAVE_STATUS_AVGBYTESPERSEC =  H4004 
public const int MCI_WAVE_STATUS_BLOCKALIGN =  H4005 
public const int MCI_WAVE_STATUS_BITSPERSAMPLE =  H4006 
public const int MCI_WAVE_STATUS_LEVEL =  H4007 

//  flags for the dwFlags parameter of MCI_SET command message
public const int MCI_WAVE_SET_ANYINPUT =  H4000000
public const int MCI_WAVE_SET_ANYOUTPUT =  H8000000

//  flags for the dwFlags parameter of MCI_GETDEVCAPS command message
public const int MCI_WAVE_GETDEVCAPS_INPUTS =  H4001 
public const int MCI_WAVE_GETDEVCAPS_OUTPUTS =  H4002 

Type MCI_WAVE_OPEN_PARMS
        dwCallback As Long
        wDeviceID As Long
        lpstrDeviceType As String
        lpstrElementName As String
        lpstrAlias As String
        dwBufferSeconds As Long
End Type

Type MCI_WAVE_DELETE_PARMS
        dwCallback As Long
        dwFrom As Long
        dwTo As Long
End Type

Type MCI_WAVE_SET_PARMS
        dwCallback As Long
        dwTimeFormat As Long
        dwAudio As Long
        wInput As Long
        wOutput As Long
        wFormatTag As Integer
        wReserved2 As Integer
        nChannels As Integer
        wReserved3 As Integer
        nSamplesPerSec As Long
        nAvgBytesPerSec As Long
        nBlockAlign As Integer
        wReserved4 As Integer
        wBitsPerSample As Integer
        wReserved5 As Integer
End Type

//  flags for the dwReturn field of MCI_STATUS_PARMS parameter block
//  MCI_STATUS command, (dwItem == MCI_SEQ_STATUS_DIVTYPE)
public const int MCI_SEQ_DIV_PPQN = (0 + MCI_SEQ_OFFSET)
public const int MCI_SEQ_DIV_SMPTE_24 = (1 + MCI_SEQ_OFFSET)
public const int MCI_SEQ_DIV_SMPTE_25 = (2 + MCI_SEQ_OFFSET)
public const int MCI_SEQ_DIV_SMPTE_30DROP = (3 + MCI_SEQ_OFFSET)
public const int MCI_SEQ_DIV_SMPTE_30 = (4 + MCI_SEQ_OFFSET)

//  flags for the dwMaster field of MCI_SEQ_SET_PARMS parameter block
//  MCI_SET command, (dwFlags == MCI_SEQ_SET_MASTER)
public const int MCI_SEQ_FORMAT_SONGPTR =  H4001
public const int MCI_SEQ_FILE =  H4002
public const int MCI_SEQ_MIDI =  H4003
public const int MCI_SEQ_SMPTE =  H4004
public const int MCI_SEQ_NONE = 65533

public const int MCI_SEQ_MAPPER = 65535

//  flags for the dwItem field of MCI_STATUS_PARMS parameter block
public const int MCI_SEQ_STATUS_TEMPO =  H4002 
public const int MCI_SEQ_STATUS_PORT =  H4003 
public const int MCI_SEQ_STATUS_SLAVE =  H4007 
public const int MCI_SEQ_STATUS_MASTER =  H4008 
public const int MCI_SEQ_STATUS_OFFSET =  H4009 
public const int MCI_SEQ_STATUS_DIVTYPE =  H400A 

//  flags for the dwFlags parameter of MCI_SET command message
public const int MCI_SEQ_SET_TEMPO =  H10000
public const int MCI_SEQ_SET_PORT =  H20000
public const int MCI_SEQ_SET_SLAVE =  H40000
public const int MCI_SEQ_SET_MASTER =  H80000
public const int MCI_SEQ_SET_OFFSET =  H1000000

Type MCI_SEQ_SET_PARMS
        dwCallback As Long
        dwTimeFormat As Long
        dwAudio As Long
        dwTempo As Long
        dwPort As Long
        dwSlave As Long
        dwMaster As Long
        dwOffset As Long
End Type

//  flags for dwFlags parameter of MCI_OPEN command message
public const int MCI_ANIM_OPEN_WS =  H10000
public const int MCI_ANIM_OPEN_PARENT =  H20000
public const int MCI_ANIM_OPEN_NOSTATIC =  H40000

//  flags for dwFlags parameter of MCI_PLAY command message
public const int MCI_ANIM_PLAY_SPEED =  H10000
public const int MCI_ANIM_PLAY_REVERSE =  H20000
public const int MCI_ANIM_PLAY_FAST =  H40000
public const int MCI_ANIM_PLAY_SLOW =  H80000
public const int MCI_ANIM_PLAY_SCAN =  H100000

//  flags for dwFlags parameter of MCI_STEP command message
public const int MCI_ANIM_STEP_REVERSE =  H10000
public const int MCI_ANIM_STEP_FRAMES =  H20000

//  flags for dwItem field of MCI_STATUS_PARMS parameter block
public const int MCI_ANIM_STATUS_SPEED =  H4001 
public const int MCI_ANIM_STATUS_FORWARD =  H4002 
public const int MCI_ANIM_STATUS_HWND =  H4003 
public const int MCI_ANIM_STATUS_HPAL =  H4004 
public const int MCI_ANIM_STATUS_STRETCH =  H4005 

//  flags for the dwFlags parameter of MCI_INFO command message
public const int MCI_ANIM_INFO_TEXT =  H10000

//  flags for dwItem field of MCI_GETDEVCAPS_PARMS parameter block
public const int MCI_ANIM_GETDEVCAPS_CAN_REVERSE =  H4001 
public const int MCI_ANIM_GETDEVCAPS_FAST_RATE =  H4002 
public const int MCI_ANIM_GETDEVCAPS_SLOW_RATE =  H4003 
public const int MCI_ANIM_GETDEVCAPS_NORMAL_RATE =  H4004 
public const int MCI_ANIM_GETDEVCAPS_PALETTES =  H4006 
public const int MCI_ANIM_GETDEVCAPS_CAN_STRETCH =  H4007 
public const int MCI_ANIM_GETDEVCAPS_MAX_WINDOWS =  H4008 

//  flags for the MCI_REALIZE command message
public const int MCI_ANIM_REALIZE_NORM =  H10000
public const int MCI_ANIM_REALIZE_BKGD =  H20000

//  flags for dwFlags parameter of MCI_WINDOW command message
public const int MCI_ANIM_WINDOW_HWND =  H10000
public const int MCI_ANIM_WINDOW_STATE =  H40000
public const int MCI_ANIM_WINDOW_TEXT =  H80000
public const int MCI_ANIM_WINDOW_ENABLE_STRETCH =  H100000
public const int MCI_ANIM_WINDOW_DISABLE_STRETCH =  H200000

//  flags for hWnd field of MCI_ANIM_WINDOW_PARMS parameter block
//  MCI_WINDOW command message, (dwFlags == MCI_ANIM_WINDOW_HWND)
public const int MCI_ANIM_WINDOW_DEFAULT =  H0 

//  flags for dwFlags parameter of MCI_PUT command message
public const int MCI_ANIM_RECT =  H10000
public const int MCI_ANIM_PUT_SOURCE =  H20000      //  also  MCI_WHERE
public const int MCI_ANIM_PUT_DESTINATION =  H40000      //  also  MCI_WHERE

//  flags for dwFlags parameter of MCI_WHERE command message
public const int MCI_ANIM_WHERE_SOURCE =  H20000
public const int MCI_ANIM_WHERE_DESTINATION =  H40000

//  flags for dwFlags parameter of MCI_UPDATE command message
public const int MCI_ANIM_UPDATE_HDC =  H20000

Type MCI_ANIM_OPEN_PARMS
        dwCallback As Long
        wDeviceID As Long
        lpstrDeviceType As String
        lpstrElementName As String
        lpstrAlias As String
        dwStyle As Long
        hWndParent As Long
End Type

Type MCI_ANIM_PLAY_PARMS
        dwCallback As Long
        dwFrom As Long
        dwTo As Long
        dwSpeed As Long
End Type

Type MCI_ANIM_STEP_PARMS
        dwCallback As Long
        dwFrames As Long
End Type

Type MCI_ANIM_WINDOW_PARMS
        dwCallback As Long
        hwnd As Long
        nCmdShow As Long
        lpstrText As String
End Type

Type MCI_ANIM_RECT_PARMS
        dwCallback As Long
        rc As Rect
End Type

Type MCI_ANIM_UPDATE_PARMS
        dwCallback As Long
        rc As Rect
        hdc As Long
End Type

//  flags for dwFlags parameter of MCI_OPEN command message
public const int MCI_OVLY_OPEN_WS =  H10000
public const int MCI_OVLY_OPEN_PARENT =  H20000

//  flags for dwFlags parameter of MCI_STATUS command message
public const int MCI_OVLY_STATUS_HWND =  H4001 
public const int MCI_OVLY_STATUS_STRETCH =  H4002 

//  flags for dwFlags parameter of MCI_INFO command message
public const int MCI_OVLY_INFO_TEXT =  H10000

//  flags for dwItem field of MCI_GETDEVCAPS_PARMS parameter block
public const int MCI_OVLY_GETDEVCAPS_CAN_STRETCH =  H4001 
public const int MCI_OVLY_GETDEVCAPS_CAN_FREEZE =  H4002 
public const int MCI_OVLY_GETDEVCAPS_MAX_WINDOWS =  H4003 

//  flags for dwFlags parameter of MCI_WINDOW command message
public const int MCI_OVLY_WINDOW_HWND =  H10000
public const int MCI_OVLY_WINDOW_STATE =  H40000
public const int MCI_OVLY_WINDOW_TEXT =  H80000
public const int MCI_OVLY_WINDOW_ENABLE_STRETCH =  H100000
public const int MCI_OVLY_WINDOW_DISABLE_STRETCH =  H200000

//  flags for hWnd parameter of MCI_OVLY_WINDOW_PARMS parameter block
public const int MCI_OVLY_WINDOW_DEFAULT =  H0 

//  flags for dwFlags parameter of MCI_PUT command message
public const int MCI_OVLY_RECT =  H10000
public const int MCI_OVLY_PUT_SOURCE =  H20000
public const int MCI_OVLY_PUT_DESTINATION =  H40000
public const int MCI_OVLY_PUT_FRAME =  H80000
public const int MCI_OVLY_PUT_VIDEO =  H100000

//  flags for dwFlags parameter of MCI_WHERE command message
public const int MCI_OVLY_WHERE_SOURCE =  H20000
public const int MCI_OVLY_WHERE_DESTINATION =  H40000
public const int MCI_OVLY_WHERE_FRAME =  H80000
public const int MCI_OVLY_WHERE_VIDEO =  H100000

Type MCI_OVLY_OPEN_PARMS
        dwCallback As Long
        wDeviceID As Long
        lpstrDeviceType As String
        lpstrElementName As String
        lpstrAlias As String
        dwStyle As Long
        hWndParent As Long
End Type

Type MCI_OVLY_WINDOW_PARMS
        dwCallback As Long
        hwnd As Long
        nCmdShow As Long
        lpstrText As String
End Type

Type MCI_OVLY_RECT_PARMS
        dwCallback As Long
        rc As Rect
End Type

Type MCI_OVLY_SAVE_PARMS
        dwCallback As Long
        lpFileName As String
        rc As Rect
End Type

Type MCI_OVLY_LOAD_PARMS
        dwCallback As Long
        lpFileName As String
        rc As Rect
End Type

public const int CAPS1 = 94              //  other caps
public const int C1_TRANSPARENT =  H1     //  new raster cap
public const int NEWTRANSPARENT = 3  //  use with SetBkMode()

public const int QUERYROPSUPPORT = 40  //  use to determine ROP support

public const int SELECTDIB = 41  //  DIB.DRV select dib escape

// ----------------
// shell association database management functions
// -----------------

//  error values for ShellExecute() beyond the regular WinExec() codes
public const int SE_ERR_SHARE = 26
public const int SE_ERR_ASSOCINCOMPLETE = 27
public const int SE_ERR_DDETIMEOUT = 28
public const int SE_ERR_DDEFAIL = 29
public const int SE_ERR_DDEBUSY = 30
public const int SE_ERR_NOASSOC = 31

// -------------
// Print APIs
// -------------

Type PRINTER_INFO_1
        flags As Long
        pDescription As String
        pName As String
        pComment As String
End Type

Type PRINTER_INFO_2
        pServerName As String
        pPrinterName As String
        pShareName As String
        pPortName As String
        pDriverName As String
        pComment As String
        pLocation As String
        pDevMode  	//wants a pointer to a DEVMODE struct
        pSepFile As String
        pPrintProcessor As String
        pDatatype As String
        pParameters As String
        pSecurityDescriptor  //wants pointer to a SECURITY_DESCRIPTOR struc. or a null
        Attributes As Long
        Priority As Long
        DefaultPriority As Long
        StartTime As Long
        UntilTime As Long
        Status As Long
        cJobs As Long
        AveragePPM As Long
End Type

Type PRINTER_INFO_3
        pSecurityDescriptor As SECURITY_DESCRIPTOR
End Type

public const int PRINTER_CONTROL_PAUSE = 1
public const int PRINTER_CONTROL_RESUME = 2
public const int PRINTER_CONTROL_PURGE = 3

public const int PRINTER_STATUS_PAUSED =  H1
public const int PRINTER_STATUS_ERROR =  H2
public const int PRINTER_STATUS_PENDING_DELETION =  H4
public const int PRINTER_STATUS_PAPER_JAM =  H8
public const int PRINTER_STATUS_PAPER_OUT =  H10
public const int PRINTER_STATUS_MANUAL_FEED =  H20
public const int PRINTER_STATUS_PAPER_PROBLEM =  H40
public const int PRINTER_STATUS_OFFLINE =  H80
public const int PRINTER_STATUS_IO_ACTIVE =  H100
public const int PRINTER_STATUS_BUSY =  H200
public const int PRINTER_STATUS_PRINTING =  H400
public const int PRINTER_STATUS_OUTPUT_BIN_FULL =  H800
public const int PRINTER_STATUS_NOT_AVAILABLE =  H1000
public const int PRINTER_STATUS_WAITING =  H2000
public const int PRINTER_STATUS_PROCESSING =  H4000
public const int PRINTER_STATUS_INITIALIZING =  H8000
public const int PRINTER_STATUS_WARMING_UP =  H10000
public const int PRINTER_STATUS_TONER_LOW =  H20000
public const int PRINTER_STATUS_NO_TONER =  H40000
public const int PRINTER_STATUS_PAGE_PUNT =  H80000
public const int PRINTER_STATUS_USER_INTERVENTION =  H100000
public const int PRINTER_STATUS_OUT_OF_MEMORY =  H200000
public const int PRINTER_STATUS_DOOR_OPEN =  H400000

public const int PRINTER_ATTRIBUTE_QUEUED =  H1
public const int PRINTER_ATTRIBUTE_DIRECT =  H2
public const int PRINTER_ATTRIBUTE_DEFAULT =  H4
public const int PRINTER_ATTRIBUTE_SHARED =  H8
public const int PRINTER_ATTRIBUTE_NETWORK =  H10
public const int PRINTER_ATTRIBUTE_HIDDEN =  H20
public const int PRINTER_ATTRIBUTE_LOCAL =  H40

public const int NO_PRIORITY = 0
public const int MAX_PRIORITY = 99
public const int MIN_PRIORITY = 1
public const int DEF_PRIORITY = 1

Type JOB_INFO_1
        JobId As Long
        pPrinterName As String
        pMachineName As String
        pUserName As String
        pDocument As String
        pDatatype As String
        pStatus As String
        Status As Long
        Priority As Long
        Position As Long
        TotalPages As Long
        PagesPrinted As Long
        Submitted As SYSTEMTIME
End Type

Type JOB_INFO_2
        JobId As Long
        pPrinterName As String
        pMachineName As String
        pUserName As String
        pDocument As String
        pNotifyName As String
        pDatatype As String
        pPrintProcessor As String
        pParameters As String
        pDriverName As String
        pDevMode As DEVMODE
        pStatus As String
        pSecurityDescriptor As SECURITY_DESCRIPTOR
        Status As Long
        Priority As Long
        Position As Long
        StartTime As Long
        UntilTime As Long
        TotalPages As Long
        Size As Long
        Submitted As SYSTEMTIME
        time As Long
        PagesPrinted As Long
End Type

public const int JOB_CONTROL_PAUSE = 1
public const int JOB_CONTROL_RESUME = 2
public const int JOB_CONTROL_CANCEL = 3
public const int JOB_CONTROL_RESTART = 4

public const int JOB_STATUS_PAUSED =  H1
public const int JOB_STATUS_ERROR =  H2
public const int JOB_STATUS_DELETING =  H4
public const int JOB_STATUS_SPOOLING =  H8
public const int JOB_STATUS_PRINTING =  H10
public const int JOB_STATUS_OFFLINE =  H20
public const int JOB_STATUS_PAPEROUT =  H40
public const int JOB_STATUS_PRINTED =  H80

public const int JOB_POSITION_UNSPECIFIED = 0

Type ADDJOB_INFO_1
        Path As String
        JobId As Long
End Type

Type DRIVER_INFO_1
        pName As String
End Type

Type DRIVER_INFO_2
        cVersion As Long
        pName As String
        pEnvironment As String
        pDriverPath As String
        pDataFile As String
        pConfigFile As String
End Type

Type DOC_INFO_1
        pDocName As String
        pOutputFile As String
        pDatatype As String
End Type

Type FORM_INFO_1
        pName As String
        Size As SIZEL
        ImageableArea As RECTL
End Type

public const int FORM_BUILTIN =  H1

Type PRINTPROCESSOR_INFO_1
        pName As String
End Type

Type PORT_INFO_1
        pName As String
End Type

Type MONITOR_INFO_1
        pName As String
End Type

Type MONITOR_INFO_2
        pName As String
        pEnvironment As String
        pDLLName As String
End Type

Type DATATYPES_INFO_1
        pName As String
End Type

Type PRINTER_DEFAULTS
        pDatatype // Pointer to a string
        pDevMode // Pointer to DEVMODE structure
        DesiredAccess As Long
End Type

Type PRINTER_INFO_4
	pPrinterName As String
	pServerName As String
	Attributes As Long
End Type

Type PRINTER_INFO_5
        pPrinterName As String
        pPortName As String
        Attributes As Long
        DeviceNotSelectedTimeout As Long
        TransmissionRetryTimeout As Long
End Type

public const int PRINTER_CONTROL_SET_STATUS = 4
public const int PRINTER_ATTRIBUTE_WORK_OFFLINE =  H400
public const int PRINTER_ATTRIBUTE_ENABLE_BIDI =  H800
public const int JOB_CONTROL_DELETE = 5
public const int JOB_STATUS_USER_INTERVENTION =  H10000

Type DRIVER_INFO_3
        cVersion As Long
        pName As String                    //  QMS 810
        pEnvironment As String             //  Win32 x86
        pDriverPath As String              //  c:\drivers\pscript.dll
        pDataFile As String                //  c:\drivers\QMS810.PPD
        pConfigFile As String              //  c:\drivers\PSCRPTUI.DLL
        pHelpFile As String                //  c:\drivers\PSCRPTUI.HLP
        pDependentFiles As String          //
        pMonitorName As String             //  "PJL monitor"
        pDefaultDataType As String         //  "EMF"
End Type

Type DOC_INFO_2
        pDocName As String
        pOutputFile As String
        pDatatype As String
        dwMode As Long
        JobId As Long
End Type

public const int DI_CHANNEL = 1                  //  start direct read/write channel,
public const int DI_READ_SPOOL_JOB = 3

Type PORT_INFO_2
        pPortName As String
        pMonitorName As String
        pDescription As String
        fPortType As Long
        Reserved As Long
End Type

public const int PORT_TYPE_WRITE =  H1
public const int PORT_TYPE_READ =  H2
public const int PORT_TYPE_REDIRECTED =  H4
public const int PORT_TYPE_NET_ATTACHED =  H8

Declare Function EnumPrinters Lib "winspool.drv" Alias "EnumPrintersA" (ByVal flags As Long, ByVal name As String, ByVal Level As Long, pPrinterEnum As Byte, ByVal cdBuf As Long, pcbNeeded As Long, pcReturned As Long) As Long

Declare Function EnumPrinterPropertySheets Lib "winspool.drv" Alias "EnumPrinterPropertySheets" (hPrinter As Long, hwnd As Long, lpfnAdd As Long, ByVal lParam As Long) As Long

public const int PRINTER_ENUM_DEFAULT =  H1
public const int PRINTER_ENUM_LOCAL =  H2
public const int PRINTER_ENUM_CONNECTIONS =  H4
public const int PRINTER_ENUM_FAVORITE =  H4
public const int PRINTER_ENUM_NAME =  H8
public const int PRINTER_ENUM_REMOTE =  H10
public const int PRINTER_ENUM_SHARED =  H20
public const int PRINTER_ENUM_NETWORK =  H40

public const int PRINTER_ENUM_EXPAND =  H4000
public const int PRINTER_ENUM_CONTAINER =  H8000

public const int PRINTER_ENUM_ICONMASK =  HFF0000
public const int PRINTER_ENUM_ICON1 =  H10000
public const int PRINTER_ENUM_ICON2 =  H20000
public const int PRINTER_ENUM_ICON3 =  H40000
public const int PRINTER_ENUM_ICON4 =  H80000
public const int PRINTER_ENUM_ICON5 =  H100000
public const int PRINTER_ENUM_ICON6 =  H200000
public const int PRINTER_ENUM_ICON7 =  H400000
public const int PRINTER_ENUM_ICON8 =  H800000

Declare Function OpenPrinter Lib "winspool.drv" Alias "OpenPrinterA" (ByVal pPrinterName As String, phPrinter As Long, pDefault As PRINTER_DEFAULTS) As Long
Declare Function ResetPrinter Lib "winspool.drv" Alias "ResetPrinterA" (ByVal hPrinter As Long, pDefault As PRINTER_DEFAULTS) As Long
Declare Function SetJob Lib "winspool.drv" Alias "SetJobA" (ByVal hPrinter As Long, ByVal JobId As Long, ByVal Level As Long, pJob As Byte, ByVal Command As Long) As Long
Declare Function GetJob Lib "winspool.drv" Alias "GetJobA" (ByVal hPrinter As Long, ByVal JobId As Long, ByVal Level As Long, pJob As Byte, ByVal cdBuf As Long, pcbNeeded As Long) As Long
Declare Function EnumJobs Lib "winspool.drv" Alias "EnumJobsA" (ByVal hPrinter As Long, ByVal FirstJob As Long, ByVal NoJobs As Long, ByVal Level As Long, pJob As Byte, ByVal cdBuf As Long, pcbNeeded As Long, pcReturned As Long) As Long
Declare Function AddPrinter Lib "winspool.drv" Alias "AddPrinterA" (ByVal pName As String, ByVal Level As Long, pPrinter As Any) As Long

Declare Function AddPrinterDriver Lib "winspool.drv" Alias "AddPrinterDriverA" (ByVal pName As String, ByVal Level As Long, pDriverInfo As Any) As Long

Declare Function EnumPrinterDrivers Lib "winspool.drv" Alias "EnumPrinterDriversA" (ByVal pName As String, ByVal pEnvironment As String, ByVal Level As Long, pDriverInfo As Byte, ByVal cdBuf As Long, pcbNeeded As Long, pcRetruned As Long) As Long
Declare Function GetPrinterDriver Lib "winspool.drv" Alias "GetPrinterDriverA" (ByVal hPrinter As Long, ByVal pEnvironment As String, ByVal Level As Long, pDriverInfo As Byte, ByVal cdBuf As Long, pcbNeeded As Long) As Long
Declare Function GetPrinterDriverDirectory Lib "winspool.drv" Alias "GetPrinterDriverDirectoryA" (ByVal pName As String, ByVal pEnvironment As String, ByVal Level As Long, pDriverDirectory As Byte, ByVal cdBuf As Long, pcbNeeded As Long) As Long
Declare Function DeletePrinterDriver Lib "winspool.drv" Alias "DeletePrinterDriverA" (ByVal pName As String, ByVal pEnvironment As String, ByVal pDriverName As String) As Long

Declare Function AddPrintProcessor Lib "winspool.drv" Alias "AddPrintProcessorA" (ByVal pName As String, ByVal pEnvironment As String, ByVal pPathName As String, ByVal pPrintProcessorName As String) As Long
Declare Function EnumPrintProcessors Lib "winspool.drv" Alias "EnumPrintProcessorsA" (ByVal pName As String, ByVal pEnvironment As String, ByVal Level As Long, pPrintProcessorInfo As Byte, ByVal cdBuf As Long, pcbNeeded As Long, pcReturned As Long) As Long
Declare Function GetPrintProcessorDirectory Lib "winspool.drv" Alias "GetPrintProcessorDirectoryA" (ByVal pName As String, ByVal pEnvironment As String, ByVal Level As Long, ByVal pPrintProcessorInfo As String, ByVal cdBuf As Long, pcbNeeded As Long) As Long
Declare Function EnumPrintProcessorDatatypes Lib "winspool.drv" Alias "EnumPrintProcessorDatatypesA" (ByVal pName As String, ByVal pPrintProcessorName As String, ByVal Level As Long, pDatatypes As Byte, ByVal cdBuf As Long, pcbNeeded As Long, pcReturned As Long) As Long
Declare Function DeletePrintProcessor Lib "winspool.drv" Alias "DeletePrintProcessorA" (ByVal pName As String, ByVal pEnvironment As String, ByVal pPrintProcessorName As String) As Long

Declare Function StartDocPrinter Lib "winspool.drv" Alias "StartDocPrinterA" (ByVal hPrinter As Long, ByVal Level As Long, pDocInfo As Byte) As Long
Declare Function StartPagePrinter Lib "winspool.drv" Alias "StartPagePrinter" (ByVal hPrinter As Long) As Long
Declare Function WritePrinter Lib "winspool.drv" Alias "WritePrinter" (ByVal hPrinter As Long, pBuf As Any, ByVal cdBuf As Long, pcWritten As Long) As Long
Declare Function EndPagePrinter Lib "winspool.drv" Alias "EndPagePrinter" (ByVal hPrinter As Long) As Long
Declare Function AbortPrinter Lib "winspool.drv" Alias "AbortPrinter" (ByVal hPrinter As Long) As Long
Declare Function ReadPrinter Lib "winspool.drv" Alias "ReadPrinter" (ByVal hPrinter As Long, pBuf As Any, ByVal cdBuf As Long, pNoBytesRead As Long) As Long
Declare Function EndDocPrinter Lib "winspool.drv" Alias "EndDocPrinter" (ByVal hPrinter As Long) As Long

Declare Function AddJob Lib "winspool.drv" Alias "AddJobA" (ByVal hPrinter As Long, ByVal Level As Long, pData As Byte, ByVal cdBuf As Long, pcbNeeded As Long) As Long
Declare Function ScheduleJob Lib "winspool.drv" Alias "ScheduleJob" (ByVal hPrinter As Long, ByVal JobId As Long) As Long
Declare Function PrinterProperties Lib "winspool.drv" Alias "PrinterProperties" (ByVal hwnd As Long, ByVal hPrinter As Long) As Long
Declare Function DocumentProperties Lib "winspool.drv" Alias "DocumentPropertiesA" (ByVal hwnd As Long, ByVal hPrinter As Long, ByVal pDeviceName As String, pDevModeOutput As DEVMODE, pDevModeInput As DEVMODE, ByVal fMode As Long) As Long
Declare Function AdvancedDocumentProperties Lib "winspool.drv" Alias "AdvancedDocumentPropertiesA" (ByVal hwnd As Long, ByVal hPrinter As Long, ByVal pDeviceName As String, pDevModeOutput As DEVMODE, pDevModeInput As DEVMODE) As Long

Declare Function GetPrinterData Lib "winspool.drv" Alias "GetPrinterDataA" (ByVal hPrinter As Long, ByVal pValueName As String, pType As Long, pData As Byte, ByVal nSize As Long, pcbNeeded As Long) As Long
Declare Function SetPrinterData Lib "winspool.drv" Alias "SetPrinterDataA" (ByVal hPrinter As Long, ByVal pValueName As String, ByVal dwType As Long, pData As Byte, ByVal cbData As Long) As Long
Declare Function WaitForPrinterChange Lib "winspool.drv" Alias "WaitForPrinterChange" (ByVal hPrinter As Long, ByVal flags As Long) As Long

public const int PRINTER_CHANGE_ADD_PRINTER =  H1
public const int PRINTER_CHANGE_SET_PRINTER =  H2
public const int PRINTER_CHANGE_DELETE_PRINTER =  H4
public const int PRINTER_CHANGE_PRINTER =  HFF
public const int PRINTER_CHANGE_ADD_JOB =  H100
public const int PRINTER_CHANGE_SET_JOB =  H200
public const int PRINTER_CHANGE_DELETE_JOB =  H400
public const int PRINTER_CHANGE_WRITE_JOB =  H800
public const int PRINTER_CHANGE_JOB =  HFF00
public const int PRINTER_CHANGE_ADD_FORM =  H10000
public const int PRINTER_CHANGE_SET_FORM =  H20000
public const int PRINTER_CHANGE_DELETE_FORM =  H40000
public const int PRINTER_CHANGE_FORM =  H70000
public const int PRINTER_CHANGE_ADD_PORT =  H100000
public const int PRINTER_CHANGE_CONFIGURE_PORT =  H200000
public const int PRINTER_CHANGE_DELETE_PORT =  H400000
public const int PRINTER_CHANGE_PORT =  H700000
public const int PRINTER_CHANGE_ADD_PRINT_PROCESSOR =  H1000000
public const int PRINTER_CHANGE_DELETE_PRINT_PROCESSOR =  H4000000
public const int PRINTER_CHANGE_PRINT_PROCESSOR =  H7000000
public const int PRINTER_CHANGE_ADD_PRINTER_DRIVER =  H10000000
public const int PRINTER_CHANGE_DELETE_PRINTER_DRIVER =  H40000000
public const int PRINTER_CHANGE_PRINTER_DRIVER =  H70000000
public const int PRINTER_CHANGE_TIMEOUT =  H80000000
public const int PRINTER_CHANGE_ALL =  H7777FFFF

Declare Function PrinterMessageBox Lib "winspool.drv" Alias "PrinterMessageBoxA" (ByVal hPrinter As Long, ByVal error As Long, ByVal hwnd As Long, ByVal pText As String, ByVal pCaption As String, ByVal dwType As Long) As Long

public const int PRINTER_ERROR_INFORMATION =  H80000000
public const int PRINTER_ERROR_WARNING =  H40000000
public const int PRINTER_ERROR_SEVERE =  H20000000

public const int PRINTER_ERROR_OUTOFPAPER =  H1
public const int PRINTER_ERROR_JAM =  H2
public const int PRINTER_ERROR_OUTOFTONER =  H4

Declare Function ClosePrinter Lib "winspool.drv" Alias "ClosePrinter" (ByVal hPrinter As Long) As Long
Declare Function AddForm Lib "winspool.drv" Alias "AddFormA" (ByVal hPrinter As Long, ByVal Level As Long, pForm As Byte) As Long
Declare Function DeleteForm Lib "winspool.drv" Alias "DeleteFormA" (ByVal hPrinter As Long, ByVal pFormName As String) As Long
Declare Function GetForm Lib "winspool.drv" Alias "GetFormA" (ByVal hPrinter As Long, ByVal pFormName As String, ByVal Level As Long, pForm As Byte, ByVal cbBuf As Long, pcbNeeded As Long) As Long
Declare Function SetForm Lib "winspool.drv" Alias "SetFormA" (ByVal hPrinter As Long, ByVal pFormName As String, ByVal Level As Long, pForm As Byte) As Long
Declare Function EnumForms Lib "winspool.drv" Alias "EnumFormsA" (ByVal hPrinter As Long, ByVal Level As Long, pForm As Byte, ByVal cbBuf As Long, pcbNeeded As Long, pcReturned As Long) As Long

Declare Function EnumMonitors Lib "winspool.drv" Alias "EnumMonitorsA" (ByVal pName As String, ByVal Level As Long, pMonitors As Byte, ByVal cbBuf As Long, pcbNeeded As Long, pcReturned As Long) As Long
Declare Function AddMonitor Lib "winspool.drv" Alias "AddMonitorA" (ByVal pName As String, ByVal Level As Long, pMonitors As Byte) As Long
Declare Function DeleteMonitor Lib "winspool.drv" Alias "DeleteMonitorA" (ByVal pName As String, ByVal pEnvironment As String, ByVal pMonitorName As String) As Long

Declare Function EnumPorts Lib "winspool.drv" Alias "EnumPortsA" (ByVal pName As String, ByVal Level As Long, ByVal lpbPorts As Long, ByVal cbBuf As Long, pcbNeeded As Long, pcReturned As Long) As Long
Declare Function AddPort Lib "winspool.drv" Alias "AddPortA" (ByVal pName As String, ByVal hwnd As Long, ByVal pMonitorName As String) As Long
Declare Function ConfigurePort Lib "winspool.drv" Alias "ConfigurePortA" (ByVal pName As String, ByVal hwnd As Long, ByVal pPortName As String) As Long
Declare Function DeletePort Lib "winspool.drv" Alias "DeletePortA" (ByVal pName As String, ByVal hwnd As Long, ByVal pPortName As String) As Long

Declare Function AddPrinterConnection Lib "winspool.drv" Alias "AddPrinterConnectionA" (ByVal pName As String) As Long

Declare Function DeletePrinterConnection Lib "winspool.drv" Alias "DeletePrinterConnectionA" (ByVal pName As String) As Long
Declare Function ConnectToPrinterDlg Lib "winspool.drv" Alias "ConnectToPrinterDlg" (ByVal hwnd As Long, ByVal flags As Long) As Long

Type PROVIDOR_INFO_1
        pName As String
        pEnvironment As String
        pDLLName As String
End Type

Declare Function AddPrintProvidor Lib "winspool.drv" Alias "AddPrintProvidorA" (ByVal pName As String, ByVal Level As Long, pProvidorInfo As Byte) As Long
Declare Function DeletePrintProvidor Lib "winspool.drv" Alias "DeletePrintProvidorA" (ByVal pName As String, ByVal pEnvironment As String, ByVal pPrintProvidorName As String) As Long

public const int SERVER_ACCESS_ADMINISTER =  H1
public const int SERVER_ACCESS_ENUMERATE =  H2

public const int PRINTER_ACCESS_ADMINISTER =  H4
public const int PRINTER_ACCESS_USE =  H8

public const int JOB_ACCESS_ADMINISTER =  H10

// Access rights for print servers

public const int SERVER_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED Or SERVER_ACCESS_ADMINISTER Or SERVER_ACCESS_ENUMERATE)
public const int SERVER_READ = (STANDARD_RIGHTS_READ Or SERVER_ACCESS_ENUMERATE)
public const int SERVER_WRITE = (STANDARD_RIGHTS_WRITE Or SERVER_ACCESS_ADMINISTER Or SERVER_ACCESS_ENUMERATE)
public const int SERVER_EXECUTE = (STANDARD_RIGHTS_EXECUTE Or SERVER_ACCESS_ENUMERATE)

// Access rights for printers
public const int PRINTER_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED Or PRINTER_ACCESS_ADMINISTER Or PRINTER_ACCESS_USE)
public const int PRINTER_READ = (STANDARD_RIGHTS_READ Or PRINTER_ACCESS_USE)
public const int PRINTER_WRITE = (STANDARD_RIGHTS_WRITE Or PRINTER_ACCESS_USE)
public const int PRINTER_EXECUTE = (STANDARD_RIGHTS_EXECUTE Or PRINTER_ACCESS_USE)

// Access rights for jobs
public const int JOB_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED Or JOB_ACCESS_ADMINISTER)
public const int JOB_READ = (STANDARD_RIGHTS_READ Or JOB_ACCESS_ADMINISTER)
public const int JOB_WRITE = (STANDARD_RIGHTS_WRITE Or JOB_ACCESS_ADMINISTER)
public const int JOB_EXECUTE = (STANDARD_RIGHTS_EXECUTE Or JOB_ACCESS_ADMINISTER)

//  Windows Network support

//  RESOURCE ENUMERATION

// Duplicates public const int RESOURCE_CONNECTED =  H1
public const int RESOURCE_PUBLICNET =  H2
// Duplicates public const int RESOURCE_REMEMBERED =  H3

// Duplicates public const int RESOURCETYPE_ANY =  H0
// Duplicates public const int RESOURCETYPE_DISK =  H1
// Duplicates public const int RESOURCETYPE_PRINT =  H2
// Duplicates public const int RESOURCETYPE_UNKNOWN =  HFFFF
// Duplicates public const int RESOURCEUSAGE_CONNECTABLE =  H1
// Duplicates public const int RESOURCEUSAGE_CONTAINER =  H2
// Duplicates public const int RESOURCEUSAGE_RESERVED =  H80000000
// Duplicates public const int RESOURCEDISPLAYTYPE_GENERIC =  H0
// Duplicates public const int RESOURCEDISPLAYTYPE_DOMAIN =  H1
// Duplicates public const int RESOURCEDISPLAYTYPE_SERVER =  H2
// Duplicates public const int RESOURCEDISPLAYTYPE_SHARE =  H3
// Duplicates public const int RESOURCEDISPLAYTYPE_FILE =  H4
// Duplicates public const int RESOURCEDISPLAYTYPE_GROUP =  H5

Type NETRESOURCE
        dwScope As Long
        dwType As Long
        dwDisplayType As Long
        dwUsage As Long
        lpLocalName As String
        lpRemoteName As String
        lpComment As String
        lpProvider As String
End Type

public const int CONNECT_UPDATE_PROFILE =  H1

Declare Function WNetAddConnection Lib "mpr.dll" Alias "WNetAddConnectionA" (ByVal lpszNetPath As String, ByVal lpszPassword As String, ByVal lpszLocalName As String) As Long
Declare Function WNetAddConnection2 Lib "mpr.dll" Alias "WNetAddConnection2A" (lpNetResource As NETRESOURCE, ByVal lpPassword As String, ByVal lpUserName As String, ByVal dwFlags As Long) As Long
Declare Function WNetCancelConnection Lib "mpr.dll" Alias "WNetCancelConnectionA" (ByVal lpszName As String, ByVal bForce As Long) As Long
Declare Function WNetCancelConnection2 Lib "mpr.dll" Alias "WNetCancelConnection2A" (ByVal lpName As String, ByVal dwFlags As Long, ByVal fForce As Long) As Long
Declare Function WNetGetConnection Lib "mpr.dll" Alias "WNetGetConnectionA" (ByVal lpszLocalName As String, ByVal lpszRemoteName As String, cbRemoteName As Long) As Long
// Declare Function WNetOpenEnum Lib "mpr.dll" Alias "WNetOpenEnumA" (ByVal dwScope As Long, ByVal dwType As Long, ByVal dwUsage As Long, lpNetResource As Any, lphEnum As Long) As Long
Declare Function WNetOpenEnum Lib "mpr.dll" Alias "WNetOpenEnumA" (ByVal dwScope As Long, ByVal dwType As Long, ByVal dwUsage As Long, lpNetResource As NETRESOURCE, lphEnum As Long) As Long
// Declare Function WNetEnumResource Lib "mpr.dll" Alias "WNetEnumResourceA" (ByVal hEnum As Long, lpcCount As Long, lpBuffer As Any, lpBufferSize As Long) As Long
Declare Function WNetEnumResource Lib "mpr.dll" Alias "WNetEnumResourceA" (ByVal hEnum As Long, lpcCount As Long, lpBuffer As NETRESOURCE, lpBufferSize As Long) As Long
Declare Function WNetCloseEnum Lib "mpr.dll" Alias "WNetCloseEnum" (ByVal hEnum As Long) As Long

Declare Function WNetGetUser Lib "mpr.dll" Alias "WNetGetUserA" (ByVal lpName As String, ByVal lpUserName As String, lpnLength As Long) As Long
Declare Function WNetConnectionDialog Lib "mpr.dll" Alias "WNetConnectionDialog" (ByVal hwnd As Long, ByVal dwType As Long) As Long
Declare Function WNetDisconnectDialog Lib "mpr.dll" Alias "WNetDisconnectDialog" (ByVal hwnd As Long, ByVal dwType As Long) As Long

Declare Function WNetGetLastError Lib "mpr.dll" Alias "WNetGetLastErrorA" (lpError As Long, ByVal lpErrorBuf As String, ByVal nErrorBufSize As Long, ByVal lpNameBuf As String, ByVal nNameBufSize As Long) As Long

// Status Codes

// This section is provided for backward compatibility.  Use of the ERROR_
// codes is preferred.  The WN_ error codes may not be available in future
// releases.

// General

public const int WN_SUCCESS = NO_ERROR
public const int WN_NOT_SUPPORTED = ERROR_NOT_SUPPORTED
public const int WN_NET_ERROR = ERROR_UNEXP_NET_ERR
public const int WN_MORE_DATA = ERROR_MORE_DATA
public const int WN_BAD_POINTER = ERROR_INVALID_ADDRESS
public const int WN_BAD_VALUE = ERROR_INVALID_PARAMETER
public const int WN_BAD_PASSWORD = ERROR_INVALID_PASSWORD
public const int WN_ACCESS_DENIED = ERROR_ACCESS_DENIED
public const int WN_FUNCTION_BUSY = ERROR_BUSY
public const int WN_WINDOWS_ERROR = ERROR_UNEXP_NET_ERR
public const int WN_BAD_USER = ERROR_BAD_USERNAME
public const int WN_OUT_OF_MEMORY = ERROR_NOT_ENOUGH_MEMORY
public const int WN_NO_NETWORK = ERROR_NO_NETWORK
public const int WN_EXTENDED_ERROR = ERROR_EXTENDED_ERROR

// Connection

public const int WN_NOT_CONNECTED = ERROR_NOT_CONNECTED
public const int WN_OPEN_FILES = ERROR_OPEN_FILES
public const int WN_DEVICE_IN_USE = ERROR_DEVICE_IN_USE
public const int WN_BAD_NETNAME = ERROR_BAD_NET_NAME
public const int WN_BAD_LOCALNAME = ERROR_BAD_DEVICE
public const int WN_ALREADY_CONNECTED = ERROR_ALREADY_ASSIGNED
public const int WN_DEVICE_ERROR = ERROR_GEN_FAILURE
public const int WN_CONNECTION_CLOSED = ERROR_CONNECTION_UNAVAIL
public const int WN_NO_NET_OR_BAD_PATH = ERROR_NO_NET_OR_BAD_PATH
public const int WN_BAD_PROVIDER = ERROR_BAD_PROVIDER
public const int WN_CANNOT_OPEN_PROFILE = ERROR_CANNOT_OPEN_PROFILE
public const int WN_BAD_PROFILE = ERROR_BAD_PROFILE

// Enumeration

public const int WN_BAD_HANDLE = ERROR_INVALID_HANDLE
public const int WN_NO_MORE_ENTRIES = ERROR_NO_MORE_ITEMS
public const int WN_NOT_CONTAINER = ERROR_NOT_CONTAINER

public const int WN_NO_ERROR = NO_ERROR

// This section contains the definitions
// for portable NetBIOS 3.0 support.

public const int NCBNAMSZ = 16  //  absolute length of a net name
public const int MAX_LANA = 254  //  lana//s in range 0 to MAX_LANA

Type NCB
        ncb_command As Integer
        ncb_retcode As Integer
        ncb_lsn As Integer
        ncb_num As Integer
        ncb_buffer As String
        ncb_length As Integer
        ncb_callname As String * NCBNAMSZ
        ncb_name As String * NCBNAMSZ
        ncb_rto As Integer
        ncb_sto As Integer
        ncb_post As Long
        ncb_lana_num As Integer
        ncb_cmd_cplt As Integer
        ncb_reserve(10) As Byte	// Reserved, must be 0
        ncb_event As Long
End Type

Type ADAPTER_STATUS
        adapter_address As String * 6
        rev_major As Integer
        reserved0 As Integer
        adapter_type As Integer
        rev_minor As Integer
        duration As Integer
        frmr_recv As Integer
        frmr_xmit As Integer
        iframe_recv_err As Integer
        xmit_aborts As Integer
        xmit_success As Long
        recv_success As Long
        iframe_xmit_err As Integer
        recv_buff_unavail As Integer
        t1_timeouts As Integer
        ti_timeouts As Integer
        Reserved1 As Long
        free_ncbs As Integer
        max_cfg_ncbs As Integer
        max_ncbs As Integer
        xmit_buf_unavail As Integer
        max_dgram_size As Integer
        pending_sess As Integer
        max_cfg_sess As Integer
        max_sess As Integer
        max_sess_pkt_size As Integer
        name_count As Integer
End Type

Type NAME_BUFFER
        name  As String * NCBNAMSZ
        name_num As Integer
        name_flags As Integer
End Type

// values for name_flags bits.

public const int NAME_FLAGS_MASK =  H87

public const int GROUP_NAME =  H80
public const int UNIQUE_NAME =  H0

public const int REGISTERING =  H0
public const int REGISTERED =  H4
public const int DEREGISTERED =  H5
public const int DUPLICATE =  H6
public const int DUPLICATE_DEREG =  H7
public const int ALL_TRANSPORTS = "M\0\0\0"
public const int MS_NBF = "MNBF"
// NCB Command codes
public const int NCBCALL =  H10  //  NCB CALL
public const int NCBLISTEN =  H11  //  NCB LISTEN
public const int NCBHANGUP =  H12  //  NCB HANG UP
public const int NCBSEND =  H14  //  NCB SEND
public const int NCBRECV =  H15  //  NCB RECEIVE
public const int NCBRECVANY =  H16  //  NCB RECEIVE ANY
public const int NCBCHAINSEND =  H17  //  NCB CHAIN SEND
public const int NCBDGSEND =  H20  //  NCB SEND DATAGRAM
public const int NCBDGRECV =  H21  //  NCB RECEIVE DATAGRAM
public const int NCBDGSENDBC =  H22  //  NCB SEND BROADCAST DATAGRAM
public const int NCBDGRECVBC =  H23  //  NCB RECEIVE BROADCAST DATAGRAM
public const int NCBADDNAME =  H30  //  NCB ADD NAME
public const int NCBDELNAME =  H31  //  NCB DELETE NAME
public const int NCBRESET =  H32  //  NCB RESET
public const int NCBASTAT =  H33  //  NCB ADAPTER STATUS
public const int NCBSSTAT =  H34  //  NCB SESSION STATUS
public const int NCBCANCEL =  H35  //  NCB CANCEL
public const int NCBADDGRNAME =  H36  //  NCB ADD GROUP NAME
public const int NCBENUM =  H37  //  NCB ENUMERATE LANA NUMBERS
public const int NCBUNLINK =  H70  //  NCB UNLINK
public const int NCBSENDNA =  H71  //  NCB SEND NO ACK
public const int NCBCHAINSENDNA =  H72  //  NCB CHAIN SEND NO ACK
public const int NCBLANSTALERT =  H73  //  NCB LAN STATUS ALERT
public const int NCBACTION =  H77  //  NCB ACTION
public const int NCBFINDNAME =  H78  //  NCB FIND NAME
public const int NCBTRACE =  H79  //  NCB TRACE

public const int ASYNCH =  H80  //  high bit set == asynchronous

// NCB Return codes
public const int NRC_GOODRET =  H0   //  good return
                                //  also returned when ASYNCH request accepted
public const int NRC_BUFLEN =  H1   //  illegal buffer length
public const int NRC_ILLCMD =  H3   //  illegal command
public const int NRC_CMDTMO =  H5   //  command timed out
public const int NRC_INCOMP =  H6   //  message incomplete, issue another command
public const int NRC_BADDR =  H7   //  illegal buffer address
public const int NRC_SNUMOUT =  H8   //  session number out of range
public const int NRC_NORES =  H9   //  no resource available
public const int NRC_SCLOSED =  HA   //  session closed
public const int NRC_CMDCAN =  HB   //  command cancelled
public const int NRC_DUPNAME =  HD   //  duplicate name
public const int NRC_NAMTFUL =  HE   //  name table full
public const int NRC_ACTSES =  HF   //  no deletions, name has active sessions
public const int NRC_LOCTFUL =  H11  //  local session table full
public const int NRC_REMTFUL =  H12  //  remote session table full
public const int NRC_ILLNN =  H13  //  illegal name number
public const int NRC_NOCALL =  H14  //  no callname
public const int NRC_NOWILD =  H15  //  cannot put  in NCB_NAME
public const int NRC_INUSE =  H16  //  name in use on remote adapter
public const int NRC_NAMERR =  H17  //  name deleted
public const int NRC_SABORT =  H18  //  session ended abnormally
public const int NRC_NAMCONF =  H19  //  name conflict detected
public const int NRC_IFBUSY =  H21  //  interface busy, IRET before retrying
public const int NRC_TOOMANY =  H22  //  too many commands outstanding, retry later
public const int NRC_BRIDGE =  H23  //  ncb_lana_num field invalid
public const int NRC_CANOCCR =  H24  //  command completed while cancel occurring
public const int NRC_CANCEL =  H26  //  command not valid to cancel
public const int NRC_DUPENV =  H30  //  name defined by anther local process
public const int NRC_ENVNOTDEF =  H34  //  environment undefined. RESET required
public const int NRC_OSRESNOTAV =  H35  //  required OS resources exhausted
public const int NRC_MAXAPPS =  H36  //  max number of applications exceeded
public const int NRC_NOSAPS =  H37  //  no saps available for netbios
public const int NRC_NORESOURCES =  H38  //  requested resources are not available
public const int NRC_INVADDRESS =  H39  //  invalid ncb address or length > segment
public const int NRC_INVDDID =  H3B  //  invalid NCB DDID
public const int NRC_LOCKFAIL =  H3C  //  lock of user area failed
public const int NRC_OPENERR =  H3F  //  NETBIOS not loaded
public const int NRC_SYSTEM =  H40  //  system error

public const int NRC_PENDING =  HFF  //  asynchronous command is not yet finished


public const int FILTER_TEMP_DUPLICATE_ACCOUNT =  H1 
public const int FILTER_NORMAL_ACCOUNT =  H2 
public const int FILTER_PROXY_ACCOUNT =  H4 
public const int FILTER_INTERDOMAIN_TRUST_ACCOUNT =  H8 
public const int FILTER_WORKSTATION_TRUST_ACCOUNT =  H10 
public const int FILTER_SERVER_TRUST_ACCOUNT =  H20 

public const int TIMEQ_FOREVER = -1              //((unsigned long) -1L)
public const int USER_MAXSTORAGE_UNLIMITED = -1  //((unsigned long) -1L)
public const int USER_NO_LOGOFF = -1             //((unsigned long) -1L)
public const int UNITS_PER_DAY = 24
public const int UNITS_PER_WEEK = UNITS_PER_DAY * 7

public const int USER_PRIV_MASK = 3
public const int USER_PRIV_GUEST = 0
public const int USER_PRIV_USER = 1
public const int USER_PRIV_ADMIN = 2

public const int UNLEN = 256         // Maximum username length
public const int GNLEN = UNLEN       // Maximum groupname length
public const int CNLEN = 15          // Maximum computer name length
public const int PWLEN = 256         // Maximum password length
public const int LM20_PWLEN = 14     // LM 2.0 Maximum password length
public const int MAXCOMMENTSZ = 256  // Multipurpose comment length
public const int LG_INCLUDE_INDIRECT =  H1 

public const int UF_SCRIPT =  H1
public const int UF_ACCOUNTDISABLE =  H2
public const int UF_HOMEDIR_REQUIRED =  H8
public const int UF_LOCKOUT =  H10
public const int UF_PASSWD_NOTREQD =  H20
public const int UF_PASSWD_CANT_CHANGE =  H40

// Duplicates public const int LG_INCLUDE_INDIRECT =  H1 

public const int NERR_Success = 0 
public const int NERR_BASE = 2100
public const int NERR_InvalidComputer = (NERR_BASE + 251)
public const int NERR_NotPrimary = (NERR_BASE + 126)
public const int NERR_GroupExists = (NERR_BASE + 123)
public const int NERR_UserExists = (NERR_BASE + 124)
public const int NERR_PasswordTooShort = (NERR_BASE + 145)

public const int RESOURCE_CONNECTED =  H1 
public const int RESOURCE_GLOBALNET =  H2 
public const int RESOURCE_REMEMBERED =  H3 
public const int RESOURCE_ENUM_ALL =  HFFFF
public const int RESOURCEDISPLAYTYPE_DOMAIN =  H1 
public const int RESOURCEDISPLAYTYPE_FILE =  H4 
public const int RESOURCEDISPLAYTYPE_GENERIC =  H0 
public const int RESOURCEDISPLAYTYPE_GROUP =  H5 
public const int RESOURCEDISPLAYTYPE_SERVER =  H2 
public const int RESOURCEDISPLAYTYPE_SHARE =  H3 
public const int RESOURCETYPE_ANY =  H0 
public const int RESOURCETYPE_DISK =  H1 
public const int RESOURCETYPE_PRINT =  H2 
public const int RESOURCETYPE_UNKNOWN =  HFFFF 
public const int RESOURCEUSAGE_ALL =  H0 
public const int RESOURCEUSAGE_CONNECTABLE =  H1 
public const int RESOURCEUSAGE_CONTAINER =  H2 
public const int RESOURCEUSAGE_RESERVED =  H80000000

// Legal values for expression in except().
public const int EXCEPTION_EXECUTE_HANDLER = 1
public const int EXCEPTION_CONTINUE_SEARCH = 0
public const int EXCEPTION_CONTINUE_EXECUTION = -1

// UI dialog public const intants and types

// ----public const intants--------------------------------------------------------------
public const int ctlFirst =  H400
public const int ctlLast =  H4FF
    //  Push buttons
public const int psh1 =  H400
public const int psh2 =  H401
public const int psh3 =  H402
public const int psh4 =  H403
public const int psh5 =  H404
public const int psh6 =  H405
public const int psh7 =  H406
public const int psh8 =  H407
public const int psh9 =  H408
public const int psh10 =  H409
public const int psh11 =  H40A
public const int psh12 =  H40B
public const int psh13 =  H40C
public const int psh14 =  H40D
public const int psh15 =  H40E
public const int pshHelp = psh15
public const int psh16 =  H40F
    //  Checkboxes
public const int chx1 =  H410
public const int chx2 =  H411
public const int chx3 =  H412
public const int chx4 =  H413
public const int chx5 =  H414
public const int chx6 =  H415
public const int chx7 =  H416
public const int chx8 =  H417
public const int chx9 =  H418
public const int chx10 =  H419
public const int chx11 =  H41A
public const int chx12 =  H41B
public const int chx13 =  H41C
public const int chx14 =  H41D
public const int chx15 =  H41E
public const int chx16 =  H41D
    //  Radio buttons
public const int rad1 =  H420
public const int rad2 =  H421
public const int rad3 =  H422
public const int rad4 =  H423
public const int rad5 =  H424
public const int rad6 =  H425
public const int rad7 =  H426
public const int rad8 =  H427
public const int rad9 =  H428
public const int rad10 =  H429
public const int rad11 =  H42A
public const int rad12 =  H42B
public const int rad13 =  H42C
public const int rad14 =  H42D
public const int rad15 =  H42E
public const int rad16 =  H42F
    //  Groups, frames, rectangles, and icons
public const int grp1 =  H430
public const int grp2 =  H431
public const int grp3 =  H432
public const int grp4 =  H433
public const int frm1 =  H434
public const int frm2 =  H435
public const int frm3 =  H436
public const int frm4 =  H437
public const int rct1 =  H438
public const int rct2 =  H439
public const int rct3 =  H43A
public const int rct4 =  H43B
public const int ico1 =  H43C
public const int ico2 =  H43D
public const int ico3 =  H43E
public const int ico4 =  H43F
    //  Static text
public const int stc1 =  H440
public const int stc2 =  H441
public const int stc3 =  H442
public const int stc4 =  H443
public const int stc5 =  H444
public const int stc6 =  H445
public const int stc7 =  H446
public const int stc8 =  H447
public const int stc9 =  H448
public const int stc10 =  H449
public const int stc11 =  H44A
public const int stc12 =  H44B
public const int stc13 =  H44C
public const int stc14 =  H44D
public const int stc15 =  H44E
public const int stc16 =  H44F
public const int stc17 =  H450
public const int stc18 =  H451
public const int stc19 =  H452
public const int stc20 =  H453
public const int stc21 =  H454
public const int stc22 =  H455
public const int stc23 =  H456
public const int stc24 =  H457
public const int stc25 =  H458
public const int stc26 =  H459
public const int stc27 =  H45A
public const int stc28 =  H45B
public const int stc29 =  H45C
public const int stc30 =  H45D
public const int stc31 =  H45E
public const int stc32 =  H45F
    //  Listboxes
public const int lst1 =  H460
public const int lst2 =  H461
public const int lst3 =  H462
public const int lst4 =  H463
public const int lst5 =  H464
public const int lst6 =  H465
public const int lst7 =  H466
public const int lst8 =  H467
public const int lst9 =  H468
public const int lst10 =  H469
public const int lst11 =  H46A
public const int lst12 =  H46B
public const int lst13 =  H46C
public const int lst14 =  H46D
public const int lst15 =  H46E
public const int lst16 =  H46F
    //  Combo boxes
public const int cmb1 =  H470
public const int cmb2 =  H471
public const int cmb3 =  H472
public const int cmb4 =  H473
public const int cmb5 =  H474
public const int cmb6 =  H475
public const int cmb7 =  H476
public const int cmb8 =  H477
public const int cmb9 =  H478
public const int cmb10 =  H479
public const int cmb11 =  H47A
public const int cmb12 =  H47B
public const int cmb13 =  H47C
public const int cmb14 =  H47D
public const int cmb15 =  H47E
public const int cmb16 =  H47F
    //  Edit controls
public const int edt1 =  H480
public const int edt2 =  H481
public const int edt3 =  H482
public const int edt4 =  H483
public const int edt5 =  H484
public const int edt6 =  H485
public const int edt7 =  H486
public const int edt8 =  H487
public const int edt9 =  H488
public const int edt10 =  H489
public const int edt11 =  H48A
public const int edt12 =  H48B
public const int edt13 =  H48C
public const int edt14 =  H48D
public const int edt15 =  H48E
public const int edt16 =  H48F
    //  Scroll bars
public const int scr1 =  H490
public const int scr2 =  H491
public const int scr3 =  H492
public const int scr4 =  H493
public const int scr5 =  H494
public const int scr6 =  H495
public const int scr7 =  H496
public const int scr8 =  H497

public const int FILEOPENORD = 1536
public const int MULTIFILEOPENORD = 1537
public const int PRINTDLGORD = 1538
public const int PRNSETUPDLGORD = 1539
public const int FINDDLGORD = 1540
public const int REPLACEDLGORD = 1541
public const int FONTDLGORD = 1542
public const int FORMATDLGORD31 = 1543
public const int FORMATDLGORD30 = 1544

Type CRGB
        bRed As Byte
        bGreen As Byte
        bBlue As Byte
        bExtra As Byte
End Type

// -----------------
// ADVAPI32
// -----------------

// function prototypes, public const intants, and type definitions
// for Windows 32-bit Registry API

public const int HKEY_CLASSES_ROOT =  H80000000
public const int HKEY_CURRENT_USER =  H80000001
public const int HKEY_LOCAL_MACHINE =  H80000002
public const int HKEY_USERS =  H80000003
public const int HKEY_PERFORMANCE_DATA =  H80000004
public const int HKEY_CURRENT_CONFIG =  H80000005
public const int HKEY_DYN_DATA =  H80000006

// Registry API prototypes

Declare Function RegCloseKey Lib "advapi32.dll" Alias "RegCloseKey" (ByVal hKey As Long) As Long
Declare Function RegConnectRegistry Lib "advapi32.dll" Alias "RegConnectRegistryA" (ByVal lpMachineName As String, ByVal hKey As Long, phkResult As Long) As Long
Declare Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hKey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As SECURITY_ATTRIBUTES, phkResult As Long, lpdwDisposition As Long) As Long
Declare Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hKey As Long, ByVal lpSubKey As String) As Long
Declare Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hKey As Long, ByVal lpValueName As String) As Long
Declare Function RegEnumKey Lib "advapi32.dll" Alias "RegEnumKeyA" (ByVal hKey As Long, ByVal dwIndex As Long, ByVal lpName As String, ByVal cbName As Long) As Long
Declare Function RegEnumKeyEx Lib "advapi32.dll" Alias "RegEnumKeyExA" (ByVal hKey As Long, ByVal dwIndex As Long, ByVal lpName As String, lpcbName As Long, ByVal lpReserved As Long, ByVal lpClass As String, lpcbClass As Long, lpftLastWriteTime As FILETIME) As Long
Declare Function RegEnumValue Lib "advapi32.dll" Alias "RegEnumValueA" (ByVal hKey As Long, ByVal dwIndex As Long, ByVal lpValueName As String, lpcbValueName As Long, ByVal lpReserved As Long, lpType As Long, lpData As Byte, lpcbData As Long) As Long
Declare Function RegFlushKey Lib "advapi32.dll" Alias "RegFlushKey" (ByVal hKey As Long) As Long
Declare Function RegGetKeySecurity Lib "advapi32.dll" Alias "RegGetKeySecurity" (ByVal hKey As Long, ByVal SecurityInformation As Long, pSecurityDescriptor As SECURITY_DESCRIPTOR, lpcbSecurityDescriptor As Long) As Long
Declare Function RegLoadKey Lib "advapi32.dll" Alias "RegLoadKeyA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal lpFile As String) As Long
Declare Function RegNotifyChangeKeyValue Lib "advapi32.dll" Alias "RegNotifyChangeKeyValue" (ByVal hKey As Long, ByVal bWatchSubtree As Long, ByVal dwNotifyFilter As Long, ByVal hEvent As Long, ByVal fAsynchronus As Long) As Long
Declare Function RegOpenKey Lib "advapi32.dll" Alias "RegOpenKeyA" (ByVal hKey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
Declare Function RegQueryInfoKey Lib "advapi32.dll" Alias "RegQueryInfoKeyA" (ByVal hKey As Long, ByVal lpClass As String, lpcbClass As Long, ByVal lpReserved As Long, lpcSubKeys As Long, lpcbMaxSubKeyLen As Long, lpcbMaxClassLen As Long, lpcValues As Long, lpcbMaxValueNameLen As Long, lpcbMaxValueLen As Long, lpcbSecurityDescriptor As Long, lpftLastWriteTime As FILETIME) As Long
Declare Function RegQueryValue Lib "advapi32.dll" Alias "RegQueryValueA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal lpValue As String, lpcbValue As Long) As Long
Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long)         // Note that if you declare the lpData parameter as String, you must pass it By Value. 
Declare Function RegReplaceKey Lib "advapi32.dll" Alias "RegReplaceKeyA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal lpNewFile As String, ByVal lpOldFile As String) As Long
Declare Function RegRestoreKey Lib "advapi32.dll" Alias "RegRestoreKeyA" (ByVal hKey As Long, ByVal lpFile As String, ByVal dwFlags As Long) As Long
Declare Function RegSaveKey Lib "advapi32.dll" Alias "RegSaveKeyA" (ByVal hKey As Long, ByVal lpFile As String, lpSecurityAttributes As SECURITY_ATTRIBUTES) As Long
Declare Function RegSetKeySecurity Lib "advapi32.dll" Alias "RegSetKeySecurity" (ByVal hKey As Long, ByVal SecurityInformation As Long, pSecurityDescriptor As SECURITY_DESCRIPTOR) As Long
Declare Function RegSetValue Lib "advapi32.dll" Alias "RegSetValueA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal dwType As Long, ByVal lpData As String, ByVal cbData As Long) As Long
Declare Function RegSetValueEx Lib "advapi32.dll" Alias "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, lpData As Any, ByVal cbData As Long)         // Note that if you declare the lpData parameter as String, you must pass it By Value.
Declare Function RegUnLoadKey Lib "advapi32.dll" Alias "RegUnLoadKeyA" (ByVal hKey As Long, ByVal lpSubKey As String) As Long
Declare Function InitiateSystemShutdown Lib "advapi32.dll" Alias "InitiateSystemShutdownA" (ByVal lpMachineName As String, ByVal lpMessage As String, ByVal dwTimeout As Long, ByVal bForceAppsClosed As Long, ByVal bRebootAfterShutdown As Long) As Long
Declare Function AbortSystemShutdown Lib "advapi32.dll" Alias "AbortSystemShutdownA" (ByVal lpMachineName As String) As Long

// Service database names
public const int SERVICES_ACTIVE_DATABASE = "ServicesActive"
public const int SERVICES_FAILED_DATABASE = "ServicesFailed"

// Value to indicate no change to an optional parameter
public const int SERVICE_NO_CHANGE =  HFFFF

// Service State -- for Enum Requests (Bit Mask)
public const int SERVICE_ACTIVE =  H1
public const int SERVICE_INACTIVE =  H2
public const int SERVICE_STATE_ALL = (SERVICE_ACTIVE Or SERVICE_INACTIVE)

// Controls
public const int SERVICE_CONTROL_STOP =  H1
public const int SERVICE_CONTROL_PAUSE =  H2
public const int SERVICE_CONTROL_CONTINUE =  H3
public const int SERVICE_CONTROL_INTERROGATE =  H4
public const int SERVICE_CONTROL_SHUTDOWN =  H5

// Service State -- for CurrentState
public const int SERVICE_STOPPED =  H1
public const int SERVICE_START_PENDING =  H2
public const int SERVICE_STOP_PENDING =  H3
public const int SERVICE_RUNNING =  H4
public const int SERVICE_CONTINUE_PENDING =  H5
public const int SERVICE_PAUSE_PENDING =  H6
public const int SERVICE_PAUSED =  H7

// Controls Accepted  (Bit Mask)
public const int SERVICE_ACCEPT_STOP =  H1
public const int SERVICE_ACCEPT_PAUSE_CONTINUE =  H2
public const int SERVICE_ACCEPT_SHUTDOWN =  H4

// Service Control Manager object specific access types
public const int SC_MANAGER_CONNECT =  H1
public const int SC_MANAGER_CREATE_SERVICE =  H2
public const int SC_MANAGER_ENUMERATE_SERVICE =  H4
public const int SC_MANAGER_LOCK =  H8
public const int SC_MANAGER_QUERY_LOCK_STATUS =  H10
public const int SC_MANAGER_MODIFY_BOOT_CONFIG =  H20

public const int SC_MANAGER_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED Or SC_MANAGER_CONNECT Or SC_MANAGER_CREATE_SERVICE Or SC_MANAGER_ENUMERATE_SERVICE Or SC_MANAGER_LOCK Or SC_MANAGER_QUERY_LOCK_STATUS Or SC_MANAGER_MODIFY_BOOT_CONFIG)

// Service object specific access type
public const int SERVICE_QUERY_CONFIG =  H1
public const int SERVICE_CHANGE_CONFIG =  H2
public const int SERVICE_QUERY_STATUS =  H4
public const int SERVICE_ENUMERATE_DEPENDENTS =  H8
public const int SERVICE_START =  H10
public const int SERVICE_STOP =  H20
public const int SERVICE_PAUSE_CONTINUE =  H40
public const int SERVICE_INTERROGATE =  H80
public const int SERVICE_USER_DEFINED_CONTROL =  H100

public const int SERVICE_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED Or SERVICE_QUERY_CONFIG Or SERVICE_CHANGE_CONFIG Or SERVICE_QUERY_STATUS Or SERVICE_ENUMERATE_DEPENDENTS Or SERVICE_START Or SERVICE_STOP Or SERVICE_PAUSE_CONTINUE Or SERVICE_INTERROGATE Or SERVICE
_USER_DEFINED_CONTROL)


Type SERVICE_STATUS
        dwServiceType As Long
        dwCurrentState As Long
        dwControlsAccepted As Long
        dwWin32ExitCode As Long
        dwServiceSpecificExitCode As Long
        dwCheckPoint As Long
        dwWaitHint As Long
End Type

Type ENUM_SERVICE_STATUS
        lpServiceName As String
        lpDisplayName As String
        ServiceStatus As SERVICE_STATUS
End Type

Type QUERY_SERVICE_LOCK_STATUS
        fIsLocked As Long
        lpLockOwner As String
        dwLockDuration As Long
End Type

Type QUERY_SERVICE_CONFIG
        dwServiceType As Long
        dwStartType As Long
        dwErrorControl As Long
        lpBinaryPathName As String
        lpLoadOrderGroup As String
        dwTagId As Long
        lpDependencies As String
        lpServiceStartName As String
        lpDisplayName As String
End Type

Type SERVICE_TABLE_ENTRY
        lpServiceName As String
        lpServiceProc As Long
End Type


// ++ BUILD Version: 0010    //  Increment this if a change has global effects
// Copyright (c) 1995  Microsoft Corporation
// Module Name:
//     winsvc.h
// Abstract:
//     Header file for the Service Control Manager
// Environment:
//     User Mode - Win32
// --*/
//
//  public const intants

//  Character to designate that a name is a group
//
public const int SC_GROUP_IDENTIFIER = "+"

//  Prototype for the Service Control Handler Function

// /////////////////////////////////////////////////////////////////////////
//  API Function Prototypes
// /////////////////////////////////////////////////////////////////////////

Declare Function ChangeServiceConfig Lib "advapi32.dll" Alias "ChangeServiceConfigA" (ByVal hService As Long, ByVal dwServiceType As Long, ByVal dwStartType As Long, ByVal dwErrorControl As Long, ByVal lpBinaryPathName As String, ByVal lpLoadOrderGroup As String, lpdwTagId As Long, ByVal lpDependencies As String, ByVal lpServiceStartName As String, ByVal lpPassword As String, ByVal lpDisplayName As String) As Long
Declare Function CloseServiceHandle Lib "advapi32.dll" Alias "CloseServiceHandle" (ByVal hSCObject As Long) As Long
Declare Function ControlService Lib "advapi32.dll" Alias "ControlService" (ByVal hService As Long, ByVal dwControl As Long, lpServiceStatus As SERVICE_STATUS) As Long
Declare Function CreateService Lib "advapi32.dll" Alias "CreateServiceA" (ByVal hSCManager As Long, ByVal lpServiceName As String, ByVal lpDisplayName As String, ByVal dwDesiredAccess As Long, ByVal dwServiceType As Long, ByVal dwStartType As Long, ByVal dwErrorControl As Long, ByVal lpBinaryPathName As String, ByVal lpLoadOrderGroup As String, lpdwTagId As Long, ByVal lpDependencies As String, ByVal lp As String, ByVal lpPassword As String) As Long
Declare Function DeleteService Lib "advapi32.dll" Alias "DeleteService" (ByVal hService As Long) As Long
Declare Function EnumDependentServices Lib "advapi32.dll" Alias "EnumDependentServicesA" (ByVal hService As Long, ByVal dwServiceState As Long, lpServices As ENUM_SERVICE_STATUS, ByVal cbBufSize As Long, pcbBytesNeeded As Long, lpServicesReturned As Long) As Long
Declare Function EnumServicesStatus Lib "advapi32.dll" Alias "EnumServicesStatusA" (ByVal hSCManager As Long, ByVal dwServiceType As Long, ByVal dwServiceState As Long, lpServices As ENUM_SERVICE_STATUS, ByVal cbBufSize As Long, pcbBytesNeeded As Long, lpServicesReturned As Long, lpResumeHandle As Long) As Long
Declare Function GetServiceKeyName Lib "advapi32.dll" Alias "GetServiceKeyNameA" (ByVal hSCManager As Long, ByVal lpDisplayName As String, ByVal lpServiceName As String, lpcchBuffer As Long) As Long
Declare Function GetServiceDisplayName Lib "advapi32.dll" Alias "GetServiceDisplayNameA" (ByVal hSCManager As Long, ByVal lpServiceName As String, ByVal lpDisplayName As String, lpcchBuffer As Long) As Long
Declare Function LockServiceDatabase Lib "advapi32.dll" Alias "LockServiceDatabase" (ByVal hSCManager As Long) As Long
Declare Function NotifyBootConfigStatus Lib "advapi32.dll" Alias "NotifyBootConfigStatus" (ByVal BootAcceptable As Long) As Long
Declare Function OpenSCManager Lib "advapi32.dll" Alias "OpenSCManagerA" (ByVal lpMachineName As String, ByVal lpDatabaseName As String, ByVal dwDesiredAccess As Long) As Long
Declare Function OpenService Lib "advapi32.dll" Alias "OpenServiceA" (ByVal hSCManager As Long, ByVal lpServiceName As String, ByVal dwDesiredAccess As Long) As Long
Declare Function QueryServiceConfig Lib "advapi32.dll" Alias "QueryServiceConfigA" (ByVal hService As Long, lpServiceConfig As QUERY_SERVICE_CONFIG, ByVal cbBufSize As Long, pcbBytesNeeded As Long) As Long
Declare Function QueryServiceLockStatus Lib "advapi32.dll" Alias "QueryServiceLockStatusA" (ByVal hSCManager As Long, lpLockStatus As QUERY_SERVICE_LOCK_STATUS, ByVal cbBufSize As Long, pcbBytesNeeded As Long) As Long
Declare Function QueryServiceObjectSecurity Lib "advapi32.dll" Alias "QueryServiceObjectSecurity" (ByVal hService As Long, ByVal dwSecurityInformation As Long, lpSecurityDescriptor As Any, ByVal cbBufSize As Long, pcbBytesNeeded As Long) As Long
Declare Function QueryServiceStatus Lib "advapi32.dll" Alias "QueryServiceStatus" (ByVal hService As Long, lpServiceStatus As SERVICE_STATUS) As Long
Declare Function RegisterServiceCtrlHandler Lib "advapi32.dll" Alias "RegisterServiceCtrlHandlerA" (ByVal lpServiceName As String, ByVal lpHandlerProc As Long) As Long
Declare Function SetServiceObjectSecurity Lib "advapi32.dll" Alias "SetServiceObjectSecurity" (ByVal hService As Long, ByVal dwSecurityInformation As Long, lpSecurityDescriptor As Any) As Long
Declare Function SetServiceStatus Lib "advapi32.dll" Alias "SetServiceStatus" (ByVal hServiceStatus As Long, lpServiceStatus As SERVICE_STATUS) As Long
Declare Function StartServiceCtrlDispatcher Lib "advapi32.dll" Alias "StartServiceCtrlDispatcherA" (lpServiceStartTable As SERVICE_TABLE_ENTRY) As Long
Declare Function StartService Lib "advapi32.dll" Alias "StartServiceA" (ByVal hService As Long, ByVal dwNumServiceArgs As Long, ByVal lpServiceArgVectors As Long) As Long
Declare Function UnlockServiceDatabase Lib "advapi32.dll" Alias "UnlockServiceDatabase" (ScLock As Any) As Long

Type LARGE_INTEGER
    lowpart As Long
    highpart As Long
End Type
    

// Section for Performance Monitor data

public const int PERF_DATA_VERSION = 1
public const int PERF_DATA_REVISION = 1

Type PERF_DATA_BLOCK
        Signature As String * 4
        LittleEndian As Long
        Version As Long
        Revision As Long
        TotalByteLength As Long
        HeaderLength As Long
        NumObjectTypes As Long
        DefaultObject As Long
        SystemTime As SYSTEMTIME
        PerfTime As LARGE_INTEGER
        PerfFreq As LARGE_INTEGER
        PerTime100nSec As LARGE_INTEGER
        SystemNameLength As Long
        SystemNameOffset As Long
End Type

Type PERF_OBJECT_TYPE
        TotalByteLength As Long
        DefinitionLength As Long
        HeaderLength As Long
        ObjectNameTitleIndex As Long
        ObjectNameTitle As String
        ObjectHelpTitleIndex As Long
        ObjectHelpTitle As String
        DetailLevel As Long
        NumCounters As Long
        DefaultCounter As Long
        NumInstances As Long
        CodePage As Long
        PerfTime As LARGE_INTEGER
        PerfFreq As LARGE_INTEGER
End Type

public const int PERF_NO_INSTANCES = -1  //  no instances

// The counter type is the "or" of the following values as described below
//
// select one of the following to indicate the counter//s data size
public const int PERF_SIZE_DWORD =  H0
public const int PERF_SIZE_LARGE =  H100
public const int PERF_SIZE_ZERO =  H200       //  for Zero Length fields
public const int PERF_SIZE_VARIABLE_LEN =  H300       //  length is in CounterLength field of Counter Definition struct

// select one of the following values to indicate the counter field usage
public const int PERF_TYPE_NUMBER =  H0         //  a number (not a counter)
public const int PERF_TYPE_COUNTER =  H400       //  an increasing numeric value
public const int PERF_TYPE_TEXT =  H800       //  a text field
public const int PERF_TYPE_ZERO =  HC00       //  displays a zero

// If the PERF_TYPE_NUMBER field was selected, then select one of the
// following to describe the Number
public const int PERF_NUMBER_HEX =  H0         //  display as HEX value
public const int PERF_NUMBER_DECIMAL =  H10000     //  display as a decimal integer
public const int PERF_NUMBER_DEC_1000 =  H20000     //  display as a decimal/1000
//
// If the PERF_TYPE_COUNTER value was selected then select one of the
// following to indicate the type of counter
public const int PERF_COUNTER_VALUE =  H0         //  display counter value
public const int PERF_COUNTER_RATE =  H10000     //  divide ctr / delta time
public const int PERF_COUNTER_FRACTION =  H20000     //  divide ctr / base
public const int PERF_COUNTER_BASE =  H30000     //  base value used in fractions
public const int PERF_COUNTER_ELAPSED =  H40000     //  subtract counter from current time
public const int PERF_COUNTER_QUEUELEN =  H50000     //  Use Queuelen processing func.
public const int PERF_COUNTER_HISTOGRAM =  H60000     //  Counter begins or ends a histogram

// If the PERF_TYPE_TEXT value was selected, then select one of the
// following to indicate the type of TEXT data.
public const int PERF_TEXT_UNICODE =  H0         //  type of text in text field
public const int PERF_TEXT_ASCII =  H10000     //  ASCII using the CodePage field

// Timer SubTypes
public const int PERF_TIMER_TICK =  H0         //  use system perf. freq for base
public const int PERF_TIMER_100NS =  H100000    //  use 100 NS timer time base units
public const int PERF_OBJECT_TIMER =  H200000    //  use the object timer freq

// Any types that have calculations performed can use one or more of
// the following calculation modification flags listed here
public const int PERF_DELTA_COUNTER =  H400000    //  compute difference first
public const int PERF_DELTA_BASE =  H800000    //  compute base diff as well
public const int PERF_INVERSE_COUNTER =  H1000000   //  show as 1.00-value (assumes:
public const int PERF_MULTI_COUNTER =  H2000000   //  sum of multiple instances

// Select one of the following values to indicate the display suffix (if any)
public const int PERF_DISPLAY_NO_SUFFIX =  H0         //  no suffix
public const int PERF_DISPLAY_PER_SEC =  H10000000  //  "/sec"
public const int PERF_DISPLAY_PERCENT =  H20000000  //  "%"
public const int PERF_DISPLAY_SECONDS =  H30000000  //  "secs"
public const int PERF_DISPLAY_NOSHOW =  H40000000  //  value is not displayed

// Predefined counter types

// 32-bit Counter.  Divide delta by delta time.  Display suffix: "/sec"
public const int PERF_COUNTER_COUNTER = (PERF_SIZE_DWORD Or PERF_TYPE_COUNTER Or PERF_COUNTER_RATE Or PERF_TIMER_TICK Or PERF_DELTA_COUNTER Or PERF_DISPLAY_PER_SEC)

// 64-bit Timer.  Divide delta by delta time.  Display suffix: "%"
public const int PERF_COUNTER_TIMER = (PERF_SIZE_LARGE Or PERF_TYPE_COUNTER Or PERF_COUNTER_RATE Or PERF_TIMER_TICK Or PERF_DELTA_COUNTER Or PERF_DISPLAY_PERCENT)

// Queue Length Space-Time Product. Divide delta by delta time. No Display Suffix.
public const int PERF_COUNTER_QUEUELEN_TYPE = (PERF_SIZE_DWORD Or PERF_TYPE_COUNTER Or PERF_COUNTER_QUEUELEN Or PERF_TIMER_TICK Or PERF_DELTA_COUNTER Or PERF_DISPLAY_NO_SUFFIX)

// 64-bit Counter.  Divide delta by delta time. Display Suffix: "/sec"
public const int PERF_COUNTER_BULK_COUNT = (PERF_SIZE_LARGE Or PERF_TYPE_COUNTER Or PERF_COUNTER_RATE Or PERF_TIMER_TICK Or PERF_DELTA_COUNTER Or PERF_DISPLAY_PER_SEC)

// Indicates the counter is not a  counter but rather Unicode text Display as text.
public const int PERF_COUNTER_TEXT = (PERF_SIZE_VARIABLE_LEN Or PERF_TYPE_TEXT Or PERF_TEXT_UNICODE Or PERF_DISPLAY_NO_SUFFIX)

// Indicates the data is a counter  which should not be
// time averaged on display (such as an error counter on a serial line)
// Display as is.  No Display Suffix.
public const int PERF_COUNTER_RAWCOUNT = (PERF_SIZE_DWORD Or PERF_TYPE_NUMBER Or PERF_NUMBER_DECIMAL Or PERF_DISPLAY_NO_SUFFIX)

// A count which is either 1 or 0 on each sampling interrupt (% busy)
// Divide delta by delta base. Display Suffix: "%"
public const int PERF_SAMPLE_FRACTION = (PERF_SIZE_DWORD Or PERF_TYPE_COUNTER Or PERF_COUNTER_FRACTION Or PERF_DELTA_COUNTER Or PERF_DELTA_BASE Or PERF_DISPLAY_PERCENT)

// A count which is sampled on each sampling interrupt (queue length)
// Divide delta by delta time. No Display Suffix.
public const int PERF_SAMPLE_COUNTER = (PERF_SIZE_DWORD Or PERF_TYPE_COUNTER Or PERF_COUNTER_RATE Or PERF_TIMER_TICK Or PERF_DELTA_COUNTER Or PERF_DISPLAY_NO_SUFFIX)

// A label: no data is associated with this counter (it has 0 length)
// Do not display.
public const int PERF_COUNTER_NODATA = (PERF_SIZE_ZERO Or PERF_DISPLAY_NOSHOW)

// 64-bit Timer inverse (e.g., idle is measured, but display busy  As Integer)
// Display 100 - delta divided by delta time.  Display suffix: "%"
public const int PERF_COUNTER_TIMER_INV = (PERF_SIZE_LARGE Or PERF_TYPE_COUNTER Or PERF_COUNTER_RATE Or PERF_TIMER_TICK Or PERF_DELTA_COUNTER Or PERF_INVERSE_COUNTER Or PERF_DISPLAY_PERCENT)

// The divisor for a sample, used with the previous counter to form a
// sampled %.  You must check for >0 before dividing by this!  This
// counter will directly follow the  numerator counter.  It should not
// be displayed to the user.
public const int PERF_SAMPLE_BASE = (PERF_SIZE_DWORD Or PERF_TYPE_COUNTER Or PERF_COUNTER_BASE Or PERF_DISPLAY_NOSHOW Or  H1)         //  for compatibility with pre-beta versions

// A timer which, when divided by an average base, produces a time
// in seconds which is the average time of some operation.  This
// timer times total operations, and  the base is the number of opera-
// tions.  Display Suffix: "sec"
public const int PERF_AVERAGE_TIMER = (PERF_SIZE_DWORD Or PERF_TYPE_COUNTER Or PERF_COUNTER_FRACTION Or PERF_DISPLAY_SECONDS)

// Used as the denominator in the computation of time or count
// averages.  Must directly follow the numerator counter.  Not dis-
// played to the user.
public const int PERF_AVERAGE_BASE = (PERF_SIZE_DWORD Or PERF_TYPE_COUNTER Or PERF_COUNTER_BASE Or PERF_DISPLAY_NOSHOW Or  H2)         //  for compatibility with pre-beta versions

// A bulk count which, when divided (typically) by the number of
// operations, gives (typically) the number of bytes per operation.
// No Display Suffix.
public const int PERF_AVERAGE_BULK = (PERF_SIZE_LARGE Or PERF_TYPE_COUNTER Or PERF_COUNTER_FRACTION Or PERF_DISPLAY_NOSHOW)

// 64-bit Timer in 100 nsec units. Display delta divided by
// delta time.  Display suffix: "%"
public const int PERF_100NSEC_TIMER = (PERF_SIZE_LARGE Or PERF_TYPE_COUNTER Or PERF_COUNTER_RATE Or PERF_TIMER_100NS Or PERF_DELTA_COUNTER Or PERF_DISPLAY_PERCENT)

// 64-bit Timer inverse (e.g., idle is measured, but display busy  As Integer)
// Display 100 - delta divided by delta time.  Display suffix: "%"
public const int PERF_100NSEC_TIMER_INV = (PERF_SIZE_LARGE Or PERF_TYPE_COUNTER Or PERF_COUNTER_RATE Or PERF_TIMER_100NS Or PERF_DELTA_COUNTER Or PERF_INVERSE_COUNTER Or PERF_DISPLAY_PERCENT)

// 64-bit Timer.  Divide delta by delta time.  Display suffix: "%"
// Timer for multiple instances, so result can exceed 100%.
public const int PERF_COUNTER_MULTI_TIMER = (PERF_SIZE_LARGE Or PERF_TYPE_COUNTER Or PERF_COUNTER_RATE Or PERF_DELTA_COUNTER Or PERF_TIMER_TICK Or PERF_MULTI_COUNTER Or PERF_DISPLAY_PERCENT)

// 64-bit Timer inverse (e.g., idle is measured, but display busy  As Integer)
// Display 100  _MULTI_BASE - delta divided by delta time.
// Display suffix: "%" Timer for multiple instances, so result
// can exceed 100%.  Followed by a counter of type _MULTI_BASE.
public const int PERF_COUNTER_MULTI_TIMER_INV = (PERF_SIZE_LARGE Or PERF_TYPE_COUNTER Or PERF_COUNTER_RATE Or PERF_DELTA_COUNTER Or PERF_MULTI_COUNTER Or PERF_TIMER_TICK Or PERF_INVERSE_COUNTER Or PERF_DISPLAY_PERCENT)

// Number of instances to which the preceding _MULTI_..._INV counter
// applies.  Used as a factor to get the percentage.
public const int PERF_COUNTER_MULTI_BASE = (PERF_SIZE_LARGE Or PERF_TYPE_COUNTER Or PERF_COUNTER_BASE Or PERF_MULTI_COUNTER Or PERF_DISPLAY_NOSHOW)

// 64-bit Timer in 100 nsec units. Display delta divided by delta time.
// Display suffix: "%" Timer for multiple instances, so result can exceed 100%.
public const int PERF_100NSEC_MULTI_TIMER = (PERF_SIZE_LARGE Or PERF_TYPE_COUNTER Or PERF_DELTA_COUNTER Or PERF_COUNTER_RATE Or PERF_TIMER_100NS Or PERF_MULTI_COUNTER Or PERF_DISPLAY_PERCENT)

// 64-bit Timer inverse (e.g., idle is measured, but display busy  As Integer)
// Display 100  _MULTI_BASE - delta divided by delta time.
// Display suffix: "%" Timer for multiple instances, so result
// can exceed 100%.  Followed by a counter of type _MULTI_BASE.
public const int PERF_100NSEC_MULTI_TIMER_INV = (PERF_SIZE_LARGE Or PERF_TYPE_COUNTER Or PERF_DELTA_COUNTER Or PERF_COUNTER_RATE Or PERF_TIMER_100NS Or PERF_MULTI_COUNTER Or PERF_INVERSE_COUNTER Or PERF_DISPLAY_PERCENT)

// Indicates the data is a fraction of the following counter  which
// should not be time averaged on display (such as free space over
// total space.) Display as is.  Display the quotient as "%".
public const int PERF_RAW_FRACTION = (PERF_SIZE_DWORD Or PERF_TYPE_COUNTER Or PERF_COUNTER_FRACTION Or PERF_DISPLAY_PERCENT)

// Indicates the data is a base for the preceding counter which should
// not be time averaged on display (such as free space over total space.)
public const int PERF_RAW_BASE = (PERF_SIZE_DWORD Or PERF_TYPE_COUNTER Or PERF_COUNTER_BASE Or PERF_DISPLAY_NOSHOW Or  H3)         //  for compatibility with pre-beta versions

// The data collected in this counter is actually the start time of the
// item being measured. For display, this data is subtracted from the
// sample time to yield the elapsed time as the difference between the two.
// In the definition below, the PerfTime field of the Object contains
// the sample time as indicated by the PERF_OBJECT_TIMER bit and the
// difference is scaled by the PerfFreq of the Object to convert the time
// units into seconds.
public const int PERF_ELAPSED_TIME = (PERF_SIZE_LARGE Or PERF_TYPE_COUNTER Or PERF_COUNTER_ELAPSED Or PERF_OBJECT_TIMER Or PERF_DISPLAY_SECONDS)

// The following counter type can be used with the preceding types to
// define a range of values to be displayed in a histogram.
public const int PERF_COUNTER_HISTOGRAM_TYPE =  H80000000  // Counter begins or ends a histogram

// The following are used to determine the level of detail associated
// with the counter.  The user will be setting the level of detail
// that should be displayed at any given time.
public const int PERF_DETAIL_NOVICE = 100 //  The uninformed can understand it
public const int PERF_DETAIL_ADVANCED = 200 //  For the advanced user
public const int PERF_DETAIL_EXPERT = 300 //  For the expert user
public const int PERF_DETAIL_WIZARD = 400 //  For the system designer

Type PERF_COUNTER_DEFINITION
        ByteLength As Long
        CounterNameTitleIndex As Long
        CounterNameTitle As String
        CounterHelpTitleIndex As Long
        CounterHelpTitle As String
        DefaultScale As Long
        DetailLevel As Long
        CounterType As Long
        CounterSize As Long
        CounterOffset As Long
End Type

public const int PERF_NO_UNIQUE_ID = -1

Type PERF_INSTANCE_DEFINITION
        ByteLength As Long
        ParentObjectTitleIndex As Long
        ParentObjectInstance As Long
        UniqueID As Long
        NameOffset As Long
        NameLength As Long
End Type

Type PERF_COUNTER_BLOCK
        ByteLength As Long
End Type

public const int CDERR_DIALOGFAILURE =  HFFFF

public const int CDERR_GENERALCODES =  H0
public const int CDERR_STRUCTSIZE =  H1
public const int CDERR_INITIALIZATION =  H2
public const int CDERR_NOTEMPLATE =  H3
public const int CDERR_NOHINSTANCE =  H4
public const int CDERR_LOADSTRFAILURE =  H5
public const int CDERR_FINDRESFAILURE =  H6
public const int CDERR_LOADRESFAILURE =  H7
public const int CDERR_LOCKRESFAILURE =  H8
public const int CDERR_MEMALLOCFAILURE =  H9
public const int CDERR_MEMLOCKFAILURE =  HA
public const int CDERR_NOHOOK =  HB
public const int CDERR_REGISTERMSGFAIL =  HC

public const int PDERR_PRINTERCODES =  H1000
public const int PDERR_SETUPFAILURE =  H1001
public const int PDERR_PARSEFAILURE =  H1002
public const int PDERR_RETDEFFAILURE =  H1003
public const int PDERR_LOADDRVFAILURE =  H1004
public const int PDERR_GETDEVMODEFAIL =  H1005
public const int PDERR_INITFAILURE =  H1006
public const int PDERR_NODEVICES =  H1007
public const int PDERR_NODEFAULTPRN =  H1008
public const int PDERR_DNDMMISMATCH =  H1009
public const int PDERR_CREATEICFAILURE =  H100A
public const int PDERR_PRINTERNOTFOUND =  H100B
public const int PDERR_DEFAULTDIFFERENT =  H100C

public const int CFERR_CHOOSEFONTCODES =  H2000
public const int CFERR_NOFONTS =  H2001
public const int CFERR_MAXLESSTHANMIN =  H2002

public const int FNERR_FILENAMECODES =  H3000
public const int FNERR_SUBCLASSFAILURE =  H3001
public const int FNERR_INVALIDFILENAME =  H3002
public const int FNERR_BUFFERTOOSMALL =  H3003

public const int FRERR_FINDREPLACECODES =  H4000
public const int FRERR_BUFFERLENGTHZERO =  H4001

public const int CCERR_CHOOSECOLORCODES =  H5000


// Public interface to LZEXP?.LIB

//  LZEXPAND error return codes
public const int LZERROR_BADINHANDLE = (-1)  //  invalid input handle
public const int LZERROR_BADOUTHANDLE = (-2) //  invalid output handle
public const int LZERROR_READ = (-3)         //  corrupt compressed file format
public const int LZERROR_WRITE = (-4)        //  out of space for output file
public const int LZERROR_PUBLICLOC = (-5)    //  insufficient memory for LZFile struct
public const int LZERROR_GLOBLOCK = (-6)     //  bad Global handle
public const int LZERROR_BADVALUE = (-7)     //  input parameter out of range
public const int LZERROR_UNKNOWNALG = (-8)   //  compression algorithm not recognized

Declare Function LZCopy Lib "lz32.dll" Alias "LZCopy" (ByVal hfSource As Long, ByVal hfDest As Long) As Long
Declare Function LZInit Lib "lz32.dll" Alias "LZInit" (ByVal hfSrc As Long) As Long
Declare Function GetExpandedName Lib "lz32.dll" Alias "GetExpandedNameA" (ByVal lpszSource As String, ByVal lpszBuffer As String) As Long
Declare Function LZOpenFile Lib "lz32.dll" Alias "LZOpenFileA" (ByVal lpszFile As String, lpOf As OFSTRUCT, ByVal style As Long) As Long
Declare Function LZSeek Lib "lz32.dll" Alias "LZSeek" (ByVal hfFile As Long, ByVal lOffset As Long, ByVal nOrigin As Long) As Long
Declare Function LZRead Lib "lz32.dll" Alias "LZRead" (ByVal hfFile As Long, ByVal lpvBuf As String, ByVal cbread As Long) As Long
Declare Sub LZClose Lib "lz32.dll" Alias "LZClose" (ByVal hfFile As Long)

// ********************************************************************
//       IMM.H - Input Method Manager definitions
//
//       Copyright (c) 1993-1995  Microsoft Corporation
// ********************************************************************

public const int VK_PROCESSKEY =  HE5

Type COMPOSITIONFORM
        dwStyle As Long
        ptCurrentPos As POINTAPI
        rcArea As Rect
End Type

Type CANDIDATEFORM
        dwIndex As Long
        dwStyle As Long
        ptCurrentPos As POINTAPI
        rcArea As Rect
End Type

Type CANDIDATELIST
        dwSize As Long
        dwStyle As Long
        dwCount As Long
        dwSelection As Long
        dwPageStart As Long
        dwPageSize As Long
        dwOffset(1) As Long
End Type

public const int STYLE_DESCRIPTION_SIZE = 32

Type STYLEBUF
        dwStyle As Long
        szDescription As String * STYLE_DESCRIPTION_SIZE
End Type
//  prototype of IMM API

Declare Function ImmInstallIME Lib "imm32.dll" Alias "ImmInstallIMEA" (ByVal lpszIMEFileName As String, ByVal lpszLayoutText As String) As Long
Declare Function ImmGetDefaultIMEWnd Lib "imm32.dll" Alias "ImmGetDefaultIMEWnd" (ByVal hwnd As Long) As Long
Declare Function ImmGetDescription Lib "imm32.dll" Alias "ImmGetDescriptionA" (ByVal hkl As Long, ByVal lpsz As String, ByVal uBufLen As Long) As Long
Declare Function ImmGetIMEFileName Lib "imm32.dll" Alias "ImmGetIMEFileNameA" (ByVal hkl As Long, ByVal lpStr As String, ByVal uBufLen As Long) As Long
Declare Function ImmGetProperty Lib "imm32.dll" Alias "ImmGetProperty" (ByVal hkl As Long, ByVal dw As Long) As Long
Declare Function ImmIsIME Lib "imm32.dll" Alias "ImmIsIME" (ByVal hkl As Long) As Long
Declare Function ImmSimulateHotKey Lib "imm32.dll" Alias "ImmSimulateHotKey" (ByVal hwnd As Long, ByVal dw As Long) As Long
Declare Function ImmCreateContext Lib "imm32.dll" Alias "ImmCreateContext" () As Long
Declare Function ImmDestroyContext Lib "imm32.dll" Alias "ImmDestroyContext" (ByVal himc As Long) As Long
Declare Function ImmGetContext Lib "imm32.dll" Alias "ImmGetContext" (ByVal hwnd As Long) As Long
Declare Function ImmReleaseContext Lib "imm32.dll" Alias "ImmReleaseContext" (ByVal hwnd As Long, ByVal himc As Long) As Long
Declare Function ImmAssociateContext Lib "imm32.dll" Alias "ImmAssociateContext" (ByVal hwnd As Long, ByVal himc As Long) As Long
Declare Function ImmGetCompositionString Lib "imm32.dll" Alias "ImmGetCompositionStringA" (ByVal himc As Long, ByVal dw As Long, lpv As Any, ByVal dw2 As Long) As Long
Declare Function ImmSetCompositionString Lib "imm32.dll" Alias "ImmSetCompositionStringA" (ByVal himc As Long, ByVal dwIndex As Long, lpComp As Any, ByVal dw As Long, lpRead As Any, ByVal dw2 As Long) As Long
Declare Function ImmGetCandidateListCount Lib "imm32.dll" Alias "ImmGetCandidateListCountA" (ByVal himc As Long, lpdwListCount As Long) As Long
Declare Function ImmGetCandidateList Lib "imm32.dll" Alias "ImmGetCandidateListA" (ByVal himc As Long, ByVal deIndex As Long, lpCandidateList As CANDIDATELIST, ByVal dwBufLen As Long) As Long
Declare Function ImmGetGuideLine Lib "imm32.dll" Alias " ImmGetGuideLineA" (ByVal himc As Long, ByVal dwIndex As Long, ByVal lpStr As String, ByVal dwBufLen As Long) As Long
Declare Function ImmGetConversionStatus Lib "imm32.dll" Alias "ImmGetConversionStatus" (ByVal himc As Long, lpdw As Long, lpdw2 As Long) As Long
Declare Function ImmSetConversionStatus Lib "imm32.dll" Alias "ImmSetConversionStatus" (ByVal himc As Long, ByVal dw1 As Long, ByVal dw2 As Long) As Long
Declare Function ImmGetOpenStatus Lib "imm32.dll" Alias "ImmGetOpenStatus" (ByVal himc As Long) As Long
Declare Function ImmSetOpenStatus Lib "imm32.dll" Alias "ImmSetOpenStatus" (ByVal himc As Long, ByVal b As Long) As Long
Declare Function ImmGetCompositionFont Lib "imm32.dll" Alias "ImmGetCompositionFontA" (ByVal himc As Long, lpLogFont As LOGFONT) As Long
Declare Function ImmSetCompositionFont Lib "imm32.dll" Alias "ImmSetCompositionFontA" (ByVal himc As Long, lpLogFont As LOGFONT) As Long
Declare Function ImmConfigureIME Lib "imm32.dll" Alias "ImmConfigureIME" (ByVal hkl As Long, ByVal hwnd As Long, ByVal dw As Long) As Long
Declare Function ImmEscape Lib "imm32.dll" Alias "ImmEscapeA" (ByVal hkl As Long, ByVal himc As Long, ByVal un As Long, lpv As Any) As Long
Declare Function ImmGetConversionList Lib "imm32.dll" Alias "ImmGetConversionListA" (ByVal hkl As Long, ByVal himc As Long, ByVal lpsz As String, lpCandidateList As CANDIDATELIST, ByVal dwBufLen As Long, ByVal uFlag As Long) As Long
Declare Function ImmNotifyIME Lib "imm32.dll" Alias "ImmNotifyIME" (ByVal himc As Long, ByVal dwAction As Long, ByVal dwIndex As Long, ByVal dwValue As Long) As Long
Declare Function ImmGetStatusWindowPos Lib "imm32.dll" Alias "ImmGetStatusWindowPos" (ByVal himc As Long, lpPoint As POINTAPI) As Long
Declare Function ImmSetStatusWindowPos Lib "imm32.dll" Alias "ImmSetStatusWindowPos" (ByVal himc As Long, lpPoint As POINTAPI) As Long
Declare Function ImmGetCompositionWindow Lib "imm32.dll" Alias "ImmGetCompositionWindow" (ByVal himc As Long, lpCompositionForm As COMPOSITIONFORM) As Long
Declare Function ImmSetCompositionWindow Lib "imm32.dll" Alias "ImmSetCompositionWindow" (ByVal himc As Long, lpCompositionForm As COMPOSITIONFORM) As Long
Declare Function ImmGetCandidateWindow Lib "imm32.dll" Alias "ImmGetCandidateWindow" (ByVal himc As Long, ByVal dw As Long, lpCandidateForm As CANDIDATEFORM) As Long
Declare Function ImmSetCandidateWindow Lib "imm32.dll" Alias "ImmSetCandidateWindow" (ByVal himc As Long, lpCandidateForm As CANDIDATEFORM) As Long
Declare Function ImmIsUIMessage Lib "imm32.dll" Alias "ImmIsUIMessageA" (ByVal hwnd As Long, ByVal un As Long, ByVal wParam As Long, ByVal lParam As Long) As Long
Declare Function ImmGetVirtualKey Lib "imm32.dll" Alias "ImmGetVirtualKey" (ByVal hwnd As Long) As Long
Declare Function ImmRegisterWord Lib "imm32.dll" Alias "ImmRegisterWordA" (ByVal hkl As Long, ByVal lpszReading As String, ByVal dw As Long, ByVal lpszRegister As String) As Long
Declare Function ImmUnregisterWord Lib "imm32.dll" Alias "ImmUnregisterWordA" (ByVal hkl As Long, ByVal lpszReading As String, ByVal dw As Long, ByVal lpszUnregister As String) As Long
Declare Function ImmGetRegisterWordStyle Lib "imm32.dll" Alias " ImmGetRegisterWordStyleA" (ByVal hkl As Long, ByVal nItem As Long, lpStyleBuf As STYLEBUF) As Long
Declare Function ImmEnumRegisterWord Lib "imm32.dll" Alias "ImmEnumRegisterWordA" (ByVal hkl As Long, ByVal RegisterWordEnumProc As Long, ByVal lpszReading As String, ByVal dw As Long, ByVal lpszRegister As String, lpv As Any) As Long
//  the IME related messages
public const int WM_CONVERTREQUESTEX =  H108
public const int WM_IME_STARTCOMPOSITION =  H10D
public const int WM_IME_ENDCOMPOSITION =  H10E
public const int WM_IME_COMPOSITION =  H10F
public const int WM_IME_KEYLAST =  H10F

public const int WM_IME_SETCONTEXT =  H281
public const int WM_IME_NOTIFY =  H282
public const int WM_IME_CONTROL =  H283
public const int WM_IME_COMPOSITIONFULL =  H284
public const int WM_IME_SELECT =  H285
public const int WM_IME_CHAR =  H286

public const int WM_IME_KEYDOWN =  H290
public const int WM_IME_KEYUP =  H291

//  wParam for WM_IME_CONTROL
public const int IMC_GETCANDIDATEPOS =  H7
public const int IMC_SETCANDIDATEPOS =  H8
public const int IMC_GETCOMPOSITIONFONT =  H9
public const int IMC_SETCOMPOSITIONFONT =  HA
public const int IMC_GETCOMPOSITIONWINDOW =  HB
public const int IMC_SETCOMPOSITIONWINDOW =  HC
public const int IMC_GETSTATUSWINDOWPOS =  HF
public const int IMC_SETSTATUSWINDOWPOS =  H10
public const int IMC_CLOSESTATUSWINDOW =  H21
public const int IMC_OPENSTATUSWINDOW =  H22


//  wParam for WM_IME_CONTROL to the soft keyboard
//  dwAction for ImmNotifyIME
public const int NI_OPENCANDIDATE =  H10
public const int NI_CLOSECANDIDATE =  H11
public const int NI_SELECTCANDIDATESTR =  H12
public const int NI_CHANGECANDIDATELIST =  H13
public const int NI_FINALIZECONVERSIONRESULT =  H14
public const int NI_COMPOSITIONSTR =  H15
public const int NI_SETCANDIDATE_PAGESTART =  H16
public const int NI_SETCANDIDATE_PAGESIZE =  H17

//  lParam for WM_IME_SETCONTEXT
public const int ISC_SHOWUICANDIDATEWINDOW =  H1
public const int ISC_SHOWUICOMPOSITIONWINDOW =  H80000000
public const int ISC_SHOWUIGUIDELINE =  H40000000
public const int ISC_SHOWUIALLCANDIDATEWINDOW =  HF
public const int ISC_SHOWUIALL =  HC000000F

//  dwIndex for ImmNotifyIME/NI_COMPOSITIONSTR
public const int CPS_COMPLETE =  H1
public const int CPS_CONVERT =  H2
public const int CPS_REVERT =  H3
public const int CPS_CANCEL =  H4

//  Windows for Simplified Chinese Edition hot key ID from 0x10 - 0x2F
public const int IME_CHOTKEY_IME_NONIME_TOGGLE =  H10
public const int IME_CHOTKEY_SHAPE_TOGGLE =  H11
public const int IME_CHOTKEY_SYMBOL_TOGGLE =  H12

//  Windows for Japanese Edition hot key ID from 0x30 - 0x4F
public const int IME_JHOTKEY_CLOSE_OPEN =  H30

//  Windows for Korean Edition hot key ID from 0x50 - 0x6F
public const int IME_KHOTKEY_SHAPE_TOGGLE =  H50
public const int IME_KHOTKEY_HANJACONVERT =  H51
public const int IME_KHOTKEY_ENGLISH =  H52

//  Windows for Tranditional Chinese Edition hot key ID from 0x70 - 0x8F
public const int IME_THOTKEY_IME_NONIME_TOGGLE =  H70
public const int IME_THOTKEY_SHAPE_TOGGLE =  H71
public const int IME_THOTKEY_SYMBOL_TOGGLE =  H72

//  direct switch hot key ID from 0x100 - 0x11F
public const int IME_HOTKEY_DSWITCH_FIRST =  H100
public const int IME_HOTKEY_DSWITCH_LAST =  H11F

//  IME private hot key from 0x200 - 0x21F
public const int IME_ITHOTKEY_RESEND_RESULTSTR =  H200
public const int IME_ITHOTKEY_PREVIOUS_COMPOSITION =  H201
public const int IME_ITHOTKEY_UISTYLE_TOGGLE =  H202

//  parameter of ImmGetCompositionString
public const int GCS_COMPREADSTR =  H1
public const int GCS_COMPREADATTR =  H2
public const int GCS_COMPREADCLAUSE =  H4
public const int GCS_COMPSTR =  H8
public const int GCS_COMPATTR =  H10
public const int GCS_COMPCLAUSE =  H20
public const int GCS_CURSORPOS =  H80
public const int GCS_DELTASTART =  H100
public const int GCS_RESULTREADSTR =  H200
public const int GCS_RESULTREADCLAUSE =  H400
public const int GCS_RESULTSTR =  H800
public const int GCS_RESULTCLAUSE =  H1000

//  style bit flags for WM_IME_COMPOSITION
public const int CS_INSERTCHAR =  H2000
public const int CS_NOMOVECARET =  H4000

//  bits of fdwInit of INPUTCONTEXT
//  IME property bits
public const int IME_PROP_AT_CARET =  H10000
public const int IME_PROP_SPECIAL_UI =  H20000
public const int IME_PROP_CANDLIST_START_FROM_1 =  H40000
public const int IME_PROP_UNICODE =  H80000

//  IME UICapability bits
public const int UI_CAP_2700 =  H1
public const int UI_CAP_ROT90 =  H2
public const int UI_CAP_ROTANY =  H4

//  ImmSetCompositionString Capability bits
public const int SCS_CAP_COMPSTR =  H1
public const int SCS_CAP_MAKEREAD =  H2

//  IME WM_IME_SELECT inheritance Capability bits
public const int SELECT_CAP_CONVERSION =  H1
public const int SELECT_CAP_SENTENCE =  H2

//  ID for deIndex of ImmGetGuideLine
public const int GGL_LEVEL =  H1
public const int GGL_INDEX =  H2
public const int GGL_STRING =  H3
public const int GGL_PRIVATE =  H4

//  ID for dwLevel of GUIDELINE Structure
public const int GL_LEVEL_NOGUIDELINE =  H0
public const int GL_LEVEL_FATAL =  H1
public const int GL_LEVEL_ERROR =  H2
public const int GL_LEVEL_WARNING =  H3
public const int GL_LEVEL_INFORMATION =  H4

//  ID for dwIndex of GUIDELINE Structure
public const int GL_ID_UNKNOWN =  H0
public const int GL_ID_NOMODULE =  H1
public const int GL_ID_NODICTIONARY =  H10
public const int GL_ID_CANNOTSAVE =  H11
public const int GL_ID_NOCONVERT =  H20
public const int GL_ID_TYPINGERROR =  H21
public const int GL_ID_TOOMANYSTROKE =  H22
public const int GL_ID_READINGCONFLICT =  H23
public const int GL_ID_INPUTREADING =  H24
public const int GL_ID_INPUTRADICAL =  H25
public const int GL_ID_INPUTCODE =  H26
public const int GL_ID_INPUTSYMBOL =  H27
public const int GL_ID_CHOOSECANDIDATE =  H28
public const int GL_ID_REVERSECONVERSION =  H29
public const int GL_ID_PRIVATE_FIRST =  H8000
public const int GL_ID_PRIVATE_LAST =  HFFFF

//  ID for dwIndex of ImmGetProperty
public const int IGP_PROPERTY =  H4
public const int IGP_CONVERSION =  H8
public const int IGP_SENTENCE =  HC
public const int IGP_UI =  H10
public const int IGP_SETCOMPSTR =  H14
public const int IGP_SELECT =  H18

//  dwIndex for ImmSetCompositionString API
public const int SCS_SETSTR = (GCS_COMPREADSTR Or GCS_COMPSTR)
public const int SCS_CHANGEATTR = (GCS_COMPREADATTR Or GCS_COMPATTR)
public const int SCS_CHANGECLAUSE = (GCS_COMPREADCLAUSE Or GCS_COMPCLAUSE)

//  attribute for COMPOSITIONSTRING Structure
public const int ATTR_INPUT =  H0
public const int ATTR_TARGET_CONVERTED =  H1
public const int ATTR_CONVERTED =  H2
public const int ATTR_TARGET_NOTCONVERTED =  H3
public const int ATTR_INPUT_ERROR =  H4

//  bit field for IMC_SETCOMPOSITIONWINDOW, IMC_SETCANDIDATEWINDOW
public const int CFS_DEFAULT =  H0
public const int CFS_RECT =  H1
public const int CFS_POINT =  H2
public const int CFS_SCREEN =  H4
public const int CFS_FORCE_POSITION =  H20
public const int CFS_CANDIDATEPOS =  H40
public const int CFS_EXCLUDE =  H80

//  conversion direction for ImmGetConversionList
public const int GCL_CONVERSION =  H1
public const int GCL_REVERSECONVERSION =  H2
public const int GCL_REVERSE_LENGTH =  H3

//  bit field for conversion mode
public const int IME_CMODE_ALPHANUMERIC =  H0
public const int IME_CMODE_NATIVE =  H1
public const int IME_CMODE_CHINESE = IME_CMODE_NATIVE
public const int IME_CMODE_HANGEUL = IME_CMODE_NATIVE
public const int IME_CMODE_JAPANESE = IME_CMODE_NATIVE
public const int IME_CMODE_KATAKANA =  H2                   //  only effect under IME_CMODE_NATIVE
public const int IME_CMODE_LANGUAGE =  H3
public const int IME_CMODE_FULLSHAPE =  H8
public const int IME_CMODE_ROMAN =  H10
public const int IME_CMODE_CHARCODE =  H20
public const int IME_CMODE_HANJACONVERT =  H40
public const int IME_CMODE_SOFTKBD =  H80
public const int IME_CMODE_NOCONVERSION =  H100
public const int IME_CMODE_EUDC =  H200
public const int IME_CMODE_SYMBOL =  H400

public const int IME_SMODE_NONE =  H0
public const int IME_SMODE_PLAURALCLAUSE =  H1
public const int IME_SMODE_SINGLECONVERT =  H2
public const int IME_SMODE_AUTOMATIC =  H4
public const int IME_SMODE_PHRASEPREDICT =  H8

//  style of candidate
public const int IME_CAND_UNKNOWN =  H0
public const int IME_CAND_READ =  H1
public const int IME_CAND_CODE =  H2
public const int IME_CAND_MEANING =  H3
public const int IME_CAND_RADICAL =  H4
public const int IME_CAND_STROKE =  H5

//  wParam of report message WM_IME_NOTIFY
public const int IMN_CLOSESTATUSWINDOW =  H1
public const int IMN_OPENSTATUSWINDOW =  H2
public const int IMN_CHANGECANDIDATE =  H3
public const int IMN_CLOSECANDIDATE =  H4
public const int IMN_OPENCANDIDATE =  H5
public const int IMN_SETCONVERSIONMODE =  H6
public const int IMN_SETSENTENCEMODE =  H7
public const int IMN_SETOPENSTATUS =  H8
public const int IMN_SETCANDIDATEPOS =  H9
public const int IMN_SETCOMPOSITIONFONT =  HA
public const int IMN_SETCOMPOSITIONWINDOW =  HB
public const int IMN_SETSTATUSWINDOWPOS =  HC
public const int IMN_GUIDELINE =  HD
public const int IMN_PRIVATE =  HE

//  error code of ImmGetCompositionString
public const int IMM_ERROR_NODATA = (-1)
public const int IMM_ERROR_GENERAL = (-2)

//  dialog mode of ImmConfigureIME
public const int IME_CONFIG_GENERAL = 1
public const int IME_CONFIG_REGISTERWORD = 2
public const int IME_CONFIG_SELECTDICTIONARY = 3

//  dialog mode of ImmEscape
public const int IME_ESC_QUERY_SUPPORT =  H3
public const int IME_ESC_RESERVED_FIRST =  H4
public const int IME_ESC_RESERVED_LAST =  H7FF
public const int IME_ESC_PRIVATE_FIRST =  H800
public const int IME_ESC_PRIVATE_LAST =  HFFF
public const int IME_ESC_SEQUENCE_TO_INTERNAL =  H1001
public const int IME_ESC_GET_EUDC_DICTIONARY =  H1003
public const int IME_ESC_SET_EUDC_DICTIONARY =  H1004
public const int IME_ESC_MAX_KEY =  H1005
public const int IME_ESC_IME_NAME =  H1006
public const int IME_ESC_SYNC_HOTKEY =  H1007
public const int IME_ESC_HANJA_MODE =  H1008

//  style of word registration
public const int IME_REGWORD_STYLE_EUDC =  H1
public const int IME_REGWORD_STYLE_USER_FIRST =  H80000000
public const int IME_REGWORD_STYLE_USER_LAST =  HFFFF

//  type of soft keyboard
//  for Windows Tranditional Chinese Edition
public const int SOFTKEYBOARD_TYPE_T1 =  H1
//  for Windows Simplified Chinese Edition
public const int SOFTKEYBOARD_TYPE_C1 =  H2



// ***********************************************************************
// *                                                                       *
// *   mcx.h -- This module defines the 32-Bit Windows MCX APIs            *
// *                                                                       *
// *   Copyright (c) 1990-1995, Microsoft Corp. All rights reserved.       *
// *                                                                       *
// ************************************************************************/


Type MODEMDEVCAPS
        dwActualSize As Long
        dwRequiredSize As Long
        dwDevSpecificOffset As Long
        dwDevSpecificSize As Long

    //  product and version identification
        dwModemProviderVersion As Long
        dwModemManufacturerOffset As Long
        dwModemManufacturerSize As Long
        dwModemModelOffset As Long
        dwModemModelSize As Long
        dwModemVersionOffset As Long
        dwModemVersionSize As Long

    //  local option capabilities
        dwDialOptions          //  bitmap of supported values
        dwCallSetupFailTimer   //  maximum in seconds
        dwInactivityTimeout    //  maximum in seconds
        dwSpeakerVolume        //  bitmap of supported values
        dwSpeakerMode          //  bitmap of supported values
        dwModemOptions         //  bitmap of supported values
        dwMaxDTERate           //  maximum value in bit/s
        dwMaxDCERate           //  maximum value in bit/s

    //  Variable portion for proprietary expansion
        abVariablePortion(1) As Byte
End Type

Type MODEMSETTINGS
        dwActualSize As Long
        dwRequiredSize As Long
        dwDevSpecificOffset As Long
        dwDevSpecificSize As Long

    //  static local options (read/write)
        dwCallSetupFailTimer       //  seconds
        dwInactivityTimeout        //  seconds
        dwSpeakerVolume            //  level
        dwSpeakerMode              //  mode
        dwPreferredModemOptions    //  bitmap
    
    //  negotiated options (read only) for current or last call
        dwNegotiatedModemOptions   //  bitmap
        dwNegotiatedDCERate        //  bit/s

    //  Variable portion for proprietary expansion
        abVariablePortion(1) As Byte
End Type

//  Dial Options
public const int DIALOPTION_BILLING =  H40          //  Supports wait for bong "$"
public const int DIALOPTION_QUIET =  H80            //  Supports wait for quiet "@"
public const int DIALOPTION_DIALTONE =  H100        //  Supports wait for dial tone "W"

//  SpeakerVolume for MODEMDEVCAPS
public const int MDMVOLFLAG_LOW =  H1
public const int MDMVOLFLAG_MEDIUM =  H2
public const int MDMVOLFLAG_HIGH =  H4

//  SpeakerVolume for MODEMSETTINGS
public const int MDMVOL_LOW =  H0
public const int MDMVOL_MEDIUM =  H1
public const int MDMVOL_HIGH =  H2

//  SpeakerMode for MODEMDEVCAPS
public const int MDMSPKRFLAG_OFF =  H1
public const int MDMSPKRFLAG_DIAL =  H2
public const int MDMSPKRFLAG_ON =  H4
public const int MDMSPKRFLAG_CALLSETUP =  H8

//  SpeakerMode for MODEMSETTINGS
public const int MDMSPKR_OFF =  H0
public const int MDMSPKR_DIAL =  H1
public const int MDMSPKR_ON =  H2
public const int MDMSPKR_CALLSETUP =  H3
 
//  Modem Options
public const int MDM_COMPRESSION =  H1
public const int MDM_ERROR_CONTROL =  H2
public const int MDM_FORCED_EC =  H4
public const int MDM_CELLULAR =  H8
public const int MDM_FLOWCONTROL_HARD =  H10
public const int MDM_FLOWCONTROL_SOFT =  H20
public const int MDM_CCITT_OVERRIDE =  H40
public const int MDM_SPEED_ADJUST =  H80
public const int MDM_TONE_DIAL =  H100
public const int MDM_BLIND_DIAL =  H200
public const int MDM_V23_OVERRIDE =  H400



// *****************************************************************************                                                                             *
// * shellapi.h -  SHELL.DLL functions, types, and definitions                   *
// *                                                                             *
// * Copyright (c) 1992-1995, Microsoft Corp.  All rights reserved               *
// *                                                                             *
// \*****************************************************************************/

Declare Function DragQueryFile Lib "shell32.dll" Alias "DragQueryFileA" (ByVal HDROP As Long, ByVal UINT As Long, ByVal lpStr As String, ByVal ch As Long) As Long
Declare Function DragQueryPoint Lib "shell32.dll" Alias "DragQueryPoint" (ByVal HDROP As Long, lpPoint As POINTAPI) As Long
Declare Sub DragFinish Lib "shell32.dll" Alias "DragFinish" (ByVal hDrop As Long)
Declare Sub DragAcceptFiles Lib "shell32.dll" Alias "DragAcceptFiles" (ByVal hwnd As Long, ByVal fAccept As Long)
Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long
Declare Function FindExecutable Lib "shell32.dll" Alias "FindExecutableA" (ByVal lpFile As String, ByVal lpDirectory As String, ByVal lpResult As String) As Long

Declare Function ShellAbout Lib "shell32.dll" Alias "ShellAboutA" (ByVal hwnd As Long, ByVal szApp As String, ByVal szOtherStuff As String, ByVal hIcon As Long) As Long
Declare Function DuplicateIcon Lib "shell32.dll" Alias "DuplicateIcon" (ByVal hInst As Long, ByVal hIcon As Long) As Long
Declare Function ExtractAssociatedIcon Lib "shell32.dll" Alias "ExtractAssociateIconA" (ByVal hInst As Long, ByVal lpIconPath As String, lpiIcon As Long) As Long
Declare Function ExtractIcon Lib "shell32.dll" Alias "ExtractIconA" (ByVal hInst As Long, ByVal lpszExeFileName As String, ByVal nIconIndex As Long) As Long

Type DRAGINFO
        uSize                 //  init with sizeof(DRAGINFO)
        pt As POINTAPI
        fNC As Long
        lpFileList As String
        grfKeyState As Long
End Type

// // AppBar stuff

public const int ABM_NEW =  H0
public const int ABM_REMOVE =  H1
public const int ABM_QUERYPOS =  H2
public const int ABM_SETPOS =  H3
public const int ABM_GETSTATE =  H4
public const int ABM_GETTASKBARPOS =  H5
public const int ABM_ACTIVATE =  H6               //  lParam == TRUE/FALSE means activate/deactivate
public const int ABM_GETAUTOHIDEBAR =  H7
public const int ABM_SETAUTOHIDEBAR =  H8          //  this can fail at any time.  MUST check the result
                                        //  lParam = TRUE/FALSE  Set/Unset
                                        //  uEdge = what edge
public const int ABM_WINDOWPOSCHANGED =  H9


//  these are put in the wparam of callback messages
public const int ABN_STATECHANGE =  H0
public const int ABN_POSCHANGED =  H1
public const int ABN_FULLSCREENAPP =  H2
public const int ABN_WINDOWARRANGE =  H3 //  lParam == TRUE means hide

//  flags for get state

public const int ABS_AUTOHIDE =  H1
public const int ABS_ALWAYSONTOP =  H2
public const int ABE_LEFT = 0
public const int ABE_TOP = 1
public const int ABE_RIGHT = 2
public const int ABE_BOTTOM = 3

Type APPBARDATA
        cbSize As Long
        hwnd As Long
        uCallbackMessage As Long
        uEdge As Long
        rc As Rect
        lParam //  message specific
End Type

Declare Function SHAppBarMessage Lib "shell32.dll" Alias "SHAppBarMessage" (ByVal dwMessage As Long, pData As APPBARDATA) As Long

// //  EndAppBar

Declare Function DoEnvironmentSubst Lib "shell32.dll" Alias "DoEnvironmentSubstA" (ByVal szString As String, ByVal cbString As Long) As Long
Declare Function FindEnvironmentString Lib "shell32.dll" Alias "FindEnvironmentStringA" (ByVal szEnvVar As String) As String

public const int EIRESID = -1

Declare Function ExtractIconEx Lib "shell32.dll" Alias "ExtractIconExA" (ByVal lpszFile As String, ByVal nIconIndex As Long, phiconLarge As Long, phiconSmall As Long, ByVal nIcons As Long) As Long

// // Shell File Operations

public const int FO_MOVE =  H1
public const int FO_COPY =  H2
public const int FO_DELETE =  H3
public const int FO_RENAME =  H4
public const int FOF_MULTIDESTFILES =  H1
public const int FOF_CONFIRMMOUSE =  H2
public const int FOF_SILENT =  H4                      //  don//t create progress/report
public const int FOF_RENAMEONCOLLISION =  H8
public const int FOF_NOCONFIRMATION =  H10             //  Don//t prompt the user.
public const int FOF_WANTMAPPINGHANDLE =  H20          //  Fill in SHFILEOPSTRUCT.hNameMappings
                                      //  Must be freed using SHFreeNameMappings
public const int FOF_ALLOWUNDO =  H40
public const int FOF_FILESONLY =  H80                  //  on *.*, do only files
public const int FOF_SIMPLEPROGRESS =  H100            //  means don//t show names of files
public const int FOF_NOCONFIRMMKDIR =  H200            //  don//t confirm making any needed dirs

public const int PO_DELETE =  H13           //  printer is being deleted
public const int PO_RENAME =  H14           //  printer is being renamed
public const int PO_PORTCHANGE =  H20       //  port this printer connected to is being changed
                                //  if this id is set, the strings received by
                                //  the copyhook are a doubly-null terminated
                                //  list of strings.  The first is the printer
                                //  name and the second is the printer port.
public const int PO_REN_PORT =  H34         //  PO_RENAME and PO_PORTCHANGE at same time.

//  no POF_ flags currently defined

//  implicit parameters are:
//       if pFrom or pTo are unqualified names the current directories are
//       taken from the global current drive/directory settings managed
//       by Get/SetCurrentDrive/Directory
//
//       the global confirmation settings

Type SHFILEOPSTRUCT
        hwnd As Long
        wFunc As Long
        pFrom As String
        pTo As String
        fFlags As Integer
        fAnyOperationsAborted As Long
        hNameMappings As Long
        lpszProgressTitle As String //  only used if FOF_SIMPLEPROGRESS
End Type

Public Declare Function SHFileOperation Lib "shell32.dll" Alias "SHFileOperationA" (lpFileOp As SHFILEOPSTRUCT) As Long

Declare Sub SHFreeNameMappings Lib "shell32.dll" Alias "SHFreeNameMappings" (ByVal hNameMappings As Long)

Type SHNAMEMAPPING
        pszOldPath As String
        pszNewPath As String
        cchOldPath As Long
        cchNewPath As Long
End Type

// // End Shell File Operations

// //  Begin ShellExecuteEx and family

//  ShellExecute() and ShellExecuteEx() error codes

//  regular WinExec() codes
public const int SE_ERR_FNF = 2                     //  file not found
public const int SE_ERR_PNF = 3                     //  path not found
public const int SE_ERR_ACCESSDENIED = 5            //  access denied
public const int SE_ERR_OOM = 8                     //  out of memory
public const int SE_ERR_DLLNOTFOUND = 32


//  Note CLASSKEY overrides CLASSNAME
public const int SEE_MASK_CLASSNAME =  H1
public const int SEE_MASK_CLASSKEY =  H3
//  Note INVOKEIDLIST overrides IDLIST
public const int SEE_MASK_IDLIST =  H4
public const int SEE_MASK_INVOKEIDLIST =  HC
public const int SEE_MASK_ICON =  H10
public const int SEE_MASK_HOTKEY =  H20
public const int SEE_MASK_NOCLOSEPROCESS =  H40
public const int SEE_MASK_CONNECTNETDRV =  H80
public const int SEE_MASK_FLAG_DDEWAIT =  H100
public const int SEE_MASK_DOENVSUBST =  H200
public const int SEE_MASK_FLAG_NO_UI =  H400

Type SHELLEXECUTEINFO
        cbSize As Long
        fMask As Long
        hwnd As Long
        lpVerb As String
        lpFile As String
        lpParameters As String
        lpDirectory As String
        nShow As Long
        hInstApp As Long
        //  Optional fields
        lpIDList As Long
        lpClass As String
        hkeyClass As Long
        dwHotKey As Long
        hIcon As Long
        hProcess As Long
End Type

Declare Sub WinExecError Lib "shell32.dll" Alias "WinExecErrorA" (ByVal hwnd As Long, ByVal error As Long, ByVal lpstrFileName As String, ByVal lpstrTitle As String)

// //  End ShellExecuteEx and family

// // Tray notification definitions

Type NOTIFYICONDATA
        cbSize As Long
        hwnd As Long
        uID As Long
        uFlags As Long
        uCallbackMessage As Long
        hIcon As Long
        szTip As String * 64
End Type

public const int NIM_ADD =  H0
public const int NIM_MODIFY =  H1
public const int NIM_DELETE =  H2

public const int NIF_MESSAGE =  H1
public const int NIF_ICON =  H2
public const int NIF_TIP =  H4

Declare Function Shell_NotifyIcon Lib "shell32.dll" Alias " Shell_NotifyIconA" (ByVal dwMessage As Long, lpData As NOTIFYICONDATA) As Long

// // End Tray Notification Icons

// // Begin SHGetFileInfo

//  * The SHGetFileInfo API provides an easy way to get attributes
//  * for a file given a pathname.
//  *
//  *   PARAMETERS
//  *
//  *     pszPath              file name to get info about
//  *     dwFileAttributes     file attribs, only used with SHGFI_USEFILEATTRIBUTES
//  *     psfi                 place to return file info
//  *     cbFileInfo           size of structure
//  *     uFlags               flags
//  *
//  *   RETURN
//  *     TRUE if things worked
//  */

Type SHFILEINFO
        hIcon                      //  out: icon
        iIcon          //  out: icon index
        dwAttributes               //  out: SFGAO_ flags
        szDisplayName As String * MAX_PATH //  out: display name (or path)
        szTypeName As String * 80         //  out: type name
End Type

public const int SHGFI_ICON =  H100                         //  get icon
public const int SHGFI_DISPLAYNAME =  H200                  //  get display name
public const int SHGFI_TYPENAME =  H400                     //  get type name
public const int SHGFI_ATTRIBUTES =  H800                   //  get attributes
public const int SHGFI_ICONLOCATION =  H1000                //  get icon location
public const int SHGFI_EXETYPE =  H2000                     //  return exe type
public const int SHGFI_SYSICONINDEX =  H4000                //  get system icon index
public const int SHGFI_LINKOVERLAY =  H8000                 //  put a link overlay on icon
public const int SHGFI_SELECTED =  H10000                   //  show icon in selected state
public const int SHGFI_LARGEICON =  H0                      //  get large icon
public const int SHGFI_SMALLICON =  H1                      //  get small icon
public const int SHGFI_OPENICON =  H2                       //  get open icon
public const int SHGFI_SHELLICONSIZE =  H4                  //  get shell size icon
public const int SHGFI_PIDL =  H8                           //  pszPath is a pidl
public const int SHGFI_USEFILEATTRIBUTES =  H10             //  use passed dwFileAttribute

Declare Function SHGetFileInfo Lib "shell32.dll" Alias "SHGetFileInfoA" (ByVal pszPath As String, ByVal dwFileAttributes As Long, psfi As SHFILEINFO, ByVal cbFileInfo As Long, ByVal uFlags As Long) As Long

Declare Function SHGetNewLinkInfo Lib "shell32.dll" Alias "SHGetNewLinkInfoA" (ByVal pszLinkto As String, ByVal pszDir As String, ByVal pszName As String, pfMustCopy As Long, ByVal uFlags As Long) As Long

public const int SHGNLI_PIDL =  H1                          //  pszLinkTo is a pidl
public const int SHGNLI_PREFIXNAME =  H2                    //  Make name "Shortcut to xxx"

// // End SHGetFileInfo


// Copyright (C) 1993 - 1995 Microsoft Corporation

// Module Name:

//     winperf.h

// Abstract:

//     Header file for the Performance Monitor data.

//     This file contains the definitions of the data structures returned
//     by the Configuration Registry in response to a request for
//     performance data.  This file is used by both the Configuration
//     Registry and the Performance Monitor to define their interface.
//     The complete interface is described here, except for the name
//     of the node to query in the registry.  It is

//                    HKEY_PERFORMANCE_DATA.

//     By querying that node with a subkey of "Global" the caller will
//     retrieve the structures described here.

//     There is no need to RegOpenKey() the reserved handle HKEY_PERFORMANCE_DATA,
//     but the caller should RegCloseKey() the handle so that network transports
//     and drivers can be removed or installed (which cannot happen while
//     they are open for monitoring.)  Remote requests must first
//     RegConnectRegistry().

// --*/

//   Data structure definitions.

//   In order for data to be returned through the Configuration Registry
//   in a system-independent fashion, it must be self-describing.

//   In the following, all offsets are in bytes.

//
//   Data is returned through the Configuration Registry in a
//   a data block which begins with a _PERF_DATA_BLOCK structure.
//

//   The _PERF_DATA_BLOCK structure is followed by NumObjectTypes of
//   data sections, one for each type of object measured.  Each object
//   type section begins with a _PERF_OBJECT_TYPE structure.


// *****************************************************************************                                                                             *
// * winver.h -    Version management functions, types, and definitions          *
// *                                                                             *
// *               Include file for VER.DLL.  This library is                    *
// *               designed to allow version stamping of Windows executable files*
// *               and of special .VER files for DOS executable files.           *
// *                                                                             *
// *               Copyright (c) 1993, Microsoft Corp.  All rights reserved      *
// *                                                                             *
// \*****************************************************************************/

//  ----- Symbols -----
public const int VS_VERSION_INFO = 1
public const int VS_USER_DEFINED = 100

//  ----- VS_VERSION.dwFileFlags -----
public const int VS_FFI_SIGNATURE =  HFEEF04BD
public const int VS_FFI_STRUCVERSION =  H10000
public const int VS_FFI_FILEFLAGSMASK =  H3F 

//  ----- VS_VERSION.dwFileFlags -----
public const int VS_FF_DEBUG =  H1 
public const int VS_FF_PRERELEASE =  H2 
public const int VS_FF_PATCHED =  H4 
public const int VS_FF_PRIVATEBUILD =  H8 
public const int VS_FF_INFOINFERRED =  H10 
public const int VS_FF_SPECIALBUILD =  H20 

//  ----- VS_VERSION.dwFileOS -----
public const int VOS_UNKNOWN =  H0 
public const int VOS_DOS =  H10000
public const int VOS_OS216 =  H20000
public const int VOS_OS232 =  H30000
public const int VOS_NT =  H40000

public const int VOS__BASE =  H0 
public const int VOS__WINDOWS16 =  H1 
public const int VOS__PM16 =  H2 
public const int VOS__PM32 =  H3 
public const int VOS__WINDOWS32 =  H4 

public const int VOS_DOS_WINDOWS16 =  H10001
public const int VOS_DOS_WINDOWS32 =  H10004
public const int VOS_OS216_PM16 =  H20002
public const int VOS_OS232_PM32 =  H30003
public const int VOS_NT_WINDOWS32 =  H40004

//  ----- VS_VERSION.dwFileType -----
public const int VFT_UNKNOWN =  H0 
public const int VFT_APP =  H1 
public const int VFT_DLL =  H2 
public const int VFT_DRV =  H3 
public const int VFT_FONT =  H4 
public const int VFT_VXD =  H5 
public const int VFT_STATIC_LIB =  H7 

//  ----- VS_VERSION.dwFileSubtype for VFT_WINDOWS_DRV -----
public const int VFT2_UNKNOWN =  H0 
public const int VFT2_DRV_PRINTER =  H1 
public const int VFT2_DRV_KEYBOARD =  H2 
public const int VFT2_DRV_LANGUAGE =  H3 
public const int VFT2_DRV_DISPLAY =  H4 
public const int VFT2_DRV_MOUSE =  H5 
public const int VFT2_DRV_NETWORK =  H6 
public const int VFT2_DRV_SYSTEM =  H7 
public const int VFT2_DRV_INSTALLABLE =  H8 
public const int VFT2_DRV_SOUND =  H9 
public const int VFT2_DRV_COMM =  HA 
public const int VFT2_DRV_INPUTMETHOD =  HB 

//  ----- VS_VERSION.dwFileSubtype for VFT_WINDOWS_FONT -----
public const int VFT2_FONT_RASTER =  H1 
public const int VFT2_FONT_VECTOR =  H2 
public const int VFT2_FONT_TRUETYPE =  H3 

//  ----- VerFindFile() flags -----
public const int VFFF_ISSHAREDFILE =  H1

public const int VFF_CURNEDEST =  H1
public const int VFF_FILEINUSE =  H2
public const int VFF_BUFFTOOSMALL =  H4

//  ----- VerInstallFile() flags -----
public const int VIFF_FORCEINSTALL =  H1
public const int VIFF_DONTDELETEOLD =  H2

public const int VIF_TEMPFILE =  H1 
public const int VIF_MISMATCH =  H2 
public const int VIF_SRCOLD =  H4 

public const int VIF_DIFFLANG =  H8 
public const int VIF_DIFFCODEPG =  H10 
public const int VIF_DIFFTYPE =  H20 

public const int VIF_WRITEPROT =  H40 
public const int VIF_FILEINUSE =  H80 
public const int VIF_OUTOFSPACE =  H100 
public const int VIF_ACCESSVIOLATION =  H200 
public const int VIF_SHARINGVIOLATION =  H400 
public const int VIF_CANNOTCREATE =  H800 
public const int VIF_CANNOTDELETE =  H1000 
public const int VIF_CANNOTRENAME =  H2000 
public const int VIF_CANNOTDELETECUR =  H4000 
public const int VIF_OUTOFMEMORY =  H8000 

public const int VIF_CANNOTREADSRC =  H10000
public const int VIF_CANNOTREADDST =  H20000
public const int VIF_BUFFTOOSMALL =  H40000

//  ----- Types and structures -----

Type VS_FIXEDFILEINFO
        dwSignature As Long
        dwStrucVersion         //  e.g. 0x00000042 = "0.42"
        dwFileVersionMS        //  e.g. 0x00030075 = "3.75"
        dwFileVersionLS        //  e.g. 0x00000031 = "0.31"
        dwProductVersionMS     //  e.g. 0x00030010 = "3.10"
        dwProductVersionLS     //  e.g. 0x00000031 = "0.31"
        dwFileFlagsMask        //  = 0x3F for version "0.42"
        dwFileFlags            //  e.g. VFF_DEBUG Or VFF_PRERELEASE
        dwFileOS               //  e.g. VOS_DOS_WINDOWS16
        dwFileType             //  e.g. VFT_DRIVER
        dwFileSubtype          //  e.g. VFT2_DRV_KEYBOARD
        dwFileDateMS           //  e.g. 0
        dwFileDateLS           //  e.g. 0
End Type

//  ----- Function prototypes -----

Declare Function VerFindFile Lib "version.dll" Alias "VerFindFileA" (ByVal uFlags As Long, ByVal szFileName As String, ByVal szWinDir As String, ByVal szAppDir As String, ByVal szCurDir As String, lpuCurDirLen As Long, ByVal szDestDir As String, lpuDestDirLen As Long) As Long
Declare Function VerInstallFile Lib "version.dll" Alias " VerInstallFileA" (ByVal uFlags As Long, ByVal szSrcFileName As String, ByVal szDestFileName As String, ByVal szSrcDir As String, ByVal szDestDir As String, ByVal szCurDir As String, ByVal szTmpFile As String, lpuTmpFileLen As Long) As Long

//  Returns size of version info in Bytes
Declare Function GetFileVersionInfoSize Lib "version.dll" Alias "GetFileVersionInfoSizeA" (ByVal lptstrFilename As String, lpdwHandle As Long) As Long

//  Read version info into buffer
// /* Length of buffer for info *
// /* Information from GetFileVersionSize *
// /* Filename of version stamped file *
Declare Function GetFileVersionInfo Lib "version.dll"  Alias "GetFileVersionInfoA" (ByVal lptstrFilename As String, ByVal dwHandle As Long, ByVal dwLen As Long, lpData As Any) As Long
Declare Function VerLanguageName Lib "kernel32" Alias "VerLanguageNameA" (ByVal wLang As Long, ByVal szLang As String, ByVal nSize As Long) As Long
Declare Function VerQueryValue Lib "version.dll" Alias "VerQueryValue" (pBlock As Any, ByVal lpSubBlock As String, ByVal lplpBuffer As Long, puLen As Long) As Long

// ***********************************************************************
// *                                                                       *
// *   winbase.h -- This module defines the 32-Bit Windows Base APIs       *
// *                                                                       *
// *   Copyright (c) 1990-1995, Microsoft Corp. All rights reserved.       *
// *                                                                       *
// ************************************************************************/
Type ICONMETRICS
	cbSize As Long
	iHorzSpacing As Long
	iVertSpacing As Long
	iTitleWrap As Long
	lfFont As LOGFONT
End Type

Type HELPINFO
	cbSize As Long
	iContextType As Long
	iCtrlId As Long
	hItemHandle As Long
	dwContextId As Long
	MousePos As POINTAPI
End Type

Type ANIMATIONINFO
	cbSize As Long
	iMinAnimate As Long
End Type

Type MINIMIZEDMETRICS
	cbSize As Long
	iWidth As Long
	iHorzGap As Long
	iVertGap As Long
	iArrange As Long
	lfFont As LOGFONT
End Type

//  Define API decoration for direct importing of DLL references.
Declare Function HeapValidate Lib "kernel32" Alias "HeapValidate" (ByVal hHeap As Long, ByVal dwFlags As Long, lpMem As Any) As Long
Declare Function HeapCompact Lib "kernel32" Alias "HeapCompact" (ByVal hHeap As Long, ByVal dwFlags As Long) As Long

public const int PROCESS_HEAP_REGION =  H1
public const int PROCESS_HEAP_UNCOMMITTED_RANGE =  H2
public const int PROCESS_HEAP_ENTRY_BUSY =  H4
public const int PROCESS_HEAP_ENTRY_MOVEABLE =  H10
public const int PROCESS_HEAP_ENTRY_DDESHARE =  H20

Declare Function HeapLock Lib "kernel32" Alias "HeapLock" (ByVal hHeap As Long) As Long
Declare Function HeapUnlock Lib "kernel32" Alias "HeapUnlock" (ByVal hHeap As Long) As Long

//  GetBinaryType return values.

public const int SCS_32BIT_BINARY = 0
public const int SCS_DOS_BINARY = 1
public const int SCS_WOW_BINARY = 2
public const int SCS_PIF_BINARY = 3
public const int SCS_POSIX_BINARY = 4
public const int SCS_OS216_BINARY = 5

Declare Function GetBinaryType Lib "kernel32" Alias "GetBinaryTypeA" (ByVal lpApplicationName As String, lpBinaryType As Long) As Long

Declare Function GetShortPathName Lib "kernel32" Alias "GetShortPathNameA" (ByVal lpszLongPath As String, ByVal lpszShortPath As String, ByVal cchBuffer As Long) As Long
Declare Function GetProcessAffinityMask Lib "kernel32" Alias "GetProcessAffinityMask" (ByVal hProcess As Long, lpProcessAffinityMask As Long, SystemAffinityMask As Long) As Long

//  Logon Support APIs

public const int LOGON32_LOGON_INTERACTIVE = 2
public const int LOGON32_LOGON_BATCH = 4
public const int LOGON32_LOGON_SERVICE = 5

public const int LOGON32_PROVIDER_DEFAULT = 0
public const int LOGON32_PROVIDER_WINNT35 = 1

Declare Function LogonUser Lib "kernel32" Alias "LogonUserA" (ByVal lpszUsername As String, ByVal lpszDomain As String, ByVal lpszPassword As String, ByVal dwLogonType As Long, ByVal dwLogonProvider As Long, phToken As Long) As Long

Declare Function ImpersonateLoggedOnUser Lib "AdvApi32" Alias "ImpersonateLoggedOnUser" (ByVal hToken As Long) As Long
Declare Function CreateProcessAsUser Lib "advapi32.dll" Alias "CreateProcessAsUserA" (ByVal hToken As Long, ByVal lpApplicationName As String, ByVal lpCommandLine As String, ByVal lpProcessAttributes As SECURITY_ATTRIBUTES, ByVal lpThreadAttributes As SECURITY_ATTRIBUTES, ByVal bInheritHandles As Long, ByVal dwCreationFlags As Long, ByVal lpEnvironment As String, ByVal lpCurrentDirectory As String, ByVal lpStartupInfo As STARTUPINFO, ByVal lpProcessInformation As PROCESS_INFORMATION) As Long

//  Performance counter API//s

Type OSVERSIONINFO
        dwOSVersionInfoSize As Long
        dwMajorVersion As Long
        dwMinorVersion As Long
        dwBuildNumber As Long
        dwPlatformId As Long
        szCSDVersion As String * 128      //  Maintenance string for PSS usage
End Type

//  dwPlatformId defines:
//
public const int VER_PLATFORM_WIN32s = 0
public const int VER_PLATFORM_WIN32_WINDOWS = 1
public const int VER_PLATFORM_WIN32_NT = 2

Declare Function GetVersionEx Lib "kernel32" Alias "GetVersionExA" (lpVersionInformation As OSVERSIONINFO) As Long

//  Power Management APIs

public const int AC_LINE_OFFLINE =  H0
public const int AC_LINE_ONLINE =  H1
public const int AC_LINE_BACKUP_POWER =  H2
public const int AC_LINE_UNKNOWN =  HFF
public const int BATTERY_FLAG_HIGH =  H1
public const int BATTERY_FLAG_LOW =  H2
public const int BATTERY_FLAG_CRITICAL =  H4
public const int BATTERY_FLAG_CHARGING =  H8
public const int BATTERY_FLAG_NO_BATTERY =  H80
public const int BATTERY_FLAG_UNKNOWN =  HFF
public const int BATTERY_PERCENTAGE_UNKNOWN =  HFF
public const int BATTERY_LIFE_UNKNOWN =  HFFFF

Type SYSTEM_POWER_STATUS
        ACLineStatus As Byte
        BatteryFlag As Byte
        BatteryLifePercent As Byte
        Reserved1 As Byte
        BatteryLifeTime As Long
        BatteryFullLifeTime As Long
End Type

Declare Function GetSystemPowerStatus Lib "kernel32" Alias "GetSystemPowerStatus" (lpSystemPowerStatus As SYSTEM_POWER_STATUS) As Long
Declare Function SetSystemPowerState Lib "kernel32" Alias "SetSystemPowerState" (ByVal fSuspend As Long, ByVal fForce As Long) As Long

// *   commdlg.h -- This module defines the 32-Bit Common Dialog APIs      *

Type OPENFILENAME
        lStructSize As Long
        hwndOwner As Long
        hInstance As Long
        lpstrFilter As String
        lpstrCustomFilter As String
        nMaxCustFilter As Long
        nFilterIndex As Long
        lpstrFile As String
        nMaxFile As Long
        lpstrFileTitle As String
        nMaxFileTitle As Long
        lpstrInitialDir As String
        lpstrTitle As String
        flags As Long
        nFileOffset As Integer
        nFileExtension As Integer
        lpstrDefExt As String
        lCustData As Long
        lpfnHook As Long
        lpTemplateName As String
End Type

Declare Function GetOpenFileName Lib "comdlg32.dll" Alias "GetOpenFileNameA" (pOpenfilename As OPENFILENAME) As Long

Declare Function GetSaveFileName Lib "comdlg32.dll" Alias "GetSaveFileNameA" (pOpenfilename As OPENFILENAME) As Long

Declare Function GetFileTitle Lib "comdlg32.dll" Alias "GetFileTitleA" (ByVal lpszFile As String, ByVal lpszTitle As String, ByVal cbBuf As Integer) As Integer

public const int OFN_READONLY =  H1
public const int OFN_OVERWRITEPROMPT =  H2
public const int OFN_HIDEREADONLY =  H4
public const int OFN_NOCHANGEDIR =  H8
public const int OFN_SHOWHELP =  H10
public const int OFN_ENABLEHOOK =  H20
public const int OFN_ENABLETEMPLATE =  H40
public const int OFN_ENABLETEMPLATEHANDLE =  H80
public const int OFN_NOVALIDATE =  H100
public const int OFN_ALLOWMULTISELECT =  H200
public const int OFN_EXTENSIONDIFFERENT =  H400
public const int OFN_PATHMUSTEXIST =  H800
public const int OFN_FILEMUSTEXIST =  H1000
public const int OFN_CREATEPROMPT =  H2000
public const int OFN_SHAREAWARE =  H4000
public const int OFN_NOREADONLYRETURN =  H8000
public const int OFN_NOTESTFILECREATE =  H10000
public const int OFN_NONETWORKBUTTON =  H20000
public const int OFN_NOLONGNAMES =  H40000                      //  force no long names for 4.x modules
public const int OFN_EXPLORER =  H80000                         //  new look commdlg
public const int OFN_NODEREFERENCELINKS =  H100000
public const int OFN_LONGNAMES =  H200000                       //  force long names for 3.x modules

public const int OFN_SHAREFALLTHROUGH = 2
public const int OFN_SHARENOWARN = 1
public const int OFN_SHAREWARN = 0

Type NMHDR
    hwndFrom As Long
    idfrom As Long
    code As Long
End Type

Type OFNOTIFY
        hdr As NMHDR
        lpOFN As OPENFILENAME
        pszFile As String        //  May be NULL
End Type

public const int CDM_FIRST = (WM_USER + 100)
public const int CDM_LAST = (WM_USER + 200)
public const int CDM_GETSPEC = (CDM_FIRST +  H0)
public const int CDM_GETFILEPATH = (CDM_FIRST +  H1)
public const int CDM_GETFOLDERPATH = (CDM_FIRST +  H2)
public const int CDM_GETFOLDERIDLIST = (CDM_FIRST +  H3)
public const int CDM_SETCONTROLTEXT = (CDM_FIRST +  H4)
public const int CDM_HIDECONTROL = (CDM_FIRST +  H5)
public const int CDM_SETDEFEXT = (CDM_FIRST +  H6)

Type CHOOSECOLOR
        lStructSize As Long
        hwndOwner As Long
        hInstance As Long
        rgbResult As Long
        lpCustColors As Long
        flags As Long
        lCustData As Long
        lpfnHook As Long
        lpTemplateName As String
End Type

Declare Function ChooseColor Lib "comdlg32.dll" Alias "ChooseColorA" (pChoosecolor As CHOOSECOLOR) As Long

public const int CC_RGBINIT =  H1
public const int CC_FULLOPEN =  H2
public const int CC_PREVENTFULLOPEN =  H4
public const int CC_SHOWHELP =  H8
public const int CC_ENABLEHOOK =  H10
public const int CC_ENABLETEMPLATE =  H20
public const int CC_ENABLETEMPLATEHANDLE =  H40
public const int CC_SOLIDCOLOR =  H80
public const int CC_ANYCOLOR =  H100

Type FINDREPLACE
        lStructSize        //  size of this struct 0x20
        hwndOwner          //  handle to owner//s window
        hInstance          //  instance handle of.EXE that
                                    //    contains cust. dlg. template
        flags              //  one or more of the FR_??
        lpstrFindWhat As String      //  ptr. to search string
        lpstrReplaceWith As String   //  ptr. to replace string
        wFindWhatLen As Integer       //  size of find buffer
        wReplaceWithLen As Integer    //  size of replace buffer
        lCustData          //  data passed to hook fn.
        lpfnHook            //  ptr. to hook fn. or NULL
        lpTemplateName As String     //  custom template name
End Type

public const int FR_DOWN =  H1
public const int FR_WHOLEWORD =  H2
public const int FR_MATCHCASE =  H4
public const int FR_FINDNEXT =  H8
public const int FR_REPLACE =  H10
public const int FR_REPLACEALL =  H20
public const int FR_DIALOGTERM =  H40
public const int FR_SHOWHELP =  H80
public const int FR_ENABLEHOOK =  H100
public const int FR_ENABLETEMPLATE =  H200
public const int FR_NOUPDOWN =  H400
public const int FR_NOMATCHCASE =  H800
public const int FR_NOWHOLEWORD =  H1000
public const int FR_ENABLETEMPLATEHANDLE =  H2000
public const int FR_HIDEUPDOWN =  H4000
public const int FR_HIDEMATCHCASE =  H8000
public const int FR_HIDEWHOLEWORD =  H10000

Declare Function FindText Lib "comdlg32.dll" Alias "FindTextA " (pFindreplace As FINDREPLACE) As Long

Declare Function ReplaceText Lib "comdlg32.dll" Alias "ReplaceTextA" (pFindreplace As FINDREPLACE) As Long

Type CHOOSEFONT
        lStructSize As Long
        hwndOwner          //  caller//s window handle
        hdc                //  printer DC/IC or NULL
        lpLogFont As Long
        iPointSize         //  10 * size in points of selected font
        flags              //  enum. type flags
        rgbColors          //  returned text color
        lCustData          //  data passed to hook fn.
        lpfnHook           //  ptr. to hook function
        lpTemplateName As String     //  custom template name
        hInstance          //  instance handle of.EXE that
                                       //    contains cust. dlg. template
        lpszStyle As String          //  return the style field here
                                       //  must be LF_FACESIZE or bigger
        nFontType As Integer          //  same value reported to the EnumFonts
                                       //    call back with the extra FONTTYPE_
                                       //    bits added
        MISSING_ALIGNMENT As Integer
        nSizeMin           //  minimum pt size allowed  
        nSizeMax           //  max pt size allowed if
                                       //    CF_LIMITSIZE is used
End Type

Declare Function ChooseFont Lib "comdlg32.dll" Alias "ChooseFontA" (pChoosefont As CHOOSEFONT) As Long

public const int CF_SCREENFONTS =  H1
public const int CF_PRINTERFONTS =  H2
public const int CF_BOTH = (CF_SCREENFONTS Or CF_PRINTERFONTS)
public const int CF_SHOWHELP =  H4 
public const int CF_ENABLEHOOK =  H8 
public const int CF_ENABLETEMPLATE =  H10 
public const int CF_ENABLETEMPLATEHANDLE =  H20 
public const int CF_INITTOLOGFONTSTRUCT =  H40 
public const int CF_USESTYLE =  H80 
public const int CF_EFFECTS =  H100 
public const int CF_APPLY =  H200 
public const int CF_ANSIONLY =  H400 
public const int CF_SCRIPTSONLY = CF_ANSIONLY
public const int CF_NOVECTORFONTS =  H800 
public const int CF_NOOEMFONTS = CF_NOVECTORFONTS
public const int CF_NOSIMULATIONS =  H1000 
public const int CF_LIMITSIZE =  H2000 
public const int CF_FIXEDPITCHONLY =  H4000 
public const int CF_WYSIWYG =  H8000 //  must also have CF_SCREENFONTS CF_PRINTERFONTS
public const int CF_FORCEFONTEXIST =  H10000
public const int CF_SCALABLEONLY =  H20000
public const int CF_TTONLY =  H40000
public const int CF_NOFACESEL =  H80000
public const int CF_NOSTYLESEL =  H100000
public const int CF_NOSIZESEL =  H200000
public const int CF_SELECTSCRIPT =  H400000
public const int CF_NOSCRIPTSEL =  H800000
public const int CF_NOVERTFONTS =  H1000000

public const int SIMULATED_FONTTYPE =  H8000
public const int PRINTER_FONTTYPE =  H4000
public const int SCREEN_FONTTYPE =  H2000
public const int BOLD_FONTTYPE =  H100
public const int ITALIC_FONTTYPE =  H200
public const int REGULAR_FONTTYPE =  H400

public const int WM_CHOOSEFONT_GETLOGFONT = (WM_USER + 1)
public const int WM_CHOOSEFONT_SETLOGFONT = (WM_USER + 101)
public const int WM_CHOOSEFONT_SETFLAGS = (WM_USER + 102)

public const int LBSELCHSTRING = "commdlg_LBSelChangedNotify"
public const int SHAREVISTRING = "commdlg_ShareViolation"
public const int FILEOKSTRING = "commdlg_FileNameOK"
public const int COLOROKSTRING = "commdlg_ColorOK"
public const int SETRGBSTRING = "commdlg_SetRGBColor"
public const int HELPMSGSTRING = "commdlg_help"
public const int FINDMSGSTRING = "commdlg_FindReplace"

public const int CD_LBSELNOITEMS = -1
public const int CD_LBSELCHANGE = 0
public const int CD_LBSELSUB = 1
public const int CD_LBSELADD = 2

Type PRINTDLG
        lStructSize As Long
        hwndOwner As Long
        hDevMode As Long
        hDevNames As Long
        hdc As Long
        flags As Long
        nFromPage As Integer
        nToPage As Integer
        nMinPage As Integer
        nMaxPage As Integer
        nCopies As Integer
        hInstance As Long
        lCustData As Long
        lpfnPrintHook As Long
        lpfnSetupHook As Long
        lpPrintTemplateName As String
        lpSetupTemplateName As String
        hPrintTemplate As Long
        hSetupTemplate As Long
End Type

Declare Function PrintDlg Lib "comdlg32.dll" Alias "PrintDlgA" (pPrintdlg As PRINTDLG) As Long

public const int PD_ALLPAGES =  H0
public const int PD_SELECTION =  H1
public const int PD_PAGENUMS =  H2
public const int PD_NOSELECTION =  H4
public const int PD_NOPAGENUMS =  H8
public const int PD_COLLATE =  H10
public const int PD_PRINTTOFILE =  H20
public const int PD_PRINTSETUP =  H40
public const int PD_NOWARNING =  H80
public const int PD_RETURNDC =  H100
public const int PD_RETURNIC =  H200
public const int PD_RETURNDEFAULT =  H400
public const int PD_SHOWHELP =  H800
public const int PD_ENABLEPRINTHOOK =  H1000
public const int PD_ENABLESETUPHOOK =  H2000
public const int PD_ENABLEPRINTTEMPLATE =  H4000
public const int PD_ENABLESETUPTEMPLATE =  H8000
public const int PD_ENABLEPRINTTEMPLATEHANDLE =  H10000
public const int PD_ENABLESETUPTEMPLATEHANDLE =  H20000
public const int PD_USEDEVMODECOPIES =  H40000
public const int PD_USEDEVMODECOPIESANDCOLLATE =  H40000
public const int PD_DISABLEPRINTTOFILE =  H80000
public const int PD_HIDEPRINTTOFILE =  H100000
public const int PD_NONETWORKBUTTON =  H200000

Type DEVNAMES
        wDriverOffset As Integer
        wDeviceOffset As Integer
        wOutputOffset As Integer
        wDefault As Integer
End Type

public const int DN_DEFAULTPRN =  H1

Declare Function CommDlgExtendedError Lib "comdlg32.dll" Alias "CommDlgExtendedError" () As Long

public const int WM_PSD_PAGESETUPDLG = (WM_USER)
public const int WM_PSD_FULLPAGERECT = (WM_USER + 1)
public const int WM_PSD_MINMARGINRECT = (WM_USER + 2)
public const int WM_PSD_MARGINRECT = (WM_USER + 3)
public const int WM_PSD_GREEKTEXTRECT = (WM_USER + 4)
public const int WM_PSD_ENVSTAMPRECT = (WM_USER + 5)
public const int WM_PSD_YAFULLPAGERECT = (WM_USER + 6)

Type PAGESETUPDLG
        lStructSize As Long
        hwndOwner As Long
        hDevMode As Long
        hDevNames As Long
        flags As Long
        ptPaperSize As POINTAPI
        rtMinMargin As Rect
        rtMargin As Rect
        hInstance As Long
        lCustData As Long
        lpfnPageSetupHook As Long
        lpfnPagePaintHook As Long
        lpPageSetupTemplateName As String
        hPageSetupTemplate As Long
End Type

Declare Function PageSetupDlg Lib "comdlg32.dll" Alias "PageSetupDlgA" (pPagesetupdlg As PAGESETUPDLG) As Long

public const int PSD_DEFAULTMINMARGINS =  H0 //  default (printer//s)
public const int PSD_INWININIINTLMEASURE =  H0 //  1st of 4 possible

public const int PSD_MINMARGINS =  H1 //  use caller//s
public const int PSD_MARGINS =  H2 //  use caller//s
public const int PSD_INTHOUSANDTHSOFINCHES =  H4 //  2nd of 4 possible
public const int PSD_INHUNDREDTHSOFMILLIMETERS =  H8 //  3rd of 4 possible
public const int PSD_DISABLEMARGINS =  H10
public const int PSD_DISABLEPRINTER =  H20
public const int PSD_NOWARNING =  H80 //  must be same as PD_*
public const int PSD_DISABLEORIENTATION =  H100
public const int PSD_RETURNDEFAULT =  H400 //  must be same as PD_*
public const int PSD_DISABLEPAPER =  H200
public const int PSD_SHOWHELP =  H800 //  must be same as PD_*
public const int PSD_ENABLEPAGESETUPHOOK =  H2000 //  must be same as PD_*
public const int PSD_ENABLEPAGESETUPTEMPLATE =  H8000 //  must be same as PD_*
public const int PSD_ENABLEPAGESETUPTEMPLATEHANDLE =  H20000 //  must be same as PD_*
public const int PSD_ENABLEPAGEPAINTHOOK =  H40000
public const int PSD_DISABLEPAGEPAINTING =  H80000
public const int INVALID_HANDLE_VALUE = -1
//DrawEdge public const intants
public const int BDR_RAISEDOUTER =  H1
public const int BDR_SUNKENOUTER =  H2
public const int BDR_RAISEDINNER =  H4
public const int BDR_SUNKENINNER =  H8

public const int BDR_OUTER =  H3
public const int BDR_INNER =  HC
public const int BDR_RAISED =  H5
public const int BDR_SUNKEN =  HA

public const int EDGE_RAISED = (BDR_RAISEDOUTER Or BDR_RAISEDINNER)
public const int EDGE_SUNKEN = (BDR_SUNKENOUTER Or BDR_SUNKENINNER)
public const int EDGE_ETCHED = (BDR_SUNKENOUTER Or BDR_RAISEDINNER)
public const int EDGE_BUMP = (BDR_RAISEDOUTER Or BDR_SUNKENINNER)

public const int BF_LEFT =  H1
public const int BF_TOP =  H2
public const int BF_RIGHT =  H4
public const int BF_BOTTOM =  H8

public const int BF_TOPLEFT = (BF_TOP Or BF_LEFT)
public const int BF_TOPRIGHT = (BF_TOP Or BF_RIGHT)
public const int BF_BOTTOMLEFT = (BF_BOTTOM Or BF_LEFT)
public const int BF_BOTTOMRIGHT = (BF_BOTTOM Or BF_RIGHT)
public const int BF_RECT = (BF_LEFT Or BF_TOP Or BF_RIGHT Or BF_BOTTOM)

public const int BF_DIAGONAL =  H10

public const int BF_DIAGONAL_ENDTOPRIGHT = (BF_DIAGONAL Or BF_TOP Or BF_RIGHT)
public const int BF_DIAGONAL_ENDTOPLEFT = (BF_DIAGONAL Or BF_TOP Or BF_LEFT)
public const int BF_DIAGONAL_ENDBOTTOMLEFT = (BF_DIAGONAL Or BF_BOTTOM Or BF_LEFT)
public const int BF_DIAGONAL_ENDBOTTOMRIGHT = (BF_DIAGONAL Or BF_BOTTOM Or BF_RIGHT)

public const int BF_MIDDLE =  H800    // Fill in the middle.
public const int BF_SOFT =  H1000     // Use for softer buttons.
public const int BF_ADJUST =  H2000   // Calculate the space left over.
public const int BF_FLAT =  H4000     // For flat rather than 3-D borders.
public const int BF_MONO =  H8000     // For monochrome borders.

public const int PAGE_NOACCESS =  H1
public const int PAGE_READONLY =  H2
public const int PAGE_READWRITE =  H4
public const int PAGE_WRITECOPY =  H8
public const int PAGE_EXECUTE =  H10
public const int PAGE_EXECUTE_READ =  H20
public const int PAGE_EXECUTE_READWRITE =  H40
public const int PAGE_EXECUTE_WRITECOPY =  H80
public const int PAGE_GUARD =  H100
public const int PAGE_NOCACHE =  H200
public const int INTERNET_OPTION_VERSION = 40	//Returns the version number of Wininet.dll.
public const int INTERNET_OPEN_TYPE_PRECONFIG = 0	//Indicates to use config info from registry
public const int INTERNET_DEFAULT_FTP_PORT = 21	//Number of the TCP/IP port on the server to connect to.
public const int INTERNET_DEFAULT_GOPHER_PORT = 70
public const int INTERNET_DEFAULT_HTTP_PORT = 80
public const int INTERNET_DEFAULT_HTTPS_PORT = 443
public const int INTERNET_DEFAULT_SOCKS_PORT = 1080
public const int INTERNET_SERVICE_FTP = 1		//
public const int INTERNET_SERVICE_GOPHER = 2	//Type of service to access.
public const int INTERNET_SERVICE_HTTP = 3		//
public const int INTERNET_FLAG_PASSIVE =  H8000000
public const int INTERNET_FLAG_EXISITING_CONNECT =  H20000000
public const int INTERNET_FLAG_RELOAD =  H80000000 //read from wire even if locally cached
public const int INTERNET_FLAG_ASYNC =  H10000000  //this request is asynchronous (where supported)

Declare Function InternetOpen Lib "wininet.dll" Alias "InternetOpenA" (ByVal lpszAgent As String, ByVal dwAccessType As Long, ByVal lpszProxyName As String, ByVal lpszProxyBypass As String, ByVal dwFlags As Long) As Long
Declare Function InternetConnect Lib "wininet.dll" Alias "InternetConnectA" (ByVal hInternetSession As Long, ByVal sServerName As String, ByVal nServerPort As Integer, ByVal sUsername As String, ByVal sPassword As String, ByVal lService As Long, ByVal lFlags As Long, ByVal lContext As Long) As Long
Declare Function InternetCloseHandle Lib "wininet.dll" (ByVal hInet As Long) As Integer
Declare Function InternetOpenUrl Lib "wininet.dll" Alias "InternetOpenUrlA" (ByVal hInet As Long, ByVal lpszUrl As String, ByVal lpszHeaders As String, ByVal dwHeadersLength As Long, ByVal dwFlags As Long, ByVal dwContext As Long) As Long
Declare Function InternetReadFile Lib "wininet.dll" (ByVal hFile As Long, ByVal lpBuffer As String, ByVal dwNumberOfBytesToRead As Long, lNumberOfBytesRead As Long) As Integer
Declare Function InternetQueryOption Lib "wininet.dll" Alias "InternetQueryOptionA" (ByVal hInternet As Long, ByVal lOption As Long, ByRef sBuffer As Any, ByRef lBufferLength As Long) As Integer
Declare Function InternetSetStatusCallback Lib "wininet.dll" (ByVal hInternet As Long, ByVal lpfnCallback As Long) As Long

// HTTP FOR WININET 

Declare Function HttpOpenRequest Lib "wininet.dll" Alias "HttpOpenRequestA" (ByVal hHttpSession As Long, ByVal sVerb As String, ByVal sObjectName As String, ByVal sVersion As String, ByVal sReferer As String, ByVal something As Long, ByVal lFlags As Long, ByVal lContext As Long) As Long
Declare Function HttpSendRequest Lib "wininet.dll" Alias "HttpSendRequestA" (ByVal hHttpRequest As Long, ByVal sHeaders As String, ByVal lHeadersLength As Long, sOptional As Any, ByVal lOptionalLength As Long) As Integer
Declare Function HttpQueryInfo Lib "wininet.dll" Alias "HttpQueryInfoA" (ByVal hHttpRequest As Long, ByVal lInfoLevel As Long, ByRef sBuffer As Any, ByRef lBufferLength As Long, ByRef lIndex As Long) As Integer
Declare Function HttpAddRequestHeaders Lib "wininet.dll" Alias "HttpAddRequestHeadersA" (ByVal hHttpRequest As Long, ByVal sHeaders As String, ByVal lHeadersLength As Long, ByVal lModifiers As Long) As Integer

//The possible values for the lInfoLevel parameter:
public const int HTTP_QUERY_CONTENT_TYPE = 1
public const int HTTP_QUERY_CONTENT_LENGTH = 5
public const int HTTP_QUERY_EXPIRES = 10
public const int HTTP_QUERY_LAST_MODIFIED = 11
public const int HTTP_QUERY_PRAGMA = 17
public const int HTTP_QUERY_VERSION = 18
public const int HTTP_QUERY_STATUS_CODE = 19
public const int HTTP_QUERY_STATUS_TEXT = 20
public const int HTTP_QUERY_RAW_HEADERS = 21
public const int HTTP_QUERY_RAW_HEADERS_CRLF = 22
public const int HTTP_QUERY_FORWARDED = 30
public const int HTTP_QUERY_SERVER = 37
public const int HTTP_QUERY_USER_AGENT = 39
public const int HTTP_QUERY_SET_COOKIE = 43
public const int HTTP_QUERY_REQUEST_METHOD = 45
//Add this flag to the about flags to get request header.
public const int HTTP_QUERY_FLAG_REQUEST_HEADERS =  H80000000
public const int HTTP_ADDREQ_FLAG_ADD_IF_NEW =  H10000000
public const int HTTP_ADDREQ_FLAG_ADD =  H20000000
public const int HTTP_ADDREQ_FLAG_REPLACE =  H80000000
public const int DT_EDITCONTROL   =  H2000 
public const int DT_PATH_ELLIPSIS =  H4000 
public const int DT_END_ELLIPSIS  =  H8000 
public const int DT_MODIFYSTRING  =  H10000
public const int DT_RTLREADING    =  H20000
public const int DT_WORD_ELLIPSIS =  H40000

//
public const int EM_GETLIMITTEXT =  H425
public const int EM_POSFROMCHAR =  H426
public const int EM_CHARFROMPOS =  H427
//public const int EM_SCROLLCARET =  H431
public const int EM_CANPASTE =  H432
public const int EM_DISPLAYBAND =  H433
public const int EM_EXGETSEL =  H434
public const int EM_EXLIMITTEXT =  H435
public const int EM_EXLINEFROMCHAR =  H436
public const int EM_EXSETSEL =  H437
public const int EM_FINDTEXT =  H438
public const int EM_FORMATRANGE =  H439
public const int EM_GETCHARFORMAT =  H43A
public const int EM_GETEVENTMASK =  H43B
public const int EM_GETOLEINTERFACE =  H43C
public const int EM_GETPARAFORMAT =  H43D
public const int EM_GETSELTEXT =  H43E
public const int EM_HIDESELECTION =  H43F
public const int EM_PASTESPECIAL =  H440
public const int EM_REQUESTRESIZE =  H441
public const int EM_SELECTIONTYPE =  H442
public const int EM_SETBKGNDCOLOR =  H443
public const int EM_SETCHARFORMAT =  H444
public const int EM_SETEVENTMASK =  H445
public const int EM_SETOLECALLBACK =  H446
public const int EM_SETPARAFORMAT =  H447
public const int EM_SETTARGETDEVICE =  H448
public const int EM_STREAMIN =  H449
public const int EM_STREAMOUT =  H44A
public const int EM_GETTEXTRANGE =  H44B
public const int EM_FINDWORDBREAK =  H44C
public const int EM_SETOPTIONS =  H44D
public const int EM_GETOPTIONS =  H44E
public const int EM_FINDTEXTEX =  H44F
public const int EM_SETUNDOLIMIT =  H452
public const int EM_REDO =  H454
public const int EM_CANREDO =  H455
public const int EM_GETUNDONAME =  H456
public const int EM_GETREDONAME =  H457
public const int EM_STOPGROUPTYPING =  H458
public const int EM_SETTEXTMODE =  H459
public const int EM_GETTEXTMODE =  H45A

public const int BIF_RETURNONLYFSDIRS = 1        //For finding a folder to start document searching
public const int BIF_DONTGOBELOWDOMAIN = 2       //For starting the Find Computer
public const int BIF_STATUSTEXT = 4              //Top of the dialog has 2 lines of text for BROWSEINFO.lpszTitle and one line if
                                              //this flag is set.  Passing the message BFFM_SETSTATUSTEXTA to the hwnd can set the
                                              //rest of the text.  This is not used with BIF_USENEWUI and BROWSEINFO.lpszTitle gets
                                              //all three lines of text.
public const int BIF_RETURNFSANCESTORS = 8
public const int BIF_EDITBOX = 16                //Add an editbox to the dialog.  Always on with BIF_USENEWUI
public const int BIF_VALIDATE = 32               //insist on valid result (or CANCEL)
public const int BIF_USENEWUI = 64               //Use the new dialog layout with the ability to resize.
                                              //Caller needs to call OleInitialize() before using this API.
public const int BIF_BROWSEINCLUDEURLS = 128     //Allow URLs to be displayed or entered. (Requires BIF_USENEWUI)

public const int BIF_BROWSEFORCOMPUTER = 4096    //Browsing for Computers.
public const int BIF_BROWSEFORPRINTER = 8192     //Browsing for Printers
public const int BIF_BROWSEINCLUDEFILES = 16384  //Browsing for Everything
public const int BIF_SHAREABLE = 32768           //sharable resources displayed (remote shares, requires BIF_USENEWUI)
public const int SQL_NTS = -3                  //  NTS = Null Terminated String
public const int SQL_SQLSTATE_SIZE = 5         //  size of SQLSTATE
public const int SQL_MAX_MESSAGE_LENGTH = 512  //  message buffer size
public const int SQL_MAX_DSN_LENGTH = 32       //  maximum data source name size
//  RETCODEs
public const int SQL_ERROR = -1
public const int SQL_INVALID_HANDLE = -2
public const int SQL_NO_DATA_FOUND = 100
public const int SQL_SUCCESS = 0
public const int SQL_SUCCESS_WITH_INFO = 1
//  SQLFreeStmt defines
public const int SQL_CLOSE = 0
public const int SQL_DROP = 1
public const int SQL_UNBIND = 2
public const int SQL_RESET_PARAMS = 3
//  SQLSetParam defines
public const int SQL_C_DEFAULT = 99
//  SQLTransact defines
public const int SQL_COMMIT = 0
public const int SQL_ROLLBACK = 1
//  Standard SQL datatypes, using ANSI type numbering
public const int SQL_CHAR = 1
public const int SQL_NUMERIC = 2
public const int SQL_DECIMAL = 3
public const int SQL_INTEGER = 4
public const int SQL_SMALLINT = 5
public const int SQL_FLOAT = 6
public const int SQL_REAL = 7
public const int SQL_DOUBLE = 8
public const int SQL_VARCHAR = 12
public const int SQL_TYPE_MIN = 1
public const int SQL_TYPE_NULL = 0
public const int SQL_TYPE_MAX = 12
//  C datatype to SQL datatype mapping    SQL types
public const int SQL_C_CHAR = SQL_CHAR         //  CHAR, VARCHAR, DECIMAL, NUMERIC
public const int SQL_C_LONG = SQL_INTEGER      //  INTEGER
public const int SQL_C_SHORT = SQL_SMALLINT    //  SMALLINT
public const int SQL_C_FLOAT = SQL_REAL        //  REAL
public const int SQL_C_DOUBLE = SQL_DOUBLE     //  FLOAT, DOUBLE
//
//  NULL status public const intants.  These are used in SQLColumns, SQLColAttributes,
//  SQLDescribeCol, and SQLSpecialColumns to describe the nullablity of a
//  column in a table.  SQL_NULLABLE_UNKNOWN can be returned only by
//  SQLDescribeCol or SQLColAttributes.  It is used when the DBMS//s meta-data
//  does not contain this info.
//
public const int SQL_NO_NULLS = 0
public const int SQL_NULLABLE = 1
public const int SQL_NULLABLE_UNKNOWN = 2
//  Special length values
public const int SQL_NULL_DATA = -1
public const int SQL_DATA_AT_EXEC = -2
//  SQLColAttributes defines
public const int SQL_COLUMN_COUNT = 0
public const int SQL_COLUMN_NAME = 1
public const int SQL_COLUMN_TYPE = 2
public const int SQL_COLUMN_LENGTH = 3
public const int SQL_COLUMN_PRECISION = 4
public const int SQL_COLUMN_SCALE = 5
public const int SQL_COLUMN_DISPLAY_SIZE = 6
public const int SQL_COLUMN_NULLABLE = 7
public const int SQL_COLUMN_UNSIGNED = 8
public const int SQL_COLUMN_MONEY = 9
public const int SQL_COLUMN_UPDATABLE = 10
public const int SQL_COLUMN_AUTO_INCREMENT = 11
public const int SQL_COLUMN_CASE_SENSITIVE = 12
public const int SQL_COLUMN_SEARCHABLE = 13
public const int SQL_COLUMN_TYPE_NAME = 14
public const int SQL_COLUMN_TABLE_NAME = 15
public const int SQL_COLUMN_OWNER_NAME = 16
public const int SQL_COLUMN_QUALIFIER_NAME = 17
public const int SQL_COLUMN_LABEL = 18
public const int SQL_COLATT_OPT_MAX = SQL_COLUMN_LABEL
//  SQLColAttributes subdefines for SQL_COLUMN_UPDATABLE
public const int SQL_ATTR_READONLY = 0
public const int SQL_ATTR_WRITE = 1
public const int SQL_ATTR_READWRITE_UNKNOWN = 2
//  SQLColAttributes subdefines for SQL_COLUMN_SEARCHABLE
//  These are also used by SQLGetInfo
public const int SQL_UNSEARCHABLE = 0
public const int SQL_LIKE_ONLY = 1
public const int SQL_ALL_EXCEPT_LIKE = 2
public const int SQL_SEARCHABLE = 3
//  SQLError defines
public const int SQL_NULL_HENV = 0
public const int SQL_NULL_HDBC = 0
public const int SQL_NULL_HSTMT = 0

// Level 1 Definitions/Functions
// Generally useful public const intants
//
public const int SQL_MAX_OPTION_STRING_LENGTH = 256
// Additional return codes
public const int SQL_STILL_EXECUTING = 2
public const int SQL_NEED_DATA = 99
// SQL extended datatypes
public const int SQL_DATE = 9
public const int SQL_TIME = 10
public const int SQL_TIMESTAMP = 11
public const int SQL_LONGVARCHAR = -1
public const int SQL_BINARY = -2
public const int SQL_VARBINARY = -3
public const int SQL_LONGVARBINARY = -4
public const int SQL_BIGINT = -5
public const int SQL_TINYINT = -6
public const int SQL_BIT = -7
public const int SQL_TYPE_DRIVER_START = -80
// C datatype to SQL datatype mapping
public const int SQL_SIGNED_OFFSET = -20
public const int SQL_UNSIGNED_OFFSET = -22
public const int SQL_C_DATE = SQL_DATE
public const int SQL_C_TIME = SQL_TIME
public const int SQL_C_TIMESTAMP = SQL_TIMESTAMP
public const int SQL_C_BINARY = SQL_BINARY
public const int SQL_C_BIT = SQL_BIT
public const int SQL_C_TINYINT = SQL_TINYINT
public const int SQL_C_SLONG = SQL_C_LONG + SQL_SIGNED_OFFSET
public const int SQL_C_SSHORT = SQL_C_SHORT + SQL_SIGNED_OFFSET
public const int SQL_C_STINYINT = SQL_TINYINT + SQL_SIGNED_OFFSET
public const int SQL_C_ULONG = SQL_C_LONG + SQL_UNSIGNED_OFFSET
public const int SQL_C_USHORT = SQL_C_SHORT + SQL_UNSIGNED_OFFSET
public const int SQL_C_UTINYINT = SQL_TINYINT + SQL_UNSIGNED_OFFSET
public const int SQL_C_BOOKMARK = SQL_C_ULONG
public const int SQL_ALL_TYPES = 0
//
//  Date/Time/Timestamp Structs
//
Type DATE_STRUCT
  year      As Integer
  month     As Integer
  day       As Integer
End Type

Type TIME_STRUCT
  hour      As Integer
  minute    As Integer
  second    As Integer
End Type

Type TIMESTAMP_STRUCT
  year      As Integer
  month     As Integer
  day       As Integer
  hour      As Integer
  minute    As Integer
  second    As Integer
  fraction  As Long
End Type

// Options for SQLDriverConnect
//
public const int SQL_DRIVER_NOPROMPT = 0
public const int SQL_DRIVER_COMPLETE = 1
public const int SQL_DRIVER_PROMPT = 2
public const int SQL_DRIVER_COMPLETE_REQUIRED = 3
// Special return values for SQLGetData
public const int SQL_NO_TOTAL = -4
// SQLSetParam extensions
public const int SQL_DEFAULT_PARAM = -5
public const int SQL_IGNORE = -6
public const int SQL_LEN_DATA_AT_EXEC_OFFSET = -100
//
// Defines for SQLGetFunctions
// Core Functions
//
public const int SQL_API_SQLALLOCCONNECT = 1
public const int SQL_API_SQLALLOCENV = 2
public const int SQL_API_SQLALLOCSTMT = 3
public const int SQL_API_SQLBINDCOL = 4
public const int SQL_API_SQLCANCEL = 5
public const int SQL_API_SQLCOLATTRIBUTES = 6
public const int SQL_API_SQLCONNECT = 7
public const int SQL_API_SQLDESCRIBECOL = 8
public const int SQL_API_SQLDISCONNECT = 9
public const int SQL_API_SQLERROR = 10
public const int SQL_API_SQLEXECDIRECT = 11
public const int SQL_API_SQLEXECUTE = 12
public const int SQL_API_SQLFETCH = 13
public const int SQL_API_SQLFREECONNECT = 14
public const int SQL_API_SQLFREEENV = 15
public const int SQL_API_SQLFREESTMT = 16
public const int SQL_API_SQLGETCURSORNAME = 17
public const int SQL_API_SQLNUMRESULTCOLS = 18
public const int SQL_API_SQLPREPARE = 19
public const int SQL_API_SQLROWCOUNT = 20
public const int SQL_API_SQLSETCURSORNAME = 21
public const int SQL_API_SQLSETPARAM = 22
public const int SQL_API_SQLTRANSACT = 23
public const int SQL_NUM_FUNCTIONS = 23
public const int SQL_EXT_API_START = 40
// Level 1 Functions
public const int SQL_API_SQLCOLUMNS = 40
public const int SQL_API_SQLDRIVERCONNECT = 41
public const int SQL_API_SQLGETCONNECTOPTION = 42
public const int SQL_API_SQLGETDATA = 43
public const int SQL_API_SQLGETFUNCTIONS = 44
public const int SQL_API_SQLGETINFO = 45
public const int SQL_API_SQLGETSTMTOPTION = 46
public const int SQL_API_SQLGETTYPEINFO = 47
public const int SQL_API_SQLPARAMDATA = 48
public const int SQL_API_SQLPUTDATA = 49
public const int SQL_API_SQLSETCONNECTOPTION = 50
public const int SQL_API_SQLSETSTMTOPTION = 51
public const int SQL_API_SQLSPECIALCOLUMNS = 52
public const int SQL_API_SQLSTATISTICS = 53
public const int SQL_API_SQLTABLES = 54
// Level 2 Functions
public const int SQL_API_SQLBROWSECONNECT = 55
public const int SQL_API_SQLCOLUMNPRIVILEGES = 56
public const int SQL_API_SQLDATASOURCES = 57
public const int SQL_API_SQLDESCRIBEPARAM = 58
public const int SQL_API_SQLEXTENDEDFETCH = 59
public const int SQL_API_SQLFOREIGNKEYS = 60
public const int SQL_API_SQLMORERESULTS = 61
public const int SQL_API_SQLNATIVESQL = 62
public const int SQL_API_SQLNUMPARAMS = 63
public const int SQL_API_SQLPARAMOPTIONS = 64
public const int SQL_API_SQLPRIMARYKEYS = 65
public const int SQL_API_SQLPROCEDURECOLUMNS = 66
public const int SQL_API_SQLPROCEDURES = 67
public const int SQL_API_SQLSETPOS = 68
public const int SQL_API_SQLSETSCROLLOPTIONS = 69
public const int SQL_API_SQLTABLEPRIVILEGES = 70
public const int SQL_API_SQLDRIVERS = 71
public const int SQL_API_SQLBINDPARAMETER = 72
public const int SQL_EXT_API_LAST = 72
public const int SQL_API_ALL_FUNCTIONS = 0
public const int SQL_NUM_EXTENSIONS = (SQL_EXT_API_LAST - SQL_EXT_API_START + 1)
// Defines for SQLGetInfo
public const int SQL_INFO_FIRST = 0
public const int SQL_ACTIVE_CONNECTIONS = 0
public const int SQL_ACTIVE_STATEMENTS = 1
public const int SQL_DATA_SOURCE_NAME = 2
public const int SQL_DRIVER_HDBC = 3
public const int SQL_DRIVER_HENV = 4
public const int SQL_DRIVER_HSTMT = 5
public const int SQL_DRIVER_NAME = 6
public const int SQL_DRIVER_VER = 7
public const int SQL_FETCH_DIRECTION = 8
public const int SQL_ODBC_API_CONFORMANCE = 9
public const int SQL_ODBC_VER = 10
public const int SQL_ROW_UPDATES = 11
public const int SQL_ODBC_SAG_CLI_CONFORMANCE = 12
public const int SQL_SERVER_NAME = 13
public const int SQL_SEARCH_PATTERN_ESCAPE = 14
public const int SQL_ODBC_SQL_CONFORMANCE = 15
public const int SQL_DBMS_NAME = 17
public const int SQL_DBMS_VER = 18
public const int SQL_ACCESSIBLE_TABLES = 19
public const int SQL_ACCESSIBLE_PROCEDURES = 20
public const int SQL_PROCEDURES = 21
public const int SQL_CONCAT_NULL_BEHAVIOR = 22
public const int SQL_CURSOR_COMMIT_BEHAVIOR = 23
public const int SQL_CURSOR_ROLLBACK_BEHAVIOR = 24
public const int SQL_DATA_SOURCE_READ_ONLY = 25
public const int SQL_DEFAULT_TXN_ISOLATION = 26
public const int SQL_EXPRESSIONS_IN_ORDERBY = 27
public const int SQL_IDENTIFIER_CASE = 28
public const int SQL_IDENTIFIER_QUOTE_CHAR = 29
public const int SQL_MAX_COLUMN_NAME_LEN = 30
public const int SQL_MAX_CURSOR_NAME_LEN = 31
public const int SQL_MAX_OWNER_NAME_LEN = 32
public const int SQL_MAX_PROCEDURE_NAME_LEN = 33
public const int SQL_MAX_QUALIFIER_NAME_LEN = 34
public const int SQL_MAX_TABLE_NAME_LEN = 35
public const int SQL_MULT_RESULT_SETS = 36
public const int SQL_MULTIPLE_ACTIVE_TXN = 37
public const int SQL_OUTER_JOINS = 38
public const int SQL_OWNER_TERM = 39
public const int SQL_PROCEDURE_TERM = 40
public const int SQL_QUALIFIER_NAME_SEPARATOR = 41
public const int SQL_QUALIFIER_TERM = 42
public const int SQL_SCROLL_CONCURRENCY = 43
public const int SQL_SCROLL_OPTIONS = 44
public const int SQL_TABLE_TERM = 45
public const int SQL_TXN_CAPABLE = 46
public const int SQL_USER_NAME = 47
public const int SQL_CONVERT_FUNCTIONS = 48
public const int SQL_NUMERIC_FUNCTIONS = 49
public const int SQL_STRING_FUNCTIONS = 50
public const int SQL_SYSTEM_FUNCTIONS = 51
public const int SQL_TIMEDATE_FUNCTIONS = 52
public const int SQL_CONVERT_BIGINT = 53
public const int SQL_CONVERT_BINARY = 54
public const int SQL_CONVERT_BIT = 55
public const int SQL_CONVERT_CHAR = 56
public const int SQL_CONVERT_DATE = 57
public const int SQL_CONVERT_DECIMAL = 58
public const int SQL_CONVERT_DOUBLE = 59
public const int SQL_CONVERT_FLOAT = 60
public const int SQL_CONVERT_INTEGER = 61
public const int SQL_CONVERT_LONGVARCHAR = 62
public const int SQL_CONVERT_NUMERIC = 63
public const int SQL_CONVERT_REAL = 64
public const int SQL_CONVERT_SMALLINT = 65
public const int SQL_CONVERT_TIME = 66
public const int SQL_CONVERT_TIMESTAMP = 67
public const int SQL_CONVERT_TINYINT = 68
public const int SQL_CONVERT_VARBINARY = 69
public const int SQL_CONVERT_VARCHAR = 70
public const int SQL_CONVERT_LONGVARBINARY = 71
public const int SQL_TXN_ISOLATION_OPTION = 72
public const int SQL_ODBC_SQL_OPT_IEF = 73
public const int SQL_CORRELATION_NAME = 74
public const int SQL_NON_NULLABLE_COLUMNS = 75
public const int SQL_DRIVER_HLIB = 76
public const int SQL_DRIVER_ODBC_VER = 77
public const int SQL_LOCK_TYPES = 78
public const int SQL_POS_OPERATIONS = 79
public const int SQL_POSITIONED_STATEMENTS = 80
public const int SQL_GETDATA_EXTENSIONS = 81
public const int SQL_BOOKMARK_PERSISTENCE = 82
public const int SQL_STATIC_SENSITIVITY = 83
public const int SQL_FILE_USAGE = 84
public const int SQL_NULL_COLLATION = 85
public const int SQL_ALTER_TABLE = 86
public const int SQL_COLUMN_ALIAS = 87
public const int SQL_GROUP_BY = 88
public const int SQL_KEYWORDS = 89
public const int SQL_ORDER_BY_COLUMNS_IN_SELECT = 90
public const int SQL_OWNER_USAGE = 91
public const int SQL_QUALIFIER_USAGE = 92
public const int SQL_QUOTED_IDENTIFIER_CASE = 93
public const int SQL_SPECIAL_CHARACTERS = 94
public const int SQL_SUBQUERIES = 95
public const int SQL_UNION = 96
public const int SQL_MAX_COLUMNS_IN_GROUP_BY = 97
public const int SQL_MAX_COLUMNS_IN_INDEX = 98
public const int SQL_MAX_COLUMNS_IN_ORDER_BY = 99
public const int SQL_MAX_COLUMNS_IN_SELECT = 100
public const int SQL_MAX_COLUMNS_IN_TABLE = 101
public const int SQL_MAX_INDEX_SIZE = 102
public const int SQL_MAX_ROW_SIZE_INCLUDES_LONG = 103
public const int SQL_MAX_ROW_SIZE = 104
public const int SQL_MAX_STATEMENT_LEN = 105
public const int SQL_MAX_TABLES_IN_SELECT = 106
public const int SQL_MAX_USER_NAME_LEN = 107
public const int SQL_MAX_CHAR_LITERAL_LEN = 108
public const int SQL_TIMEDATE_ADD_INTERVALS = 109
public const int SQL_TIMEDATE_DIFF_INTERVALS = 110
public const int SQL_NEED_LONG_DATA_LEN = 111
public const int SQL_MAX_BINARY_LITERAL_LEN = 112
public const int SQL_LIKE_ESCAPE_CLAUSE = 113
public const int SQL_QUALIFIER_LOCATION = 114
public const int SQL_INFO_LAST = SQL_QUALIFIER_LOCATION
public const int SQL_INFO_DRIVER_START = 1000
//
// "SQL_CONVERT_" return value bitmasks
//
public const int SQL_CVT_CHAR =  H1 
public const int SQL_CVT_NUMERIC =  H2 
public const int SQL_CVT_DECIMAL =  H4 
public const int SQL_CVT_INTEGER =  H8 
public const int SQL_CVT_SMALLINT =  H10 
public const int SQL_CVT_FLOAT =  H20 
public const int SQL_CVT_REAL =  H40 
public const int SQL_CVT_DOUBLE =  H80 
public const int SQL_CVT_VARCHAR =  H100 
public const int SQL_CVT_LONGVARCHAR =  H200 
public const int SQL_CVT_BINARY =  H400 
public const int SQL_CVT_VARBINARY =  H800 
public const int SQL_CVT_BIT =  H1000 
public const int SQL_CVT_TINYINT =  H2000 
public const int SQL_CVT_BIGINT =  H4000 
public const int SQL_CVT_DATE =  H8000 
public const int SQL_CVT_TIME =  H10000
public const int SQL_CVT_TIMESTAMP =  H20000
public const int SQL_CVT_LONGVARBINARY =  H40000

// Conversion functions
//
public const int SQL_FN_CVT_CONVERT =  H1 
// String functions
public const int SQL_FN_STR_CONCAT =  H1 
public const int SQL_FN_STR_INSERT =  H2 
public const int SQL_FN_STR_LEFT =  H4 
public const int SQL_FN_STR_LTRIM =  H8 
public const int SQL_FN_STR_LENGTH =  H10 
public const int SQL_FN_STR_LOCATE =  H20 
public const int SQL_FN_STR_LCASE =  H40 
public const int SQL_FN_STR_REPEAT =  H80 
public const int SQL_FN_STR_REPLACE =  H100 
public const int SQL_FN_STR_RIGHT =  H200 
public const int SQL_FN_STR_RTRIM =  H400 
public const int SQL_FN_STR_SUBSTRING =  H800 
public const int SQL_FN_STR_UCASE =  H1000 
public const int SQL_FN_STR_ASCII =  H2000 
public const int SQL_FN_STR_CHAR =  H4000 
public const int SQL_FN_STR_DIFFERENCE =  H8000 
public const int SQL_FN_STR_LOCATE_2 =  H10000
public const int SQL_FN_STR_SOUNDEX =  H20000
public const int SQL_FN_STR_SPACE =  H40000
// Numeric functions
public const int SQL_FN_NUM_ABS =  H1 
public const int SQL_FN_NUM_ACOS =  H2 
public const int SQL_FN_NUM_ASIN =  H4 
public const int SQL_FN_NUM_ATAN =  H8 
public const int SQL_FN_NUM_ATAN2 =  H10 
public const int SQL_FN_NUM_CEILING =  H20 
public const int SQL_FN_NUM_COS =  H40 
public const int SQL_FN_NUM_COT =  H80 
public const int SQL_FN_NUM_EXP =  H100 
public const int SQL_FN_NUM_FLOOR =  H200 
public const int SQL_FN_NUM_LOG =  H400 
public const int SQL_FN_NUM_MOD =  H800 
public const int SQL_FN_NUM_SIGN =  H1000 
public const int SQL_FN_NUM_SIN =  H2000 
public const int SQL_FN_NUM_SQRT =  H4000 
public const int SQL_FN_NUM_TAN =  H8000 
public const int SQL_FN_NUM_PI =  H10000
public const int SQL_FN_NUM_RAND =  H20000
public const int SQL_FN_NUM_DEGREES =  H40000
public const int SQL_FN_NUM_LOG10 =  H80000
public const int SQL_FN_NUM_POWER =  H100000
public const int SQL_FN_NUM_RADIANS =  H200000
public const int SQL_FN_NUM_ROUND =  H400000
public const int SQL_FN_NUM_TRUNCATE =  H800000
// Time/date functions
public const int SQL_FN_TD_NOW =  H1 
public const int SQL_FN_TD_CURDATE =  H2 
public const int SQL_FN_TD_DAYOFMONTH =  H4 
public const int SQL_FN_TD_DAYOFWEEK =  H8 
public const int SQL_FN_TD_DAYOFYEAR =  H10 
public const int SQL_FN_TD_MONTH =  H20 
public const int SQL_FN_TD_QUARTER =  H40 
public const int SQL_FN_TD_WEEK =  H80 
public const int SQL_FN_TD_YEAR =  H100 
public const int SQL_FN_TD_CURTIME =  H200 
public const int SQL_FN_TD_HOUR =  H400 
public const int SQL_FN_TD_MINUTE =  H800 
public const int SQL_FN_TD_SECOND =  H1000 
//
public const int SQL_FN_TD_TIMESTAMPADD =  H2000 
public const int SQL_FN_TD_TIMESTAMPDIFF =  H4000 
public const int SQL_FN_TD_DAYNAME =  H8000 
public const int SQL_FN_TD_MONTHNAME =  H10000
// System functions
public const int SQL_FN_SYS_USERNAME =  H1 
public const int SQL_FN_SYS_DBNAME =  H2 
public const int SQL_FN_SYS_IFNULL =  H4 
// Timedate intervals
public const int SQL_FN_TSI_FRAC_SECOND =  H1 
public const int SQL_FN_TSI_SECOND =  H2 
public const int SQL_FN_TSI_MINUTE =  H4 
public const int SQL_FN_TSI_HOUR =  H8 
public const int SQL_FN_TSI_DAY =  H10 
public const int SQL_FN_TSI_WEEK =  H20 
public const int SQL_FN_TSI_MONTH =  H40 
public const int SQL_FN_TSI_QUARTER =  H80 
public const int SQL_FN_TSI_YEAR =  H100 
// ODBC API conformance
public const int SQL_OAC_NONE = 0
public const int SQL_OAC_LEVEL1 = 1
public const int SQL_OAC_LEVEL2 = 2
// SAG CLI conformance
public const int SQL_OSCC_NOT_COMPLIANT = 0
public const int SQL_OSCC_COMPLIANT = 1
// ODBC SQL conformance
public const int SQL_OSC_MINIMUM = 0
public const int SQL_OSC_CORE = 1
public const int SQL_OSC_EXTENDED = 2
// Concatenation behavior
public const int SQL_CB_NULL = 0
public const int SQL_CB_NON_NULL = 1
// Cursor commit behavior
public const int SQL_CB_DELETE = 0
public const int SQL_CB_CLOSE = 1
public const int SQL_CB_PRESERVE = 2
// Identifier case
public const int SQL_IC_UPPER = 1
public const int SQL_IC_LOWER = 2
public const int SQL_IC_SENSITIVE = 3
public const int SQL_IC_MIXED = 4
// Transaction capable
public const int SQL_TC_NONE = 0
public const int SQL_TC_DML = 1
public const int SQL_TC_ALL = 2
public const int SQL_TC_DDL_COMMIT = 3
public const int SQL_TC_DDL_IGNORE = 4
// Scroll option masks
public const int SQL_SO_FORWARD_ONLY =  H1 
public const int SQL_SO_KEYSET_DRIVEN =  H2 
public const int SQL_SO_DYNAMIC =  H4 
public const int SQL_SO_MIXED =  H8 
public const int SQL_SO_STATIC =  H10 
// Scroll concurrency option masks
public const int SQL_SCCO_READ_ONLY =  H1 
public const int SQL_SCCO_LOCK =  H2 
public const int SQL_SCCO_OPT_ROWVER =  H4 
public const int SQL_SCCO_OPT_VALUES =  H8 
// Fetch direction option masks
public const int SQL_FD_FETCH_NEXT =  H1 
public const int SQL_FD_FETCH_FIRST =  H2 
public const int SQL_FD_FETCH_LAST =  H4 
public const int SQL_FD_FETCH_PRIOR =  H8 
public const int SQL_FD_FETCH_ABSOLUTE =  H10 
public const int SQL_FD_FETCH_RELATIVE =  H20 
public const int SQL_FD_FETCH_RESUME =  H40 
public const int SQL_FD_FETCH_BOOKMARK =  H80 
// Transaction isolation option masks
public const int SQL_TXN_READ_UNCOMMITTED =  H1 
public const int SQL_TXN_READ_COMMITTED =  H2 
public const int SQL_TXN_REPEATABLE_READ =  H4 
public const int SQL_TXN_SERIALIZABLE =  H8 
public const int SQL_TXN_VERSIONING =  H10 
// Correlation name
public const int SQL_CN_NONE = 0
public const int SQL_CN_DIFFERENT = 1
public const int SQL_CN_ANY = 2
// Non-nullable columns
public const int SQL_NNC_NULL = 0
public const int SQL_NNC_NON_NULL = 1
// Null collation
public const int SQL_NC_HIGH = 0
public const int SQL_NC_LOW = 1
public const int SQL_NC_START = 2
public const int SQL_NC_END = 4
// File usage
public const int SQL_FILE_NOT_SUPPORTED = 0
public const int SQL_FILE_TABLE = 1
public const int SQL_FILE_QUALIFIER = 2
// SQLGetData extensions masks
public const int SQL_GD_ANY_COLUMN =  H1 
public const int SQL_GD_ANY_ORDER =  H2 
public const int SQL_GD_BLOCK =  H4 
public const int SQL_GD_BOUND =  H8 
// Alter table
public const int SQL_AT_ADD_COLUMN = 1
public const int SQL_AT_DROP_COLUMN = 2
// Positioned statements masks
public const int SQL_PS_POSITIONED_DELETE =  H1 
public const int SQL_PS_POSITIONED_UPDATE =  H2 
public const int SQL_PS_SELECT_FOR_UPDATE =  H4 
// Group By
public const int SQL_GB_NOT_SUPPORTED = 0
public const int SQL_GB_GROUP_BY_EQUALS_SELECT = 1
public const int SQL_GB_GROUP_BY_CONTAINS_SELECT = 2
public const int SQL_GB_NO_RELATION = 3
// Owner usage masks
public const int SQL_OU_DML_STATEMENTS =  H1 
public const int SQL_OU_PROCEDURE_INVOCATION =  H2 
public const int SQL_OU_TABLE_DEFINITION =  H4 
public const int SQL_OU_INDEX_DEFINITION =  H8 
public const int SQL_OU_PRIVILEGE_DEFINITION =  H10 
// Qualifier usage masks
public const int SQL_QU_DML_STATEMENTS =  H1 
public const int SQL_QU_PROCEDURE_INVOCATION =  H2 
public const int SQL_QU_TABLE_DEFINITION =  H4 
public const int SQL_QU_INDEX_DEFINITION =  H8 
public const int SQL_QU_PRIVILEGE_DEFINITION =  H10 
// Subqueries masks
public const int SQL_SQ_COMPARISON =  H1 
public const int SQL_SQ_EXISTS =  H2 
public const int SQL_SQ_IN =  H4 
public const int SQL_SQ_QUANTIFIED =  H8 
public const int SQL_SQ_CORRELATED_SUBQUERIES =  H10 
// Union masks
public const int SQL_U_UNION =  H1 
public const int SQL_U_UNION_ALL =  H2 
// Bookmark persistence
public const int SQL_BP_CLOSE =  H1 
public const int SQL_BP_DELETE =  H2 
public const int SQL_BP_DROP =  H4 
public const int SQL_BP_TRANSACTION =  H8 
public const int SQL_BP_UPDATE =  H10 
public const int SQL_BP_OTHER_HSTMT =  H20 
public const int SQL_BP_SCROLL =  H40 
// Static sensitivity
public const int SQL_SS_ADDITIONS =  H1 
public const int SQL_SS_DELETIONS =  H2 
public const int SQL_SS_UPDATES =  H4 
// Lock types masks
public const int SQL_LCK_NO_CHANGE =  H1 
public const int SQL_LCK_EXCLUSIVE =  H2 
public const int SQL_LCK_UNLOCK =  H4 
// Positioned operations masks
public const int SQL_POS_POSITION =  H1 
public const int SQL_POS_REFRESH =  H2 
public const int SQL_POS_UPDATE =  H4 
public const int SQL_POS_DELETE =  H8 
public const int SQL_POS_ADD =  H10 
// Qualifier location
public const int SQL_QL_START = 1
public const int SQL_QL_END = 2
// Options for SQLGetStmtOption/SQLSetStmtOption
public const int SQL_QUERY_TIMEOUT = 0
public const int SQL_MAX_ROWS = 1
public const int SQL_NOSCAN = 2
public const int SQL_MAX_LENGTH = 3
public const int SQL_ASYNC_ENABLE = 4
public const int SQL_BIND_TYPE = 5
public const int SQL_CURSOR_TYPE = 6
public const int SQL_CONCURRENCY = 7
public const int SQL_KEYSET_SIZE = 8
public const int SQL_ROWSET_SIZE = 9
public const int SQL_SIMULATE_CURSOR = 10
public const int SQL_RETRIEVE_DATA = 11
public const int SQL_USE_BOOKMARKS = 12
public const int SQL_GET_BOOKMARK = 13
public const int SQL_ROW_NUMBER = 14
public const int SQL_STMT_OPT_MAX = SQL_ROW_NUMBER
// Statement option values   defaults
public const int SQL_QUERY_TIMEOUT_DEFAULT = 0
public const int SQL_MAX_ROWS_DEFAULT = 0
public const int SQL_NOSCAN_OFF = 0
public const int SQL_NOSCAN_ON = 1
public const int SQL_NOSCAN_DEFAULT = SQL_NOSCAN_OFF
public const int SQL_MAX_LENGTH_DEFAULT = 0
public const int SQL_ASYNC_ENABLE_OFF = 0
public const int SQL_ASYNC_ENABLE_ON = 1
public const int SQL_ASYNC_ENABLE_DEFAULT = SQL_ASYNC_ENABLE_OFF
public const int SQL_BIND_BY_COLUMN = 0
public const int SQL_CONCUR_READ_ONLY = 1
public const int SQL_CONCUR_LOCK = 2
public const int SQL_CONCUR_ROWVER = 3
public const int SQL_CONCUR_VALUES = 4
public const int SQL_CURSOR_FORWARD_ONLY = 0
public const int SQL_CURSOR_KEYSET_DRIVEN = 1
public const int SQL_CURSOR_DYNAMIC = 2
public const int SQL_CURSOR_STATIC = 3
public const int SQL_ROWSET_SIZE_DEFAULT = 1
public const int SQL_KEYSET_SIZE_DEFAULT = 0
public const int SQL_SC_NON_UNIQUE = 0
public const int SQL_SC_TRY_UNIQUE = 1
public const int SQL_SC_UNIQUE = 2
public const int SQL_RD_OFF = 0
public const int SQL_RD_ON = 1
public const int SQL_RD_DEFAULT = SQL_RD_ON
public const int SQL_UB_OFF = 0
public const int SQL_UB_ON = 1
public const int SQL_UB_DEFAULT = SQL_UB_ON
// Options for SQLSetConnectOption/SQLGetConnectOption
public const int SQL_ACCESS_MODE = 101
public const int SQL_AUTOCOMMIT = 102
public const int SQL_LOGIN_TIMEOUT = 103
public const int SQL_OPT_TRACE = 104
public const int SQL_OPT_TRACEFILE = 105
public const int SQL_TRANSLATE_DLL = 106
public const int SQL_TRANSLATE_OPTION = 107
public const int SQL_TXN_ISOLATION = 108
public const int SQL_CURRENT_QUALIFIER = 109
public const int SQL_CONNECT_OPT_DRVR_START = 1000
public const int SQL_ODBC_CURSORS = 110
public const int SQL_QUIET_MODE = 111
public const int SQL_PACKET_SIZE = 112
public const int SQL_CONN_OPT_MAX = SQL_PACKET_SIZE
public const int SQL_CONN_OPT_MIN = SQL_ACCESS_MODE
// Access mode options
public const int SQL_MODE_READ_WRITE = 0
public const int SQL_MODE_READ_ONLY = 1
public const int SQL_MODE_DEFAULT = SQL_MODE_READ_WRITE
// Autocommit options
public const int SQL_AUTOCOMMIT_OFF = 0
public const int SQL_AUTOCOMMIT_ON = 1
public const int SQL_AUTOCOMMIT_DEFAULT = SQL_AUTOCOMMIT_ON
// Login timeout options
public const int SQL_LOGIN_TIMEOUT_DEFAULT = 15
// Trace options
public const int SQL_OPT_TRACE_OFF = 0
public const int SQL_OPT_TRACE_ON = 1
public const int SQL_OPT_TRACE_DEFAULT = SQL_OPT_TRACE_OFF
public const int SQL_OPT_TRACE_FILE_DEFAULT = "\\SQL.LOG"
// Cursor options
public const int SQL_CUR_USE_IF_NEEDED = 0
public const int SQL_CUR_USE_ODBC = 1
public const int SQL_CUR_USE_DRIVER = 2
public const int SQL_CUR_DEFAULT = SQL_CUR_USE_DRIVER
// Column types and scopes in SQLSpecialColumns.
public const int SQL_BEST_ROWID = 1
public const int SQL_ROWVER = 2
public const int SQL_SCOPE_CURROW = 0
public const int SQL_SCOPE_TRANSACTION = 1
public const int SQL_SCOPE_SESSION = 2

// Level 2 Functions
//
// SQLExtendedFetch "fFetchType" values
public const int SQL_FETCH_NEXT = 1
public const int SQL_FETCH_FIRST = 2
public const int SQL_FETCH_LAST = 3
public const int SQL_FETCH_PRIOR = 4
public const int SQL_FETCH_ABSOLUTE = 5
public const int SQL_FETCH_RELATIVE = 6
public const int SQL_FETCH_BOOKMARK = 8
// SQLExtendedFetch "rgfRowStatus" element values
public const int SQL_ROW_SUCCESS = 0
public const int SQL_ROW_DELETED = 1
public const int SQL_ROW_UPDATED = 2
public const int SQL_ROW_NOROW = 3
public const int SQL_ROW_ADDED = 4
public const int SQL_ROW_ERROR = 5
// Defines for SQLForeignKeys (returned in result set)
public const int SQL_CASCADE = 0
public const int SQL_RESTRICT = 1
public const int SQL_SET_NULL = 2
// Defines for SQLProcedureColumns (returned in the result set)
public const int SQL_PARAM_TYPE_UNKNOWN = 0
public const int SQL_PARAM_INPUT = 1
public const int SQL_PARAM_INPUT_OUTPUT = 2
public const int SQL_RESULT_COL = 3
public const int SQL_PARAM_OUTPUT = 4
// Defines for SQLStatistics
public const int SQL_INDEX_UNIQUE = 0
public const int SQL_INDEX_ALL = 1
public const int SQL_ENSURE = 1
public const int SQL_QUICK = 0
// Defines for SQLStatistics (returned in the result set)
public const int SQL_TABLE_STAT = 0
public const int SQL_INDEX_CLUSTERED = 1
public const int SQL_INDEX_HASHED = 2
public const int SQL_INDEX_OTHER = 3
// Procedures
public const int SQL_PT_UNKNOWN = 0
public const int SQL_PT_PROCEDURE = 1
public const int SQL_PT_FUNCTION = 2
// Procedure columns
public const int SQL_PC_UNKNOWN = 0
public const int SQL_PC_NON_PSEUDO = 1
public const int SQL_PC_PSEUDO = 2
// Defines for SQLSetPos
public const int SQL_ENTIRE_ROWSET = 0
public const int SQL_POSITION = 0
public const int SQL_REFRESH = 1
public const int SQL_UPDATE = 2
public const int SQL_DELETE = 3
public const int SQL_ADD = 4
// Lock options
public const int SQL_LOCK_NO_CHANGE = 0
public const int SQL_LOCK_EXCLUSIVE = 1
public const int SQL_LOCK_UNLOCK = 2
// Deprecated public const intants
public const int SQL_DATABASE_NAME = 16
public const int SQL_FD_FETCH_PREV = SQL_FD_FETCH_PRIOR
public const int SQL_FETCH_PREV = SQL_FETCH_PRIOR
public const int SQL_CONCUR_TIMESTAMP = SQL_CONCUR_ROWVER
public const int SQL_SCCO_OPT_TIMESTAMP = SQL_SCCO_OPT_ROWVER
public const int SQL_CC_DELETE = SQL_CB_DELETE
public const int SQL_CR_DELETE = SQL_CB_DELETE
public const int SQL_CC_CLOSE = SQL_CB_CLOSE
public const int SQL_CR_CLOSE = SQL_CB_CLOSE
public const int SQL_CC_PRESERVE = SQL_CB_PRESERVE
public const int SQL_CR_PRESERVE = SQL_CB_PRESERVE
public const int SQL_FETCH_RESUME = 7
public const int SQL_SCROLL_FORWARD_ONLY = 0
public const int SQL_SCROLL_KEYSET_DRIVEN = -1
public const int SQL_SCROLL_DYNAMIC = -2
public const int SQL_SCROLL_STATIC = -3


// -- Declares for PDH (Performance Helper Data)

Type PDH_COUNTER_PATH_ELEMENTS
    szMachineName As String
    szObjectName As String
    szInstanceName As String
    szParentInstance As String
    dwInstanceIndex As Long
    szCounterName As String
End Type

// Duplicates public const int ERROR_SUCCESS = 0     //   Pdh Error status return values
public const int PDH_CSTATUS_VALID_DATA =  H20000000
public const int PDH_CSTATUS_NEW_DATA =  H20000001
public const int PDH_CSTATUS_NO_MACHINE =  HA00007D0
public const int PDH_CSTATUS_NO_INSTANCE =  HA00007D1
public const int PDH_MORE_DATA =  HA00007D2
public const int PDH_CSTATUS_ITEM_NOT_VALIDATED =  HA00007D3
public const int PDH_RETRY =  HA00007D4
public const int PDH_NO_DATA =  HA00007D5
public const int PDH_CALC_NEGATIVE_DENOMINATOR =  HA00007D6
public const int PDH_CALC_NEGATIVE_TIMEBASE =  HA00007D7
public const int PDH_CALC_NEGATIVE_VALUE =  HA00007D8
public const int PDH_DIALOG_CANCELLED =  HA00007D9
public const int PDH_CSTATUS_NO_OBJECT =  HE0000BB8
public const int PDH_CSTATUS_NO_COUNTER =  HE0000BB9
public const int PDH_CSTATUS_INVALID_DATA =  HE0000BBA
public const int PDH_MEMORY_ALLOCATION_FAILURE =  HE0000BBB
public const int PDH_INVALID_HANDLE =  HE0000BBC
public const int PDH_INVALID_ARGUMENT =  HE0000BBD
public const int PDH_FUNCTION_NOT_FOUND =  HE0000BBE
public const int PDH_CSTATUS_NO_COUNTERNAME =  HE0000BBF
public const int PDH_CSTATUS_BAD_COUNTERNAME =  HE0000BC0
public const int PDH_INVALID_BUFFER =  HE0000BC1
public const int PDH_INSUFFICIENT_BUFFER =  HE0000BC2
public const int PDH_CANNOT_CONNECT_MACHINE =  HE0000BC3
public const int PDH_INVALID_PATH =  HE0000BC4
public const int PDH_INVALID_INSTANCE =  HE0000BC5
public const int PDH_INVALID_DATA =  HE0000BC6
public const int PDH_NO_DIALOG_DATA =  HE0000BC7
public const int PDH_CANNOT_READ_NAME_STRINGS =  HE0000BC8